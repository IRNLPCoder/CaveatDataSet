PostId,TypeId,IsBest,Score,API,Sentences
7539,1,0,27,java.math.BigDecimal,"Is it used for rounding in java.math.BigDecimal, if yes why does not it round the decimal digits but even mentissa part."
4194330,2,0,32,java.math.BigDecimal,"For rounding just the fractional part of a BigDecimal, check out the BigDecimal.setScale(int newScale, int roundingMode) method."
4194330,2,0,32,java.math.BigDecimal,The result of this is a BigDecimal with the value 1.24 (because of the rounding up rule)
7552,2,0,1,java.math.BigDecimal,"Actually I found some online example, which stated the use of MathContext to round the amounts/numbers stored in BigDecimal."
7552,2,0,1,java.math.BigDecimal,"For example, If MathContext is configured to have precision = 2 and rounding mode = ROUNDHALFEVEN BigDecimal Number = 0.5294, is rounded to 0.53 So I thought it is a newer technique and used it for rounding purpose."
7561,2,1,22,java.math.BigDecimal,Can you please explain me MathContext in the context of BigDecimal#round method.
7561,2,1,22,java.math.BigDecimal,There's nothing special about BigDecimal.round() vs. any other BigDecimal method.
16816,2,0,0,java.math.BigDecimal,"As mentioned above, you need to be aware of the contract with hashCode, and similarly, watch out for the gotchas around the Comparable interface - in almost all situations you want the natural ordering as defined by Comparable to be consistent with equals (see the BigDecimal api doc for the canonical counter example) Creating a new method for deciding equality, quite apart from not working with the existing library classes, flies in the face of Java convention somewhat."
2504988,2,0,2,java.math.BigDecimal,Have those people ever stopped to look at some Java code doing some basic maths like increasing a financial value by a percentage using BigDecimal ?
194889,2,0,435,java.math.BigDecimal,"The BigInteger and BigDecimal classes of Java suffer from the same confusing verbosity, whereas their equivalent in C++ are as clear as built-in types."
194889,2,0,435,java.math.BigDecimal,"Some objects would greatly benefit from operator overloading (concrete or numerical types, like BigDecimal, complex numbers, matrices, containers, iterators, comparators, parsers etc.)."
77811,2,0,2,java.math.BigDecimal,"Also assuming that Complex is immutable as the mentioned BigInteger and similar immutable BigDecimal, I'd I think you mean the following, as you're assigning the reference to the Complex returned from adding b and c, and not comparing this reference to a."
86531,1,0,4,java.math.BigDecimal,Trying to keep all the presentation stuff in the xhtml on this project and I need to format some values in a selectItem tag have a BigDecimal value and need to make it look like currency.
108980,2,0,6,java.math.BigDecimal,or is there a maximum precision on BigDecimal values?
12600683,2,0,2,java.math.BigDecimal,The explanation for this is given in the book 'Effective Java' Consider BigDecimal and BigInteger classes in Java .
12600683,2,0,2,java.math.BigDecimal,"It was not widely understood that immutable classes had to be effectively final  when BigInteger and BigDecimal were written, so all of their methods may be  overridden."
12600683,2,0,2,java.math.BigDecimal,"If you write a class whose security depends on the immutability of a BigInteger or BigDecimal argument from an un-trusted client, you must check to see that the argument is a “real” BigInteger or BigDecimal, rather than an instance of an un trusted subclass."
12684082,2,0,50,java.math.BigDecimal,"As some others have noted, the correct answer is to use either DecimalFormat or BigDecimal."
24884082,2,0,4,java.math.BigDecimal,You can use BigDecimal code.
6569383,2,0,2,java.math.BigDecimal,Use BigDecimal or any other decimal-based format.
6569383,2,0,2,java.math.BigDecimal,"– Paŭlo Ebermann   I do use BigDecimal for calculations, but bear in mind it is dependent on the size of numbers you're dealing with."
32026036,2,0,0,java.math.BigDecimal,BigDecimal#setScale() code.
4826827,2,0,42,java.math.BigDecimal,you can use BigDecimal code.
4826827,2,0,42,java.math.BigDecimal,or without BigDecimal  code.
154354,2,0,90,java.math.BigDecimal,will get you a BigDecimal.
154354,2,0,90,java.math.BigDecimal,"To get the string out of it, just call that BigDecimal's toString method, or the toPlainString method for Java 5+ for a plain format string."
171893,2,0,16,java.math.BigDecimal,I really wish BigDecimal with a literal syntax was the default decimal type...
179474,2,0,7,java.math.BigDecimal,Use BigDecimal instead.
179487,2,0,33,java.math.BigDecimal,"As a previous poster suggested, When you are doing numeric calculations, use java.math.BigDecimal."
179487,2,0,33,java.math.BigDecimal,"However, there is a gotcha to using BigDecimal."
179487,2,0,33,java.math.BigDecimal,"When you are converting from the double value to a BigDecimal, you have a choice of using a new BigDecimal(double) constructor or the BigDecimal.valueOf(double) static factory method."
179487,2,0,33,java.math.BigDecimal,"The double constructor converts the entire precision of the double to a BigDecimal while the static factory effectively converts it to a string, then converts that to a BigDecimal."
179487,2,0,33,java.math.BigDecimal,"If you used the BigDecimal constructor, you would get the number that is NOT equal to 0.585, while the static method would give you a value equal to 0.585. code."
10028960,2,0,2,java.math.BigDecimal,Will result in 1499999.9999999998 where the goal here is to round at the units of 500000 (i.e  we want 1500000) In fact the only way to be completely sure you've eliminated the imprecision is to go through a BigDecimal to scale off.
10028960,2,0,2,java.math.BigDecimal,Using a mix of the epsilon strategy and the BigDecimal strategy will give you fine control over your precision.
10028960,2,0,2,java.math.BigDecimal,The idea being the epsilon gets you very close and then the BigDecimal will eliminate any imprecision caused by rescaling afterwards.
10028960,2,0,2,java.math.BigDecimal,Though using BigDecimal will reduce the expected performance of your application.
16248507,2,0,2,java.math.BigDecimal,"Better yet use JScience as BigDecimal is fairly limited (e.g., no sqrt function) code."
179453,2,1,53,java.math.BigDecimal,"To control the precision of floating point arithmetic, you should use java.math.BigDecimal."
179453,2,1,53,java.math.BigDecimal,Read The need for BigDecimal by John Zukowski for more information.
179453,2,1,53,java.math.BigDecimal,"Given your example, the last line would be as following using BigDecimal."
193631,2,1,12,java.math.BigDecimal,"For Java, check out BigDecimal"
264937,1,0,6,java.math.BigDecimal,As some of you pointed out if I could get to the 'real' string input I should use BigDecimal to check and so I have done:   code.
264968,2,0,5,java.math.BigDecimal,"If your goal is to represent a number with exactly n significant figures to the right of the decimal, BigDecimal is the class to use."
264968,2,0,5,java.math.BigDecimal,A BigDecimal consists   of an arbitrary precision integer   unscaled value and a 32-bit integer   scale.
264968,2,0,5,java.math.BigDecimal,The value of   the number represented by the   BigDecimal is therefore (unscaledValue   × 10-scale).
266691,2,0,1,java.math.BigDecimal,"If you can switch to BigDecimal, then as Ken G explains, that's what you should be using."
269669,1,0,19,java.math.BigDecimal,"Is there a difference between BigDecimal(""0"") and BigDecimal.ZERO?"
269669,1,0,19,java.math.BigDecimal,"I know that BigDecimal.ZERO is a 1.5 feature, so that's a concern, but assuming I'm using 1.5 does it matter?"
642907,2,0,2,java.math.BigDecimal,"Nevertheless, prefer Bigdecimal.ZERO as it's checked at compile time whereas you can accidentally type new BigDecimal(""9""), which the compiler will accept, but which will cause bugs into your application."
269684,2,1,29,java.math.BigDecimal,"BigDecimal.ZERO is a predefined constant and therefore doesn't have to be evaluated from a string at runtime as BigDecimal(""0"") would be."
269684,2,1,29,java.math.BigDecimal,"If your code needs to run on pre-1.5, then you can use the (much maligned) Singleton pattern to create an object equivalent to BigDecimal.ZERO."
269684,2,1,29,java.math.BigDecimal,"The first time it is used, it would call BigDecimal(""0"") to create a zero object, and return that object on subsequent calls."
269684,2,1,29,java.math.BigDecimal,"Otherwise, if your code is running on a 1.5 system, your singleton object can just return BigDecimal.ZERO with no runtime penalty."
269723,2,0,2,java.math.BigDecimal,"Out of curiosity I checked to constructor for BigDecimal and it doesn't have any optimizations for the ""0"" string."
269971,2,0,5,java.math.BigDecimal,"For what it's worth, java.math.BigDecimal has selectable rounding modes if you need more control over that sort of thing."
279566,2,0,2,java.math.BigDecimal,"I'm not sure how the performance is relative to BigDecimal, but the goal of the library is to provide highly-tuned classes for scientific applications, which seems like a good sign."
277313,2,0,4,java.math.BigDecimal,Have you checked the performance of BigDecimal?
284588,2,1,26,java.math.BigDecimal,"There are three libraries mentioned on the Arbitrary Precision Arithmetic page: java.math (containing the mentioned BigDecimal), Apfloat and JScience."
284588,2,1,26,java.math.BigDecimal,"The result is that for a relatively small number of digits BigDecimal is OK (half as fast as the others for 1000 digits), but if you use more digits it is way off - JScience is about 4 times faster."
280863,2,0,1,java.math.BigDecimal,"The same is true for BigDecimal.movePointLeft() or any other method on BigDecimal that returns a BigDecimal - they're new instances, leaving the original instance unchanged."
280863,2,0,1,java.math.BigDecimal,"Otherwise, if the ""immutable"" class is part of the application, where you have access to the class declaration/definition, methods returning a new instance, in the model of BigDecimal, String, etc, would be preferable."
280754,2,0,1,java.math.BigDecimal,There are also examples in the JDK:  String.subString(int) BigDecimal.movePointLeft(int)  Doing it this way has the advantage that you don't need to pass the instance you want to modify as argument for a method.
285680,1,0,76,java.math.BigDecimal,I understand that BigDecimal is recommended best practice for representing monetary values in Java.
285707,2,1,64,java.math.BigDecimal,BigDecimal all the way.
285707,2,1,64,java.math.BigDecimal,"I've heard of some folks creating their own Cash or Money classes which encapsulate a cash value with the currency, but under the skin it's still a BigDecimal, probably with BigDecimal.ROUND_HALF_EVEN rounding."
285707,2,1,64,java.math.BigDecimal,"Besides, if you dig around under the hood, you'll see they use BigDecimal too."
285709,2,0,3,java.math.BigDecimal,BigDecimal or another fixed point representation is what is generally needed for money.
7732816,2,0,13,java.math.BigDecimal,"I'm not expressing my opinion here, but there are quite good arguments against BigDecimal that someone should probably throw out: http://lemnik.wordpress.com/2011/03/25/bigdecimal-and-your-money/"
5304918,2,0,1,java.math.BigDecimal,"Hey, here's a very interesting article on BigDecimal, and an illustrative example of why sometimes it is used instead of doubles."
5304918,2,0,1,java.math.BigDecimal,BigDecimal Tutorial.
17816666,2,0,0,java.math.BigDecimal,Anyone without sufficient experience to appreciate the subtle issues outlined in the following article should seriously reconsider before dealing with real-world financial data: http://lemnik.wordpress.com/2011/03/25/bigdecimal-and-your-money BigDecimal is hardly the only correct representation or the only piece of the puzzle.
17816666,2,0,0,java.math.BigDecimal,"Given certain conditions, using a Money class backed by cents stored as an integer could be sufficient and would be much faster than BigDecimal."
286823,2,0,1,java.math.BigDecimal,Definitely not BigDecimal.
7492202,2,0,7,java.math.BigDecimal,One of its implementations is indeed based on BigDecimal.
1137523,2,0,0,java.math.BigDecimal,I would encapsulate BigDecimal in Money class that also has a currency just as someone mentioned above.
286175,2,0,2,java.math.BigDecimal,Using BigDecimal( or even an int) underneath.
285930,2,0,2,java.math.BigDecimal,But I am unsure about BigDecimal.
285930,2,0,2,java.math.BigDecimal,"Or maybe you'll be forced to use BigDecimal I would do a lot more reading on this, but ignore everybody who starts talking about using a float or double to represent money."
285773,2,1,6,java.math.BigDecimal,"e.g., double add(double, double), float add(float, fload), BigDecimal add(BigDecimal, BigDecimal), etc."
1261665,2,0,0,java.math.BigDecimal,Unfortunately this won't work well on BigInteger or BigDecimal
285917,2,0,0,java.math.BigDecimal,"For instance, if someone tries to use your class to operate on BigDecimal variables, you probably won't be using int variables for intermediate results."
295248,2,1,329,java.math.BigDecimal,"(java.math.BigDecimal provides something like System.Decimal - with differences - but there's no language support) Java has no equivalent of nullable value types Boxing in Java uses predefined (but ""normal"") reference types with particular operations on them."
300067,2,0,7,java.math.BigDecimal,"When using BigDecimal, you can specify one of eight different rounding policies."
300074,2,1,13,java.math.BigDecimal,"When using BigDecimal, you can specify one of eight different rounding policies."
2466584,2,0,0,java.math.BigDecimal,"Check out BigDecimal, it handles problems dealing with floating point arithmetic like that."
322853,2,0,13,java.math.BigDecimal,"If all the numbers you use are non-recurring decimals, and you want exact results, use BigDecimal."
2466598,2,0,2,java.math.BigDecimal,"Use java.math.BigDecimal Doubles are binary fractions internally, so they sometimes cannot represent decimal fractions to the exact decimal."
322875,2,1,55,java.math.BigDecimal,"As others have mentioned, you'll probably want to use the BigDecimal class, if you want to have an exact representation of 11.4."
322875,2,1,55,java.math.BigDecimal,"As has been mentioned several times already, Java has a BigDecimal class which will handle very large numbers and very small numbers."
322875,2,1,55,java.math.BigDecimal,"From the Java API Reference for the BigDecimal class:  Immutable,   arbitrary-precision signed decimal   numbers."
322875,2,1,55,java.math.BigDecimal,A BigDecimal consists of an   arbitrary precision integer unscaled   value and a 32-bit integer scale.
322875,2,1,55,java.math.BigDecimal,The value of   the number represented by the   BigDecimal is therefore (unscaledValue   × 10^-scale).
2466882,2,0,5,java.math.BigDecimal,"(VERY UNLIKELY) If you need more than 53 significant bits (15-16 significant digits) of precision, then use a high-precision floating-point type, like BigDecimal."
322897,2,0,4,java.math.BigDecimal,"If precision matters, use BigDecimal, but if you just want friendly output: code."
2881915,2,0,1,java.math.BigDecimal,Do not waste your efford using BigDecimal.
2467007,2,0,6,java.math.BigDecimal,You may want to look into using java's java.math.BigDecimal class if you really need precision math.
2467007,2,0,6,java.math.BigDecimal,Here is a good article from Oracle/Sun on the case for BigDecimal.
322758,2,0,5,java.math.BigDecimal,":) If you want exact precision, use BigDecimal."
322808,2,0,0,java.math.BigDecimal,Use a BigDecimal.
328049,2,0,1,java.math.BigDecimal,You may wish to check out the java BigDecimal class as an alternative to floats and doubles.
338671,2,1,3,java.math.BigDecimal,"The JSP Expression Language operator == (or its alias, eq) performs comparison with the equals method, although some coercions are performed if one of the objects is a special type (BigDecimal, BigInteger, Double, Float, Long, Integer, Short, Byte, Character, Boolean, or String)."
18517555,2,0,2,java.math.BigDecimal,If you use BigDecimal you can run it just for upto 18 digits.
354045,1,0,10,java.math.BigDecimal,"I am considering writing two limited precision alternatives to BigDecimal, namely DecimalInt and DecimalLong."
354045,1,0,10,java.math.BigDecimal,"EDIT: This is different from BigDecimal because it should be (a) a hell of a lot more efficient to not deal with an array of ints, and (b) it won't wrap BigInteger so it will be leaner on memory too, and (c) it will have a mutable option so it will be faster there as well."
354045,1,0,10,java.math.BigDecimal,"In summary - less overhead for the simple use cases like ""I want to store a bank balance without the overhead of BigDecimal and the inaccuracy of double""."
4261922,2,0,1,java.math.BigDecimal,Most people who are particularly concerned about rounding errors use BigDecimal and BigInteger which performs well enough in most situations.
358950,2,0,12,java.math.BigDecimal,"I strongly suspect the reason why this has not been done is that the overhead of BigDecimal and BigInteger is not as relevant as you think, and avoiding it not worth the effort and the risk of getting it wrong in some subtle way."
356865,2,0,71,java.math.BigDecimal,Use java.math.BigDecimal instead.
21558851,2,0,2,java.math.BigDecimal,"If you can use BigDecimal, then use it, else: code."
28749186,2,0,0,java.math.BigDecimal,"To make things short: Abstain from doubles for monetary values, and use exact number representations such as BigDecimal."
357057,2,0,0,java.math.BigDecimal,For further discussion of Money and the use of BigDecimal check out: http://stackoverflow.com/questions/285680/representing-monetary-values-in-java Thanks Loki for the interesting read.
393258,2,1,4,java.math.BigDecimal,"Considering that the abstract class Number is the superclass of classes  * BigDecimal, BigInteger,  * Byte, Double, Float,  * Integer, Long, and Short... if you want to have an int representation, you should use the .intValue() function."
393366,1,0,1,java.math.BigDecimal,"EDIT: wth, BigDecimal gave me the same kind of problem too."
399436,2,0,12,java.math.BigDecimal,"For money, always, ALWAYS use BigDecimal."
399571,2,0,0,java.math.BigDecimal,"I ended up not using float, BigDecimal, or double."
434548,1,0,0,java.math.BigDecimal,AlmostEqual2sComplement or BigDecimal Scaling.
434740,2,0,1,java.math.BigDecimal,"), use a BigDecimal."
434564,2,1,1,java.math.BigDecimal,"If you don't understand how that works (and performance is not the be-all and end-all in your application), use BigDecimal for safety."
434698,2,0,6,java.math.BigDecimal,"For some details about this you can read this small article  You should consider using java.lang.Math.signum or java.math.BigDecimal , especially for currency & tax computing"
440835,2,1,5,java.math.BigDecimal,"For example you cannot use library classes like java.math.BigDecimal, if they are not emulated."
460755,1,0,15,java.math.BigDecimal,"""new BigDecimal(13.3D)"" results in imprecise ""13.3000000000000007105..""?"
460755,1,0,15,java.math.BigDecimal,How is it that Java's BigDecimal can be this painful?
460755,1,0,15,java.math.BigDecimal,"Also I realise that BigDecimal has doubleValue() etc, but the library that I am working with helpfully uses a toString() and I can't change that :-( Cheers."
460881,2,0,3,java.math.BigDecimal,Just use BigDecimal.valueOf(d) or new BigDecimal(s).
460763,2,0,5,java.math.BigDecimal,This isn't the fault of BigDecimal - it's the fault of double.
460763,2,0,5,java.math.BigDecimal,BigDecimal is accurately representing the exact value of d. String.valueOf is only showing the result to a few decimal places.
460770,2,0,11,java.math.BigDecimal,"Your problem has nothing to do with BigDecimal, and everything with Double, which cannot represent 13.3 accurately, since it uses binary fractions internally."
460770,2,0,11,java.math.BigDecimal,"The first BigDecimal simply preserves it, while String.valueOf() does some fishy rounding that causes the second one to have the desired content, pretty much through luck."
460793,2,1,48,java.math.BigDecimal,"Well, the API does address this apparent inconsistency in the constructor BigDecimal(double val):   The results of this constructor can be somewhat unpredictable."
460793,2,1,48,java.math.BigDecimal,"One might   assume that writing new   BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to   0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal   to   0.1000000000000000055511151231257827021181583404541015625."
460793,2,1,48,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable:   writing new BigDecimal(""0.1"") creates   a BigDecimal which is exactly equal to   0.1, as one would expect."
460793,2,1,48,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that   this constructor provides an exact   conversion; it does not give the same   result as converting the double to a   String using the   Double.toString(double) method and   then using the BigDecimal(String)   constructor."
460793,2,1,48,java.math.BigDecimal,"Moral of the story: The pain seems self-inflicted, just use new BigDecimal(String val) or BigDecimal.valueOf(double val) instead =)"
474556,2,0,21,java.math.BigDecimal,"As a general guide, have a look at BigInteger and BigDecimal."
480632,1,0,96,java.math.BigDecimal,"For a bit of review, java.lang.Number is the abstract super-type of AtomicInteger, AtomicLong, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long and Short."
480632,1,0,96,java.math.BigDecimal,A compareTo implementation in Number would have to promote all numeric values to BigDecimal because it is capable of accommodating all the Number sub-types.
481404,2,1,44,java.math.BigDecimal,Remember the Number subtypes are:  Byte; Short; Integer; Long; AtomicInteger; AtomicLong; Float; Double; BigInteger; and BigDecimal.
480651,2,0,3,java.math.BigDecimal,Very probably because it would be rather inefficient to compare numbers - the only representation into which every Number can fit to allow such comparison would be BigDecimal.
508639,1,0,28,java.math.BigDecimal,Consider the constructor which takes a BigDecimal: code.
523564,2,0,7,java.math.BigDecimal,"However, a look at BigDecimal shows that there is Java source available for rounding in Java."
523564,2,0,7,java.math.BigDecimal,"So rather than just give you the code for your homework, I suggest that you look at the BigDecimal private method doRound(MathContext mc) in the Java source."
522875,2,0,17,java.math.BigDecimal,There is a great article called Make cents with BigDecimal on JavaWorld that you should take a look at.
530366,2,0,3,java.math.BigDecimal,"Note that if you have a BigDecimal, you can use the movePointLeft method: code."
546955,2,0,0,java.math.BigDecimal,For financials it's more common to use BigDecimal and related classes.
546955,2,0,0,java.math.BigDecimal,You may want to look at Apache Commons Math if you decide to give BigDecimal a try.
576281,2,0,0,java.math.BigDecimal,If you need exact representations of floating point numbers you need to look at java.math.BigDecimal.
611722,2,0,0,java.math.BigDecimal,Use java.math.BigDecimal for decimal arithmetic.
611738,2,1,7,java.math.BigDecimal,"For four consistent fractional figures, there is no need to drag in BigDecimal, if your aren't working with really long distances."
611750,2,0,1,java.math.BigDecimal,"If you need precise calculations, use BigDecimal instead of float."
611732,1,0,48,java.math.BigDecimal,What to do with Java BigDecimal performance?
611732,1,0,48,java.math.BigDecimal,"""Use BigDecimal!"""
611732,1,0,48,java.math.BigDecimal,"But now I have some code where performance is an issue, and BigDecimal is more than 1000 times (!)"
611732,1,0,48,java.math.BigDecimal,"And BigDecimal result = a.multiply(BigDecimal.ONE.divide(b).multiply(c) is not only ugly, but sluggishly slow."
611732,1,0,48,java.math.BigDecimal,What can I use to replace BigDecimal?
611732,1,0,48,java.math.BigDecimal,"I found otherwise excellent JScience library which has arbitrary-precision arithmetics, but it's even slower than BigDecimal."
14733855,2,0,6,java.math.BigDecimal,"Some notes:  Precalculate the arrays so I don't mess with the results by generating them Don't ever call BigDecimal.doubleValue(), as it's extremely slow Don't mess with the results by adding BigDecimals."
14733855,2,0,6,java.math.BigDecimal,"Tests:  BigDecimal: do the math exactly as you suggested it BigDecNoRecip: (1/b) * c = c/b, just do c/b Double: do the math with doubles  Here is the output: code."
611896,2,0,2,java.math.BigDecimal,Also you might try ArciMath BigDecimal to see if theirs speeds it up for you.
612009,2,0,1,java.math.BigDecimal,"Personally, I don't think BigDecimal is ideal for this."
612011,2,0,0,java.math.BigDecimal,"Perhaps you can allow the user to preview the result quickly using doubles, and then request the more precise value using BigDecimal if they wish?"
611761,2,0,5,java.math.BigDecimal,"For example, BigDecimal money = new BigDecimal (""4.20"") becomes long money = 420."
611773,2,0,1,java.math.BigDecimal,1/b is not exactly representable with BigDecimal either.
612287,2,0,3,java.math.BigDecimal,I remember attending a sales presentation from IBM for a hardware accelerated implementation of BigDecimal.
612063,2,0,6,java.math.BigDecimal,I don't see any reason to be using BigDecimal.
611821,2,0,9,java.math.BigDecimal,That should be maybe ten times as slow as using double; about a hundred times as fast as BigDecimal.
623631,2,1,13,java.math.BigDecimal,"For example, should the BigDecimal.add method be considered an accessor?"
628080,2,0,2,java.math.BigDecimal,"And, for what it's worth, when faced with the same problem for BigInteger and BigDecimal, Sun decided to go non-destructive."
641848,1,0,15,java.math.BigDecimal,Rounding a Java BigDecimal to the nearest interval.
641848,1,0,15,java.math.BigDecimal,I have a BigDecimal calculation result which I need to round to the nearest specified interval (in this case it's the financial market tick size).
641848,1,0,15,java.math.BigDecimal,"Update: schnaader's solution, translated into Java/BigDecimal terms: code."
641856,2,1,13,java.math.BigDecimal,See BigDecimal Docs for example.
7484987,2,0,6,java.math.BigDecimal,"Check this out: http://download.oracle.com/javase/1,5.0/docs/api/java/math/BigDecimal.html#divideAndRemainder%28java.math.BigDecimal%29 You just need to wrap your int or long variable in a BigDecimal object, then invoke the divideAndRemainder method on it."
696119,2,0,0,java.math.BigDecimal,"BigInteger, BigDecimal."
717994,1,0,2,java.math.BigDecimal,"To address this I could use BigDecimals to perform the calculation (convert to BigDecimal, add 1.0, then multiply), and then convert back to doubles afterwards, but I have serious concerns about the performance implications of this."
717994,1,0,2,java.math.BigDecimal,Can anyone see a way to do this that avoids using BigDecimal?
717998,2,0,3,java.math.BigDecimal,Isn't this sort of situation exactly what BigDecimal is for?
718012,2,0,0,java.math.BigDecimal,"If you really need the precision, you will have to use something like BigDecimal, even if it's slower than Double."
718575,2,0,1,java.math.BigDecimal,I suggest you test the performance of BigDecimal before you assume it won't be fast enough for you.
718575,2,0,1,java.math.BigDecimal,You can still do tens of thousands of calculations per second with BigDecimal.
720045,2,0,6,java.math.BigDecimal,"Try out the code at this link, which uses Newton's method to compute square roots for large numbers (and gets BigDecimal output) to see if it fits your needs."
720058,2,0,2,java.math.BigDecimal,You could roll your own using BigDecimal and a method like Newton-Raphson.
736752,2,1,0,java.math.BigDecimal,"So rs.getLong() was rounding down to zero, but the BigDecimal was seeing a decimal part and throwing an exception."
739532,1,0,28,java.math.BigDecimal,Logarithm of a BigDecimal.
739532,1,0,28,java.math.BigDecimal,How can I calculate the logarithm of a BigDecimal?
9125512,2,0,1,java.math.BigDecimal,"This one is super fast, because:  No toString() No BigInteger math (Newton's/Continued fraction) Not even instantiating a new BigInteger Only uses a fixed number of very fast operations  One call takes about 20 microseconds (about 50k calls per second) But:  Only works for BigInteger  Workaround for BigDecimal (not tested for speed):  Shift the decimal point until the value is > 2^53 Use toBigInteger() (uses one div internally)   This algorithm makes use of the fact that the log can be calculated as the sum of the exponent and the log of the mantissa."
755467,2,1,11,java.math.BigDecimal,"Another alternative, if you want to preserve the exact string representation (which isn't quite the same thing) is to use BigDecimal in Java."
755485,2,0,6,java.math.BigDecimal,The BigDecimal class has arbitrary precission and keeps sring representation.
755485,2,0,6,java.math.BigDecimal,To convert a string into a BigDecimal: code.
755485,2,0,6,java.math.BigDecimal,To Convert a BigDecimal into string: code.
787336,1,0,0,java.math.BigDecimal,BigDecimal: Can the Java compiler optimize away multiplications by 1?
787336,1,0,0,java.math.BigDecimal,"Does the Java compiler remove multiplications by 1, when talking about BigDecimal?"
787342,2,1,4,java.math.BigDecimal,"BigDecimal is a library class (it's not even in java.lang), so the compiler treats it as any other class."
787342,2,1,4,java.math.BigDecimal,"BigDecimal could special-case this internally, but apparently doesn't."
787342,2,1,4,java.math.BigDecimal,"I would only suggest that you change your code to use BigDecimal.valueOf(), because 1, 2, and 3 are some of the special cases which are cached internally by BigDecimal."
792237,1,0,3,java.math.BigDecimal,I am curious to know why and how this rounding mode would reduce the cumulative error as stated in javadoc BigDecimal 1.4.2.
803591,2,0,1,java.math.BigDecimal,"You might have to create an interface ""IInfinity"", and have K extends IInfinity, and IInfinity to have a method ""getInfinityValue()"", and then wrap/extend Integer, Double, BigDecimal, etc in a class that implements IInfinity ... and ugh!"
805937,1,0,0,java.math.BigDecimal,"I've also tried BigDecimal, to no avail."
806003,2,0,1,java.math.BigDecimal,"You can eliminate these unwanted digits by using java.lang.DecimalFormat, but BigDecimal is a better option, since it internally uses decimal fractions and will therefore deliver the actually correct results while offering exact control over rounding modes."
806003,2,0,1,java.math.BigDecimal,"Of course, this requires you to use BigDecimal for the calculation itself, rather than as ""voodoo ingredient"" to fix an already broken result."
806003,2,0,1,java.math.BigDecimal,Read the API documentation for BigDecimal for more information.
818313,2,1,13,java.math.BigDecimal,"If your data also consists of values with BigDecimal or Integer as classes, you have to invoke that method several times for each class type (BigDecimal.class or Integer.class in each case)."
826696,2,0,1,java.math.BigDecimal,You can use BigDecimal for more accuracy like: code.
844834,2,0,0,java.math.BigDecimal,Or you can parse into a BigDecimal (so you don't have rounding problems).
849823,2,1,80,java.math.BigDecimal,You can use the BigInteger class for integers and BigDecimal for numbers with decimal digits.
849825,2,0,8,java.math.BigDecimal,Checkout BigDecimal and BigInteger.
853377,2,0,11,java.math.BigDecimal,The one that used to always cause me issues was BigDecimal; Your choices of widgets is far more limited.
856778,2,0,0,java.math.BigDecimal,This java compiles and runs if the List is only filled with BigDecimal every thing works if the List has an integer in it we get a class cast exception on the line x.setBazList(l);  I find that very interesting.
877897,1,0,17,java.math.BigDecimal,"Is there an easier way to represent an NxM matrix of any type of Number(including potentially BigDecimal), or am I stuck?"
877970,2,0,1,java.math.BigDecimal,"If you want this then you might be better just sticking with BigDecimal for everything, but of course that will have associated performance penalties."
891023,2,1,2,java.math.BigDecimal,"Accordingly, most (perhaps all) of the value types (Character, Short, Long, Integer, BigInteger, BigDecimal, Float, Double, even String) in Java are immutable."
891031,1,0,36,java.math.BigDecimal,"I could use such a method with standard types (int, long...) and with BigInteger / BigDecimal, too."
905795,1,0,13,java.math.BigDecimal,"Java, BigDecimal."
905795,1,0,13,java.math.BigDecimal,"By the way, I'm using BigDecimal because I will be calculating monetary percentages, so I want control regarding rounding."
907090,2,0,0,java.math.BigDecimal,(or BigDecimal can be better in some cases)
905831,2,0,9,java.math.BigDecimal,"The scale of new BigDecimal(""20"") is zero because you've got no decimal point in there."
905831,2,0,9,java.math.BigDecimal,"That means that your percentage.divide(hundred, BigDecimal.ROUND_FLOOR) will produce zero (it's effectively int(20/100) or 0)."
905831,2,0,9,java.math.BigDecimal,"If you really want to do fractional stuff, use new BigDecimal(""20.00"") so the scale is set correctly, or use one of the other constructors to set the scale specifically."
911166,1,0,0,java.math.BigDecimal,Suppose I store a BigDecimal in embedded db4o.
14121994,2,0,8,java.math.BigDecimal,"I've encountered this issue today and could not use refactor to BigDecimal, because the project is really huge."
916110,2,1,62,java.math.BigDecimal,Are you sure that float/double are the appropriate types to use here instead of BigDecimal?
916110,2,1,62,java.math.BigDecimal,"money), then BigDecimal is a more appropriate type IMO."
916136,2,0,6,java.math.BigDecimal,Use a BigDecimal instead of float/double.
916136,2,0,6,java.math.BigDecimal,So you either must always round the result to a known precision or use BigDecimal.
916221,2,0,1,java.math.BigDecimal,If precision is important then you might consider refactoring your application to use Decimal or BigDecimal.
921621,1,0,15,java.math.BigDecimal,cast Long to BigDecimal.
921621,1,0,15,java.math.BigDecimal,How can I cast Long to BigDecimal?
921628,2,0,4,java.math.BigDecimal,You can create a new BigDecimal though.
921633,2,1,24,java.math.BigDecimal,You'll have to create a new BigDecimal.
921641,2,0,2,java.math.BigDecimal,You need to create a new BigDecimal object code.
7075838,2,0,6,java.math.BigDecimal,You should not use BigDecimal d = new BigDecimal(long); !!
7075838,2,0,6,java.math.BigDecimal,The implementation in BigDecimal for longs is not precise.
925232,1,0,15,java.math.BigDecimal,Why does Java BigDecimal return 1E+1?
925271,2,0,3,java.math.BigDecimal,The exact rationale for the behaviour of BigDecimal.toString() is explained in the API doc in great (and near incomprehensible) detail.
933866,1,0,0,java.math.BigDecimal,How to getScale on BigDecimal?
933866,1,0,0,java.math.BigDecimal,"I found BigDecimal have setScale method, but doesn't have getScale method."
933866,1,0,0,java.math.BigDecimal,How to getScale on BigDecimal?
933878,2,1,3,java.math.BigDecimal,You have the scale() (not getScale in this case) method in BigDecimal which returns the scale set by setScale(..).
933878,2,1,3,java.math.BigDecimal,See: http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#scale()
933879,2,0,1,java.math.BigDecimal,use BigDecimal.scale()
933882,2,0,3,java.math.BigDecimal,BigDecimal.scale():  public int scale() Returns the scale of this BigDecimal.
933882,2,0,3,java.math.BigDecimal,Returns:           the scale of this BigDecimal.
936476,2,1,1,java.math.BigDecimal,"For large values like this, you need to use java.math.BigDecimal, which allows for an arbitrarily large precision for decimal values."
936476,2,1,1,java.math.BigDecimal,Here's you're Java sample redone using BigDecimal: code.
936438,2,0,3,java.math.BigDecimal,You're getting truncation errors when you call maxVal.intValue() Take a look at BigDecimal and BigInteger to achieve the same as your ruby snippet.
936438,2,0,3,java.math.BigDecimal,"BTW: If you use groovy which sits on top of Java, then this uses BigDecimal out of the box."
960078,2,0,3,java.math.BigDecimal,"Also, there are several classes which exist that can help you achieve greater accuracy such as BigDecimal and BigInteger."
965831,1,0,12,java.math.BigDecimal,Use BigDecimal instead of Float  Thanks to everyone for the great answers.
965831,1,0,12,java.math.BigDecimal,I have changed my code to use BigDecimal instead of float.
965831,1,0,12,java.math.BigDecimal,Solution  The next code shows a function which transforms from US and EU currency to a string accepted by BigDecimal(String) constructor.
965858,2,1,31,java.math.BigDecimal,"Use a base-10 type instead, like BigDecimal, or an integer type like int or long (representing the quantum of your value - penny, for example, in US currency)."
972171,2,0,0,java.math.BigDecimal,"Regarding you problem of doubles not being big enough in JavaScript, you can allocate Java BigDecimal objects (or BigInteger objects) from within your JavaScript code."
972216,2,0,0,java.math.BigDecimal,Perhaps BigDecimal is for you if you need more than about 16 digits of precision.
1004303,1,0,1,java.math.BigDecimal,Should I map the numeric sql type to a different Java class like BigDecimal?
1051732,1,0,8,java.math.BigDecimal,What is the best approach for serializing BigDecimal/BigInteger to ProtocolBuffers.
1051732,1,0,8,java.math.BigDecimal,One data type that will be used particularly regularly is BigDecimal.
1051732,1,0,8,java.math.BigDecimal,"Our current serialization routine uses BigDecimal.toPlainString() for serialization, and new BigDecimal(String) for deserialization - I'm assuming there's a better way."
1051732,1,0,8,java.math.BigDecimal,My guess is to define a BigDecimal as: code.
1052049,2,1,5,java.math.BigDecimal,My guess is that BigDecimal would be: code.
1056722,1,0,10,java.math.BigDecimal,"People use it even though the documentation clearly states:  The results of this constructor can be somewhat unpredictable http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html#BigDecimal(double)  I've even seen a JSR-13 being APPROVED with a recommendation stating:  Existing specifications that might be deprecated: We propose deprecating the BigDecimal(double) constructor, which currently gives results that are different to the Double.toString() method."
1057910,2,0,11,java.math.BigDecimal,"Considering the behavior of BigDecimal(double) is correct, in my opinion, I'm not too sure it really would be such a problem."
1057910,2,0,11,java.math.BigDecimal,I wouldn't exactly agree with the wording of the documentation in the BigDecimal(double) constructor:  The results of this constructor can be   somewhat unpredictable.
1057910,2,0,11,java.math.BigDecimal,"One might   assume that writing new   BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to   0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal   to   0.1000000000000000055511151231257827021181583404541015625."
1057910,2,0,11,java.math.BigDecimal,"As long as one keeps in mind that floating point values cannot represent all decimal values with precision, the value returned by using BigDecimal(0.1) being 0.1000000000000000055511151231257827021181583404541015625 actually makes sense."
1057910,2,0,11,java.math.BigDecimal,"If the BigDecimal object instantiated by the BigDecimal(double) constructor is consistent, then I would argue that the result is predictable."
1057910,2,0,11,java.math.BigDecimal,"My guess as to why the BigDecimal(double) constructor is not being deprecated is because the behavior can be considered correct, and as long as one knows how floating point representations work, the behavior of the constructor is not too surprising."
1074228,1,0,12,java.math.BigDecimal,"I am aware of BigDecimal, but don't need it."
1075158,2,0,1,java.math.BigDecimal,Maybe BigDecimal get you where you want to go?
1077911,2,0,0,java.math.BigDecimal,"There's an example here: http://www.coderanch.com/t/384456/Java-General-intermediate/java/Increase-JVM-heap-size-eclipse There is a BigDecimal as well, if you need decimal numbers to be large as well."
1078953,1,0,20,java.math.BigDecimal,Check if BigDecimal is integer value.
1078953,1,0,20,java.math.BigDecimal,Can anyone recommend an efficient way of determining whether a BigDecimal is an integer value in the mathematical sense?
1078953,1,0,20,java.math.BigDecimal,"Previously I was using bd.longValueExact() which would avoid creating an object if the BigDecimal was using its compact representation internally, but obviously would fail if the value was too big to fit into a long."
12748321,2,0,15,java.math.BigDecimal,"Zero always is an integer no matter what scale it has, and stripTrailingZeros() does not alter the scale of a zero BigDecimal."
1078981,2,1,7,java.math.BigDecimal,Depending on the source/usage of your BigDecimal values it might be faster to check if the scale <= 0 first.
1078993,2,0,2,java.math.BigDecimal,In that case the BigDecimal should have no digits after the decimal point and the number should be a mathematical integer if I understand your question correctly.
1097336,2,1,38,java.math.BigDecimal,"Depending on what kind of quantity you're using though, you might want to parse to a BigDecimal instead."
10048788,2,0,0,java.math.BigDecimal,You could use BigDecimal if the string may contain decimals: code.
1180392,2,0,4,java.math.BigDecimal,Have you considered using BigDecimal instead of String to hold your numbers?
1187786,2,0,0,java.math.BigDecimal,"As you are essentially trying to figure out if a double is an int or not, you can create a BigDecimal and test its scale() method."
31486461,2,0,1,java.math.BigDecimal,"If you have the CPU power to do so, use BigDecimal as much as possible."
31486461,2,0,1,java.math.BigDecimal,"BigDecimal, on the other hand, is relatively easy to use."
31486461,2,0,1,java.math.BigDecimal,I was introduced to BigDecimal by a friend and read about it in a Murach book on Java 5.
31486461,2,0,1,java.math.BigDecimal,"I'd highly suggest the Oracle documentation: http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html Secondly, there is a difference, as you have probably observed, between floating-point error and the mathematical-numerical error introduced in an approximation to a special function."
31486461,2,0,1,java.math.BigDecimal,"Thirdly, string constructors for BigDecimal are preferable to the double constructor in many cases."
31486461,2,0,1,java.math.BigDecimal,"Fourthly, be very careful in using BigDecimal with the unlimited precision of MathContext."
1222707,1,0,2,java.math.BigDecimal,Java Math Functions for BigDecimal.
1222707,1,0,2,java.math.BigDecimal,Possible Duplicate: Java BigDecimal trigonometric methods   Are there complementary mathematical functions used in java.lang.Math that fully utilize the capabilities of BigDecimal?
1222707,1,0,2,java.math.BigDecimal,"In other words, is there a log function that takes and returns a BigDecimal similar to how there is a log function that takes and returns a double?"
1229572,2,0,9,java.math.BigDecimal,Apparently the correct answer is to user BigDecimal and retrieve the precision and scale numbers.
1229533,2,1,3,java.math.BigDecimal,I would use BigDecimal.Pass your string into it as a parameter and then use String.format to represent your newly created BigDecimal without scientific notation.
1241281,1,0,6,java.math.BigDecimal,"BigDecimal, Date)."
1262471,2,1,9,java.math.BigDecimal,"I got the following reply from a Sun Developer The general evolution policy for APIs in the JDK for feature releases like JDK 7 is  Don't break binary compatibility (as defined in JLSv3 chapter 13) Avoid introducing source incompatibilities Manage behavioral compatibility change  (For more, much more than you'd like to read on different kinds of compatibility see ""Kinds of Compatibility: Source, Binary, and Behavioral"" and ""Compatibly Evolving BigDecimal"" Adding methods to interfaces is binary compatible but source incompatible, so it is not commonly done."
1282337,2,0,2,java.math.BigDecimal,A 1000 digit number uses less than 350 bytes of memory with BigDecimal.
1298028,2,0,2,java.math.BigDecimal,BigDecimal.setScale(int) a setter that returns a BigDecimal hmmm
1316945,1,0,6,java.math.BigDecimal,Java BigDecimal remove decimal and trailing numbers.
1316945,1,0,6,java.math.BigDecimal,I'm new to Java and trying to take a BigDecimal (for example 99999999.99) and convert it to a string but without the decimal place and trailing numbers.
1316945,1,0,6,java.math.BigDecimal,but BigDecimal is not supported.
1317121,2,0,3,java.math.BigDecimal,BigDecimal without fractions is BigInteger.
1358713,1,0,0,java.math.BigDecimal,"EDIT: Apparently I should use BigDecimal, not reinvent the wheel."
4980568,2,0,3,java.math.BigDecimal,"Firstly, I disagree with everyone who says to use BigDecimal."
4980568,2,0,3,java.math.BigDecimal,"Even if your 'backing storage' is BigDecimal (which is very sensible), you should use your own class because having BigDecimal fields, method parameters, etc, conveys no semantics."
1359740,2,0,1,java.math.BigDecimal,"Encapsulating whole and fractional parts along with java.util.Currency into a class is a better design than BigDecimal, IMO."
1358901,2,0,7,java.math.BigDecimal,"...like ""0.08F"" for Ontario PST tax  If you are using these fields for currency, you should consider using BigDecimal instead."
1359817,1,0,30,java.math.BigDecimal,Using BigDecimal to work with currencies.
1359817,1,0,30,java.math.BigDecimal,"I was trying to make my own class for currencies using longs, but Apparently I should use BigDecimal (and then whenever I print it just add the $ sign before it)."
1359817,1,0,30,java.math.BigDecimal,"The api for BigDecimal is huge, and I don't know which methods to use."
1359817,1,0,30,java.math.BigDecimal,"Also, BigDecimal has better precision, but isn't that all lost if it passes through a double?"
1359817,1,0,30,java.math.BigDecimal,"if I do new BigDecimal(24.99), how will it be different than using a double?"
1359817,1,0,30,java.math.BigDecimal,Should I have the BigDecimal rounding it too?
1359817,1,0,30,java.math.BigDecimal,"new BigDecimal(""24.99"") ?"
1359817,1,0,30,java.math.BigDecimal,Here is my BigDecimal: code.
1359817,1,0,30,java.math.BigDecimal,"Whenever I want to display the price, or another BigDecimal that I got through calculations of price, I use: code."
1359875,2,0,1,java.math.BigDecimal,"2) The BigDecimal consists of an arbitrary precision integer unscaled value and a non-negative 32-bit integer scale, while the double wraps a value of the primitive type double in an object."
1359905,2,1,39,java.math.BigDecimal,Here are a few hints:  Use BigDecimal for computations if you need the precision that it offers (Money values often need this).
1359905,2,1,39,java.math.BigDecimal,"When using the NumberFormat class, use the scale() method on the BigDecimal instance to set the precision and the rounding method."
1359905,2,1,39,java.math.BigDecimal,"PS: In case you were wondering, BigDecimal is always better than double, when you have to represent money values in Java."
1359905,2,1,39,java.math.BigDecimal,"PPS: Creating BigDecimal instances This is fairly simple since BigDecimal provides constructors to take in primitive values, and String objects."
1359905,2,1,39,java.math.BigDecimal,Displaying BigDecimal instances You could use the setMinimumFractionDigits and setMaximumFractionDigits method calls to restrict the amount of data being displayed.
1359907,2,0,0,java.math.BigDecimal,"Use BigDecimal.setScale(2, BigDecimal.ROUND_HALF_UP) when you want to round up to the 2 decimal points for cents."
1359907,2,0,0,java.math.BigDecimal,Use a String when you construct BigDecimal for money value.
1361739,2,0,0,java.math.BigDecimal,"See in particular the Money class, which is meant to make monetary calculations simpler than using BigDecimal directly."
2449313,2,0,21,java.math.BigDecimal,Coming to the usage: You would represent all monies using Money object as opposed to BigDecimal.
1361212,2,0,3,java.math.BigDecimal,"And then you'll have to figure out what the rules are for all combinations of ""non-standard"" Number implementations, including BigDecimal, BigInteger, AtomicDouble, AtomicLong, everything in org.apache.commons.lang.mutable, and any random implementation that somebody might decide to write next Tuesday."
1361212,2,0,3,java.math.BigDecimal,"It's not clear what the right thing to do is in most of these cases -- converting everything to BigDecimal, for instance, is not an option if one of the arguments is Apache Commons' Fraction.ONE_THIRD; and besides, doing the conversion in a general way presents the same problems as doing the addition in a general way."
1360105,2,0,0,java.math.BigDecimal,"Everything can be turned into a BigDecimal, why not use it?"
1360105,2,0,0,java.math.BigDecimal,The only problem with this is that you may lose precision in some rare cases where someone IS passing in a BigDecimal and it is larger than a Double.maxValue code.
1360105,2,0,0,java.math.BigDecimal,"A BigDecimal is a Number, so returning one is of no consequence."
1365328,1,0,1,java.math.BigDecimal,"So anyway, I'm using BigDecimals to represent currency in my application (it deducts a markdown percentage and adds sales tax), but it seems that If I use a BigDecimal for the price, everything needs to be BigDecimals."
1365328,1,0,1,java.math.BigDecimal,"Is it OK to use a BigDecimal for the markdown percentage field (instead of a float), and also for the PST and GST constants (sales tax, 0.08 & 0.05)?"
1378044,1,0,8,java.math.BigDecimal,How using BigDecimal would affect application performance?
1378044,1,0,8,java.math.BigDecimal,I want to use BigDecimal to represent arbitrary precision numbers like prices and amounts in a low-latency trading application with thousands of orders and execution reports per second.
1378044,1,0,8,java.math.BigDecimal,"I won't be doing many math operations on them, so the question is not about performance of the BigDecimal per se, but rather about how large volumes of BigDecimal objects would affect performance of the application."
1378044,1,0,8,java.math.BigDecimal,My concern is that huge amount of short-lived BigDecimal objects will put a strain on a GC and result in larger Stop-The-World pauses in CMS collector - and this is definitely what I would like to avoid.
1378044,1,0,8,java.math.BigDecimal,I am now convinced that using BigDecimal will hurt latency of my application (even though I still plan to measure it).
1378054,2,0,7,java.math.BigDecimal,"That's going to be worth a lot more than any 'theoretical' answers that you may get :-) Looking at your particular problem domain, similar systems I've worked on in the past work very well using doubles for the data you want to use BigDecimal for, and it may be worth re-examining your thinking in this area."
1378054,2,0,7,java.math.BigDecimal,"A cursory glance at BigDecimal shows it has 5 or 6 fields, and the extra memory consumption over a single double may outweigh any functionality benefits you have."
1378113,2,0,5,java.math.BigDecimal,"BigDecimal does have performance very much lower than, say, long, double or even Long."
1378406,2,0,1,java.math.BigDecimal,"And even if you think you can afford accuracy hit with double type, it may be worth trying first with BigDecimal and checking if it's really to slow for you."
1378156,2,1,9,java.math.BigDecimal,"If you are developing a low-latency trading program and you genuinely want to compete in latency terms, then BigDecimal is not for you, it is as simple as that."
1378156,2,1,9,java.math.BigDecimal,"I would argue that for almost everyone else, using BigDecimal is a no-brainer because it will have little visible impact on application performance."
1378453,2,0,2,java.math.BigDecimal,Perhaps you can separate these two parts of your app and use BigDecimal only in the transaction part.
1384919,1,0,26,java.math.BigDecimal,Are there libraries for Square Root over BigDecimal?
1384919,1,0,26,java.math.BigDecimal,Are there any libraries for Square Root over BigDecimal in Java?
5756021,2,1,11,java.math.BigDecimal,JScience v4.3.1 has a Real class which seems to be the equivalent of BigDecimal and that might help you.
1386371,2,0,1,java.math.BigDecimal,"(This is may not be a solution for you) As long as your BigDecimal is in the range of double, you can convert the BigDecimal to double, use Math.sqrt() and promote the double back to BigDecimal."
1407953,2,0,0,java.math.BigDecimal,"Either use BigDecimal, which alleviates a lot of the problem, or use integers."
1410873,1,0,1,java.math.BigDecimal,"But i could use BigDecimal, and when i looked up BigDecimal and double i found this."
1411157,1,0,13,java.math.BigDecimal,"edit: until this gets resolved, I'll use new BigDecimal(cell.getNumericCellValue()).toString()"
1442726,2,0,1,java.math.BigDecimal,With new BigDecimal(cell.getNumericCellValue()).toString() you will still have a lot of problems.
7818704,2,0,2,java.math.BigDecimal,where variable gss is of BigDecimal type.
1419109,1,0,2,java.math.BigDecimal,ResultSetMetaData returning BigDecimal insted of int.
1419109,1,0,2,java.math.BigDecimal,ResultSetMetaData.getColumnClassName() is returning java.math.BigDecimal while I am expecting it to be Integer or int or long or Long type.
1419109,1,0,2,java.math.BigDecimal,but still ResultSetMetaData is returning BigDecimal for ID column.
1419109,1,0,2,java.math.BigDecimal,or is ResultsetMetaData always returns BigDecimal for Oracle.
1419176,2,0,4,java.math.BigDecimal,I think Oracle numbers will always map to BigDecimal as Oracle does not store them as a binary int so this is an exact mapping.
1423408,1,0,1,java.math.BigDecimal,"I want to use BigInteger and BigDecimal same way, as i would use any other numbers."
1424849,2,0,4,java.math.BigDecimal,"If you are getting your input as String to begin with, why do you need to convert it to BigDecimal and back?"
1424863,2,0,2,java.math.BigDecimal,"However, if you are going to go down the BigDecimal/DecimalFormat route, you might want to consider sharing your DecimalFormats instead of creating a new one with every iteration."
1451457,2,0,10,java.math.BigDecimal,"If you really want exact decimal values, you should use BigDecimal."
1481788,2,0,10,java.math.BigDecimal,Use a BigDecimal instead of a double.
1481794,2,0,5,java.math.BigDecimal,"If you want arbitrary precision, you'll have to use BigDecimal."
1502255,2,0,26,java.math.BigDecimal,"If you really need to check for absolute equality, that usually indicates that you should be using a different numeric format in the first place - for instance, for financial data you should probably be using BigDecimal."
1521182,2,0,5,java.math.BigDecimal,"In addition to the formatter, you might consider using the java.math.BigDecimal class to represent numbers precisely."
1521182,2,0,5,java.math.BigDecimal,"Calculations where complete accuracy is required, such as financial calculations, are best performed with BigDecimal."
1531377,1,0,1,java.math.BigDecimal,Analog of StringBuilder for BigDecimal.
1531377,1,0,1,java.math.BigDecimal,Is there something similar for BigDecimal?
1531377,1,0,1,java.math.BigDecimal,Is optimization of BigDecimal creation worth putting effort to it?
1531414,2,0,7,java.math.BigDecimal,"I'm not an expert for BigDecimal performance, but copying of char[] which is done during String concatenation is a much bigger overhead, that's for sure."
1546647,2,0,5,java.math.BigDecimal,"%f works for Float, Double and BigDecimal values."
1576293,2,1,3,java.math.BigDecimal,Whenever precision matters use java.math.BigDecimal.
1576110,2,0,2,java.math.BigDecimal,Use BigDecimal instead.
1585519,2,1,17,java.math.BigDecimal,"Instead, I'm using an integer number of cents everywhere and converting to BigDecimal for display purposes."
14687705,2,0,17,java.math.BigDecimal,With BigDecimal: code.
1591347,1,0,1,java.math.BigDecimal,"BigDecimal evaluated as a string in Velocity, Struts2."
1591347,1,0,1,java.math.BigDecimal,${item.qty} is a BigDecimal but it seems like its passed to Velocity as a String maybe.
1984615,2,0,1,java.math.BigDecimal,A native 'decimal' type for Java replacing the BigDecimal class would be nice.
1605803,2,1,1,java.math.BigDecimal,Here is an example for handling BigDecimal (where equals() doesn't work at all): code.
1605910,1,0,3,java.math.BigDecimal,Should I use BigDecimal?
1605910,1,0,3,java.math.BigDecimal,"BTW, will using BigDecimal effect the performance of the application??"
1605930,2,0,3,java.math.BigDecimal,"Note that choosing BigDecimal over double (or vice versa) has pros/cons, and will depend on your requirements."
1605930,2,0,3,java.math.BigDecimal,"If decimal values need to   be represented exactly, high-precision   computation is needed, or fine control   of rounding is desired, only   BigDecimal has the needed   capabilities."
1605931,2,1,10,java.math.BigDecimal,"You should use BigDecimal - but use the String constructor, e.g."
1605931,2,1,10,java.math.BigDecimal,"If you pass a double to BigDecimal, Java must create that double first - and since doubles cannot represent most decimal fractions accurately, it does create the value as 10364055.81000000052154064178466796875 and then passes it to the BigDecimal constructor."
1605931,2,1,10,java.math.BigDecimal,In this case BigDecimal has no way of knowing that you actually meant the rounder version.
1605931,2,1,10,java.math.BigDecimal,"Generally speaking, using non-String constructors of BigDecimal should be considered a warning that you're not getting the full benefit of the class."
1605931,2,1,10,java.math.BigDecimal,"BigDecimal is a good choice when you need to represent decimal values exactly (money handling being the obvious choice, you don't want 5.99 * one million to be 5990016.45 for example."
1650579,2,0,5,java.math.BigDecimal,"For that, you will need to   use the java.math.BigDecimal   class instead."
1650579,2,0,5,java.math.BigDecimal,Numbers and   Strings covers BigDecimal and   other useful classes provided by the   Java platform.
1661313,2,1,27,java.math.BigDecimal,"If you need exact decimal values, you should use java.math.BigDecimal."
1661624,2,0,10,java.math.BigDecimal,"As Jon Skeet says, if you need exact decimal fractions, use BigDecimal."
1684675,1,0,4,java.math.BigDecimal,I therefore have replaced all the numbers (other than short-lived ints) with these objects which are based on BigDecimal.
1691994,2,0,4,java.math.BigDecimal,"BigDecimal is the best when it comes to maintaining accurate floating point calculations, and being able to specify the desired accuracy."
1691994,2,0,4,java.math.BigDecimal,"I believe float (and to some extent double) offer performance benefits over BigDecimal, but at the cost of accuracy and usability."
1692014,2,1,24,java.math.BigDecimal,"BigDecimal    (When I say "">"", I mean ""greater in absolute value"", of course.)"
1692014,2,1,24,java.math.BigDecimal,Note that BigDecimal is somewhat misnamed; your values do not have to be large at all to need it.
1692364,2,0,4,java.math.BigDecimal,"float: don't use it byte: most often used as byte[] to represent some raw binary data int: this is your best friend; use it to represent most stuff long: use this for timestamps and database IDs BigDecimal and BigInteger: if you know about these, chances are you know what you're doing already, so you don't need my advice  I realize that these aren't terribly scientific rules of thumb, but if your target audience are not computer scientists, it might be best to stick to basics."
1713877,2,0,0,java.math.BigDecimal,At first glance you would not expect this to be a problem since the contracts should not change but it is - I had a problem in that a new constructor that takes IIRC an integer was added to BigDecimal (in 1.5) and so at compile time the call to that constructor was specified however at runtime that constructor did not exist and so a runtime exception.
1742438,2,0,2,java.math.BigDecimal,No signal is sent for the case oldValue.equals(newValue) or oldValue.compareTo(newValue) == 0 (the latter for dates and BigDecimal).
1750156,2,0,4,java.math.BigDecimal,Use BigDecimal.
1750196,2,1,12,java.math.BigDecimal,"On the java side, you need to use BigDecimal, not float or double, and on the SQL side you need to use Decimal(19,4) (or Decimal(19,3) if it helps jump to your precision level)."
1750196,2,1,12,java.math.BigDecimal,"In the specific example you give, you need to first get the 4 decimal precision number and put it in a BigDecimal or Decimal(19,4) as the case may be, and then further round it to 2 decimal precision."
1768123,2,1,1,java.math.BigDecimal,"You're not dealing with money, so double should be enough, but if it isn't, then perhaps BigDecimal is more suitable."
1771092,2,1,16,java.math.BigDecimal,"List<?> means ""List of anything"", so two objects with this type are not the same: One could be a list of String, the other a list of BigDecimal."
4430627,2,0,5,java.math.BigDecimal,How about BigDecimal.valueOf(doubleToFormat).toPlainString()
29797422,2,0,0,java.math.BigDecimal,You can do this simply by using class java.math.BigDecimal.
29797422,2,0,0,java.math.BigDecimal,In following example we are using BigDecimal.valueOf() to convert the Double value to BigDecimal and than .toPlainString() to convert it into plain decimal string.
13743193,2,0,0,java.math.BigDecimal,"For ex if a country uses decimal seperation as "","" , then the formatted value will be in 0,00 ( ex.. 1.2e2 will be 120.00 in some places and 120,00 ) in some places due to i18n issue as said here..  the method that i prefer is `(new BigDecimal(""1.2e2"").toPlainString() )"
1826398,2,0,1,java.math.BigDecimal,BTW: see here for what BigDecimal constructor will parse: http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#BigDecimal%28java.lang.String%29
1846900,1,0,66,java.math.BigDecimal,Addition for BigDecimal.
1846900,1,0,66,java.math.BigDecimal,I want to do some simple sums with some currency values expressed in BigDecimal type.
1846900,1,0,66,java.math.BigDecimal,"Obviously I do not understand well the BigDecimal arithmetics, see output behind."
1846918,2,1,116,java.math.BigDecimal,The BigDecimal is immutable so you need to do this: code.
1846921,2,0,20,java.math.BigDecimal,It looks like from the Java docs here that add returns a new BigDecimal: code.
1846924,2,0,9,java.math.BigDecimal,See also: BigDecimal#add(java.math.BigDecimal)
1849334,1,0,3,java.math.BigDecimal,"Assuming that I can't get at the string the user typed, but only have access to the double the value has been stored in, is there a way I can scrub that double though a BigDecimal or somesuch to get the ""real"" number of decimal places?"
1849351,2,1,14,java.math.BigDecimal,"If at all possible, change the parsing code and use BigDecimal throughout."
1849352,2,0,3,java.math.BigDecimal,"Notice the damage is done in the conversion of the string to a double, not when the double is passed into the BigDecimal."
1849352,2,0,3,java.math.BigDecimal,"Feeding the double to the BigDecimal just provides an easy way to see what's actually in the double, because toString is lying to you."
1849352,2,0,3,java.math.BigDecimal,"So you don't need to involve the BigDecimal, really, you can just do something like code."
1863305,2,0,2,java.math.BigDecimal,Then do the following:  Create a BigDecimal with the given double in the constructor.
1863305,2,0,2,java.math.BigDecimal,Get BigDecimal.toString() and find three or more consecutive '0' or '9' digits.
9055379,2,0,0,java.math.BigDecimal,Convert to BigDecimal.
9055379,2,0,0,java.math.BigDecimal,BigDecimal.scale() = number of places
1859751,1,0,0,java.math.BigDecimal,BigDecimal assign operator.
1859761,2,1,2,java.math.BigDecimal,"Note that although that's just making both variables refer to the same object, it's safe because BigDecimal itself is immutable."
1859768,2,0,0,java.math.BigDecimal,"Assuming this is Java ans newCounterValue is an integer type or a box thereof, dropStartValue = new BigDecimal(newCounterValue); should do what you want."
1868233,1,0,2,java.math.BigDecimal,"Could I use that custom XML Adapter, or use a BigDecimal (or other type) object to represent the cost?"
1887856,2,0,10,java.math.BigDecimal,Use BigDecimal instead.
1898358,2,0,0,java.math.BigDecimal,"Use the BigDecimal class, that's what it's for."
1909761,2,0,2,java.math.BigDecimal,A way to see what the double is fairly exactly is to convert it to BigDecimal.
21414135,2,0,2,java.math.BigDecimal,"Use the BigDecimal type, and you'll represent it exactly!"
1930492,2,0,10,java.math.BigDecimal,"Apart from using the better approaches already suggested, you can use BigDecimal to make your calculations."
1938858,2,1,18,java.math.BigDecimal,"If at any point you need bigger numbers, you can try  java.math.BigInteger (if integer), or java.math.BigDecimal (if decimal)"
1953246,2,0,5,java.math.BigDecimal,"Since you say you are new to Java, I would have to suggest you use BigInteger and BigDecimal unless you want to write your own arbitrarily large number handlers."
1953246,2,0,5,java.math.BigDecimal,BigInteger and BigDecimal are fast enough for most uses of them.
1972863,1,0,1,java.math.BigDecimal,The trade-off that comes with using BigDecimal instead of double in Java.
1972863,1,0,1,java.math.BigDecimal,I've read in a question here that BigDecimal is 1000 times slower than double?
1972863,1,0,1,java.math.BigDecimal,"But I'm wondering, do you guys only use BigDecimal when dealing with money?"
1973763,2,0,0,java.math.BigDecimal,People don't just use BigDecimal / BigInteger for money.
1973763,2,0,0,java.math.BigDecimal,"Of course, using BigDecimal and BigInteger comes at the cost of much slower arithmetical operations."
1973027,2,0,0,java.math.BigDecimal,In the past I've used a custom Money class which merely wraps a BigDecimal instance - it has worked well and has no issues.
1973061,2,1,3,java.math.BigDecimal,"The precision of BigDecimal would be meaningless in this application, performance impact aside."
1973061,2,1,3,java.math.BigDecimal,Reserve BigDecimal primarily for financial applications.
1976865,2,0,5,java.math.BigDecimal,"It's implemented using BigDecimal, and is overloaded to allow specifying a rounding method, so you can use it to truncate, like this: code."
1976872,2,0,0,java.math.BigDecimal,One of the BigDecimal solutions should be considered first.
1977163,2,0,2,java.math.BigDecimal,here is a short implementation which is many times faster than using BigDecimal or Math.pow code.
1976816,2,0,5,java.math.BigDecimal,"For most numbers, you won't be able to get an exact representation of xxx.yyyy unless you use a decimal class with guaranteed accuracy, such as BigDecimal."
1976819,2,1,24,java.math.BigDecimal,Try setScale of BigDecimal like so: code.
2000489,1,0,3,java.math.BigDecimal,"What I want to do is to simply change a, b, c to BigDecimal in junkChild without rewriting DoSomething() again."
2001224,2,0,2,java.math.BigDecimal,"BigDecimal and BigInteger both extend Number, but the add() method is not part of that interface, so it doesn't help."
2000527,2,0,1,java.math.BigDecimal,"since Number (the closest ancestor of both classes doesn't have the add method), you can convert your BigInteger to BigDecimal first: code."
2002834,2,0,7,java.math.BigDecimal,"If you can't handle tiny errors, you should use BigDecimal instead."
2003349,2,0,5,java.math.BigDecimal,Use PrecisionEvaluate() in ColdFusion (it'll use BigDecimal in Java) code.
2002852,2,0,2,java.math.BigDecimal,"See: http://docs.sun.com/source/806-3568/ncg_goldberg.html If you want arbitrary precision in Java, use BigDecimal: code."
2002873,2,0,1,java.math.BigDecimal,These are floating point issues and using BigDecimal will fix it.
2021980,2,0,2,java.math.BigDecimal,"The Informix JDBC data type mapping documentation says the following:  java.math.BigDecimal            MONEY(p,s)1  Thus, you need to use java.math.BigDecimal instead of java.lang.String to represent the value, PreparedStatement#setBigDecimal() to set the value and ResultSet#getBigDecimal() to get the value."
2021980,2,0,2,java.math.BigDecimal,"You can ""convert"" from String to BigDecimal by just passing it as constructor argument."
2021980,2,0,2,java.math.BigDecimal,The other way round can be done by calling the toString() method of BigDecimal.
2033178,2,0,1,java.math.BigDecimal,If you need to control how rounding is done you should check BigDecimal ist has several rounding modes.
2033178,2,0,1,java.math.BigDecimal,http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html
2043614,1,0,3,java.math.BigDecimal,I'd assume fixed type for cells - either a java.math.BigDecimal or a String.
2045893,2,1,5,java.math.BigDecimal,"Have you tried queryForObject(sql, BigDecimal.class, params)?"
2074149,1,0,1,java.math.BigDecimal,In this class the value field is a BigDecimal and the iso4217code is a String.
2074149,1,0,1,java.math.BigDecimal,"For what its worth the stackTrace finally dies in the BigDecimal hashCode() method, but I wouldn't believe the BigDecimal hashCode() method would be broken."
2076046,2,1,2,java.math.BigDecimal,"Thus, you basically want to convert a localized String representation supposedly in a numerical format into a Number/BigDecimal and vice versa?"
2085555,2,1,12,java.math.BigDecimal,"String, BigDecimal, BigInteger and some other standard classes are immutable (immutable means once instantiated its state can never change)."
2104290,2,0,1,java.math.BigDecimal,... as explained in the BigDecimal javadocs.
2106615,1,0,10,java.math.BigDecimal,round BigDecimal to nearest 5 cents.
16665378,2,0,14,java.math.BigDecimal,Using BigDecimal without any doubles (improved on the answer from marcolopes): code.
16665378,2,0,14,java.math.BigDecimal,"For your examples, you actually want RoundingMode.UP (bd is a helper which just returns new BigDecimal(input)): code."
2109860,1,0,10,java.math.BigDecimal,The Number class (ancestor of BigDecimal) would be a nice place.
2109911,2,1,6,java.math.BigDecimal,Feel free to subclass BigDecimal and add that method.
6496273,2,0,1,java.math.BigDecimal,"Unfortunately, no built-in Java methods such as Class.cast() will do this for String to BigDecimal or String to Integer or any other conversion where there is no supporting class hierarchy."
6496273,2,0,1,java.math.BigDecimal,"So the solution is simple reflection looking for public Members of either: STRING_CLASS_ARRAY = (new Class[] {String.class}); a) Member member = targetClass.getMethod(method.getName(),STRING_CLASS_ARRAY); b) Member member = targetClass.getConstructor(STRING_CLASS_ARRAY); You will find that all of the primitives (Integer, Long, etc) and all of the basics (BigInteger, BigDecimal, etc) and even java.regex.Pattern are all covered via this approach."
6496273,2,0,1,java.math.BigDecimal,"In this approach, if there is no method or when the method is invoked an exception is thrown (because it is an illegal value such as a non-numeric input to a BigDecimal or illegal RegEx for a Pattern), that provides the checking specific to the target class inherent logic."
2173512,1,0,5,java.math.BigDecimal,Java BigDecimal trigonometric methods.
2173512,1,0,5,java.math.BigDecimal,"Now I fell over the Java class BigDecimal and thought: hey, why not thinking about precision here."
2173530,2,0,4,java.math.BigDecimal,BigDecimal does not provide these methods because BigDecimal models a rational number.
2173530,2,0,4,java.math.BigDecimal,These can be approximated with an arbitrary-precision number but the exact value can't be stored in a BigDecimal.
2173622,2,1,6,java.math.BigDecimal,"ApFloat is a library which contains arbitrary-precision approximations of trigometric functions and non-integer powers both; however, it uses its own internal representations, rather than BigDecimal and BigInteger."
6665190,2,0,1,java.math.BigDecimal,You can always convert the BigDecimal value to other values like double and integer if you need to use the common java.lang.Math methods.
2174005,2,0,6,java.math.BigDecimal,"If you need accuracy in your decimals, you should be using BigDecimal"
2178190,2,0,1,java.math.BigDecimal,(See BigInteger or BigDecimal for good examples.
2177992,2,0,3,java.math.BigDecimal,"And actually, this would be consistent with the way classes like BigDecimal or BigInteger are designed."
2199654,2,0,0,java.math.BigDecimal,Do you perhaps mean a BigDecimal ?
2209631,2,0,2,java.math.BigDecimal,"Given the popularity of Java, I don't think BigDecimal issue hasn't been already addressed."
2209426,2,0,1,java.math.BigDecimal,For Java BigDecimal is reported to work well.
2232480,1,0,1,java.math.BigDecimal,"The Java BigDecimal vs The Financial Mans - ""The 1 cent problem""."
2286304,2,0,0,java.math.BigDecimal,"Note: If you 15 is the CD price, then you should consider using BigDecimal instead of int, double or whatever you are using."
2286304,2,0,0,java.math.BigDecimal,If it was something else then change the BigDecimal for and int/double and its corresponding parameter name.
2290230,2,0,0,java.math.BigDecimal,"Why not constructing a random BigInteger, then building a BigDecimal from it ?"
2290230,2,0,0,java.math.BigDecimal,"There is a constructor in BigDecimal : public BigDecimal(BigInteger unscaledVal, int scale) that seems relevant here, no ?"
2290230,2,0,0,java.math.BigDecimal,"Give it a random BigInteger and a random scale int, and you'll have a random BigDecimal."
2296112,2,1,1,java.math.BigDecimal,For the case of BigInteger and BigDecimal you can just cast that (and all numeric primitive wrapper classes as well) to Number and get the longValue() (be careful when overflowing the range of long 'though).
2296110,1,0,5,java.math.BigDecimal,Determine Number of Decimal Place using BigDecimal.
2296110,1,0,5,java.math.BigDecimal,"May I know how can I implement getNumberOfDecimalPlace, by using BigDecimal?"
2296352,2,0,3,java.math.BigDecimal,If you really get doubles i recommend formating them first as strings before creating the BigDecimal.
2296352,2,0,3,java.math.BigDecimal,When you have a BigDecimal you can simply call scale() to get the number of decimal places.
2296126,2,0,0,java.math.BigDecimal,How about having a look at the javadoc of BigDecimal.
2296138,2,0,0,java.math.BigDecimal,The best way to get a BigDecimal with a specified number of decimal places is by using the setscale method over it.
2296138,2,0,0,java.math.BigDecimal,"Personally I like to also use the rounding version of the method (see the link below): http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#setScale(int,%20int) If you're wanting to get the number of decimal positions that a BigDecimal is currently set at call the associated scale() method."
4592016,2,1,13,java.math.BigDecimal,"The other replies are correct, you have to use BigDecimal all the way through for this rather than double/float."
2296291,2,0,3,java.math.BigDecimal,"If you use BigDecimal exclusively, your code will work as expected."
2299922,1,0,2,java.math.BigDecimal,CodResponsability is BigDecimal.
2316222,2,0,2,java.math.BigDecimal,"no BigDecimal, no file support, etc."
2334428,1,0,0,java.math.BigDecimal,Hibernate casts BigDecimal instead of Integer.
2334428,1,0,0,java.math.BigDecimal,I don't know why but hibernate tries to cast BigDecimal to one of my columns.
2334428,1,0,0,java.math.BigDecimal,So there can't be a BigDecimal.
2353442,2,0,2,java.math.BigDecimal,How the BigDecimal Class Helps Java Get its arithmetic right.
2353537,2,1,4,java.math.BigDecimal,"But for calculations involving exact numbers, such as monetary calculations, you must use a type such as BigDecimal to hold the values."
2353537,2,1,4,java.math.BigDecimal,"With BigDecimal, when a number is specified as its String representation, it is that number - it does not suffer the ""almost as good"" problem doubles do."
2353537,2,1,4,java.math.BigDecimal,"I am updating this answer to include some notes from the double constructor of BigDecimal, found at this address."
2353537,2,1,4,java.math.BigDecimal,"One might   assume that writing new   BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to   0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal   to   0.1000000000000000055511151231257827021181583404541015625."
2353537,2,1,4,java.math.BigDecimal,"The String constructor, on the other   hand, is perfectly predictable:   writing new BigDecimal(""0.1"") creates   a BigDecimal which is exactly equal to   0.1, as one would expect."
2353537,2,1,4,java.math.BigDecimal,"When a double must be used as a source   for a BigDecimal, note that this   constructor provides an exact   conversion; it does not give the same   result as converting the double to a   String using the   Double.toString(double) method and   then using the BigDecimal(String)   constructor."
2355298,2,1,8,java.math.BigDecimal,"As per the JPA spec:  The persistent ﬁelds or properties of   an entity maybe of the following types:   Java primitive types;  java.lang.String;   other Java serializable types   (including wrappers of the primitive   types,  java.math.BigInteger,   java.math.BigDecimal, java.util.Date,    java.util.Calendar[7], java.sql.Date,   java.sql.Time, java.sql.Timestamp,    user-deﬁned serializable types, byte[],   Byte[], char[], andCharacter[]);   enums; entity  types and/or   collections of entity types; and   embeddable classes (see section   2.1.5)."
2362184,2,0,0,java.math.BigDecimal,Use int or long (appropriately scaled and with explicit checks for overflow) or BigDecimal.
2362004,2,0,4,java.math.BigDecimal,"For currency, especially when you don't want any rounding, you should use the BigDecimal class."
12875116,2,0,1,java.math.BigDecimal,"If you want work on currencies, you have to use BigDecimal class."
12875116,2,0,1,java.math.BigDecimal,There's an nice article how to cooperate with BigDecimal and currencies: http://www.javaworld.com/javaworld/jw-06-2001/jw-0601-cents.html
2390122,2,1,2,java.math.BigDecimal,As mentioned by others you have to use java.math.BigDecimal instead of float/double.
2390122,2,1,2,java.math.BigDecimal,For instance when you call BigDecimal(double) the value you pass in will be expanded to its full representation:  code.
2390122,2,1,2,java.math.BigDecimal,But when you use the BigDecimal(String) constructor the eact value is represented and you get  code.
2390122,2,1,2,java.math.BigDecimal,You can read more on BigDecimal's limitations in Joshua Bloch and Neal Gafter's splendid Java puzzlers book and in this informative article.
2390122,2,1,2,java.math.BigDecimal,Finally note that toString on BigDecimal's will print in scientific notation so you will properly have to use toPlainString instead.
2389475,2,0,2,java.math.BigDecimal,"For arbitrary precision arithmetic, you will need to use java.math.BigDecimal instead."
2406207,1,0,2,java.math.BigDecimal,Regarding BigDecimal.
2406207,1,0,2,java.math.BigDecimal,"When i do a System.out.println(new BigDecimal(test)) I get the below value 58.14999999999999857891452847979962825775146484375   I am able to understand ""test"" double variable value is internally stored as  58.1499999."
2406236,2,0,5,java.math.BigDecimal,"To construct a BigDecimal from a hard-coded constant, you must always use one of constants in the class (ZERO, ONE, or TEN) or one of the string constructors."
2406243,2,0,3,java.math.BigDecimal,"Also, when using BigDecimal, don't use the double constructor, because that would attempt to precisely represent an imprecise value."
2406245,2,0,1,java.math.BigDecimal,"BigDecimal uses more precision by default, as described in the javadoc, and when you call toString() it outputs all of the characters up to the precision level available to a primitive double since .15 does not have an exact binary representation."
2417357,2,0,16,java.math.BigDecimal,"Take a look at BigDecimal  Immutable, arbitrary-precision signed decimal numbers  And to answer your question - yes, you can crate data types, but they can't be primitive types (like int, double, etc)."
2417357,2,0,16,java.math.BigDecimal,"They have to be classes, just like the case with BigDecimal (and BigInteger) And a further advice for using the Big* classes - as written, they are immutable."
2417364,2,0,2,java.math.BigDecimal,Sounds like you might be after the BigDecimal class: http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html
2417378,2,0,8,java.math.BigDecimal,"But as others have said, BigDecimal (and BigInteger) should be your starting points for numeric types with more precision."
2417385,2,0,1,java.math.BigDecimal,BigInteger and BigDecimal is what you're looking for.
2418093,2,0,6,java.math.BigDecimal,Moreover nothing prevents you from adding BigDecimal to myList.
2490534,2,0,1,java.math.BigDecimal,You can use the scale functionality of BigDecimal: code.
2495456,1,0,1,java.math.BigDecimal,How to use BigDecimal in swing GUIs?
2495456,1,0,1,java.math.BigDecimal,I'm using BigDecimal to represent product prices in a Java SE application.
2495456,1,0,1,java.math.BigDecimal,What swing component(s) should I use in order to allow the user to input numbers with only two decimal places and bound it to a BigDecimal variable/Object's property.
2495512,2,0,1,java.math.BigDecimal,"I'm not quite sure what you are trying to do, but there is a BigDecimal constructor which takes Strings as parameter (similar to e.g."
2495512,2,0,1,java.math.BigDecimal,See JavaDoc for BigDecimal for more information.
2501176,1,0,9,java.math.BigDecimal,Java BigDecimal memory usage?
2501176,1,0,9,java.math.BigDecimal,Is there a guideline for estimating the amount of memory consumed by a BigDecimal?
2501294,2,0,3,java.math.BigDecimal,If you dig into the internals of BigDecimal you'll see that it uses a compact representation if the significand is <= Long.MAX_VALUE.
2501339,2,1,9,java.math.BigDecimal,If you look at the fields in the source for BigDecimal there is: code.
2501339,2,1,9,java.math.BigDecimal,""", so assuming that you don't call toString we will leave that as zero bytes, so in total there are (8+4+4)=16 bytes + BigInteger in BigDecimal and 4+4+4+4+4=20 bytes + mag for BigInteger."
2505422,1,0,1,java.math.BigDecimal,"I have the following questions in mind  weight can be expressed in kilograms and grams and height in meters and centimeters, so should I capture them as a BigDecimal with an appropriate precision and scale or capture them as vanilla strings and do the manipulation in the user interface."
2511270,1,0,1,java.math.BigDecimal,Recently I asked which was the best Swing component to bind to a BigDecimal variable (with some particular editing properties).
2511270,1,0,1,java.math.BigDecimal,"Component description: I want to extend JTextField or JFormattedTextField, so my new component can be easily bound to a BigDecimal variable."
2511270,1,0,1,java.math.BigDecimal,Invoking a getValue() method on the component should yield the BigDecimal representing the number just entered.
2529526,1,0,1,java.math.BigDecimal,"BigDecimal, division & MathContext - very strange behaviour."
2529577,2,0,0,java.math.BigDecimal,"Reading the Javadoc for the divide(BigDecimal, MathContext) method, it seems that only the rounding mode of the context is taken into account."
2529653,2,1,7,java.math.BigDecimal,"Javadoc for the first situation:  Returns a BigDecimal whose value is (this / divisor),    and whose scale is as specified."
2529653,2,1,7,java.math.BigDecimal,"and the Javadoc for the second situation:  Returns a BigDecimal whose value is (this / divisor),    with rounding according to the context settings."
2529653,2,1,7,java.math.BigDecimal,"referring to the javadoc for MathContext we get:  Immutable objects which encapsulate   the context  settings which describe   certain rules for numerical operators,   such as those implemented by the   BigDecimal class."
6432832,2,0,1,java.math.BigDecimal,"Java probably could, these days, actually use JIT compiling to optimize the call better and inline it at runtime, but even then very few library calls support BigInteger/BigDecimal so there would be a LOT of native support, it would be a completely new language."
28479647,2,0,0,java.math.BigDecimal,It converts a BigDecimal value to Joda LocalDateTime.
28479647,2,0,0,java.math.BigDecimal,BigDecimal is better than float and double since it is able to hold a precise value.
2603167,1,0,2,java.math.BigDecimal,Java: What is the right way to convert String into a valid amount of money(BigDecimal).
2603167,1,0,2,java.math.BigDecimal,"I have to convert an incoming String field into a BigDecimal field that would represent a valid amount of money, for example: code."
2603238,2,1,7,java.math.BigDecimal,How about the BigDecimal(String) constructor?
2603258,2,0,0,java.math.BigDecimal,Use new BigDecimal(strValue).
2603258,2,0,0,java.math.BigDecimal,Will save you enormous pain and suffering resulting from The Evil BigDecimal Constructor
2622948,1,0,3,java.math.BigDecimal,Avoid the problem with BigDecimal when migrating to Java 1.4 to Java 1.5+.
2622948,1,0,3,java.math.BigDecimal,"Unfortunately, I encountered a problem with the BigDecimal storage in a Oracle database."
2622948,1,0,3,java.math.BigDecimal,"To summarize, when I try to store a ""7.65E+7"" BigDecimal value (76,500,000.00) in the database, Oracle stores in reality the value of 7,650,000.00."
2622948,1,0,3,java.math.BigDecimal,This defect is due to the rewritting of the BigDecimal class in Java 1.5 (see here).
2622948,1,0,3,java.math.BigDecimal,"In my code, the BigDecimal was created from a double using this kind of code: code."
2622948,1,0,3,java.math.BigDecimal,"If I change the previous code to avoid the use of the String constructor of BigDecimal, then I do not encounter the bug in my uses cases: code."
2622948,1,0,3,java.math.BigDecimal,"However, how can I be sure that this solution is the correct way to handle the use of BigDecimal?"
2622948,1,0,3,java.math.BigDecimal,So my question is to know how I have to manage my BigDecimal values to avoid this issue:  Do not use the new BigDecimal(String) constructor and use directly the new BigDecimal(double)?
2622948,1,0,3,java.math.BigDecimal,Force Oracle to use toPlainString() instead of toString() method when dealing with BigDecimal (and in this case how to do that)?
2623031,2,0,2,java.math.BigDecimal,I'm also not entirely sure of the merits of passing a double into the cosntructor of BigDecimal -- a double is inherently inaccurate unless the number is composed entirely of additions of powers of 2 (with range restrictions).
2623031,2,0,2,java.math.BigDecimal,The whole point of BigDecimal is to circumvent these restrictions on double.
2623338,2,1,3,java.math.BigDecimal,Just make a custom UserType and use it to map BigDecimal object to database column.
2634230,2,0,3,java.math.BigDecimal,"Scanner is a much more advanced alternative for the legacy StringTokenizer; it can parse int, double, boolean, BigDecimal, regex patterns, etc, from anything Readable, with constructor overloads that also take a File, InputStream, String, etc."
2683237,2,0,2,java.math.BigDecimal,"Edit: As stated in the comments, you will (always) have to check for BigDecimal and friends."
2683356,2,0,0,java.math.BigDecimal,If you presume that BigInteger's or BigDecimal's or mix of floats and doubles can be passed then you cannot create one common method to compare all these types of parameters.
2683388,2,1,15,java.math.BigDecimal,"It's still not great, though, since it counts on toString returning a value parsable by BigDecimal (which the standard Java Number classes do, but which the Number contract doesn't demand)."
2691114,2,0,5,java.math.BigDecimal,"If this is the case, the correct way to handle a fixed-precision decimal number is to use a BigDecimal."
2694336,2,0,1,java.math.BigDecimal,"Somewhat related to this, but not an answer to the question: try switching to BigDecimal instead of doubles and floats."
2694336,2,0,1,java.math.BigDecimal,I was having a lot of issue with comparisons on those types and now I'm good to go with BigDecimal.
2697638,1,0,16,java.math.BigDecimal,Scala and Java BigDecimal.
2697638,1,0,16,java.math.BigDecimal,"As you can see, without BigDecimal operator overloading, simple formulas get complicated real quick."
6253097,2,0,2,java.math.BigDecimal,"Clojure has, IMO, some of the simplest syntax for BigDecimal math (note the trailing Ms -- that indicates BigDecimal): code."
2698031,2,0,12,java.math.BigDecimal,"As per Joachim's answer, writing val x = BigDecimal(1.1) is equivalent to writing code."
2697666,2,1,27,java.math.BigDecimal,"I don't know Scala, but in Java new BigDecimal(1.1) initializes the BigDecimal with a double value and thus it is not exactly equal to 1.1."
2697666,2,1,27,java.math.BigDecimal,"In Java you have to use new BigDecimal(""1.1"") instead."
2699804,2,0,4,java.math.BigDecimal,The core of BigDecimal is the same in each language.
2699804,2,0,4,java.math.BigDecimal,"If the limiting factors for performance are the mathematical operations in BigDecimal, then there will be no difference between the three languages, because they all use java.math.BigDecimal."
2699748,2,0,1,java.math.BigDecimal,"If the major core of your code is a lot of BigDecimal math, Java is just not the right language IMO."
30110482,2,0,3,java.math.BigDecimal,Now I do not know the performance impact this will cause but I assume it will be less than using BigDecimal.
2730200,1,0,3,java.math.BigDecimal,How to index BigDecimal values in Lucene 3.0.1.
2730200,1,0,3,java.math.BigDecimal,I have some BigDecimal values which should be indexed for searching.
2731834,2,1,1,java.math.BigDecimal,Steven Rowe provides interesting ideas in this post: http://www.lucidimagination.com/search/document/ad648772f8825a28/bigdecimal_values#2502f96055839c3d He says that his scheme could probably be used to represent all BigDecimal values.
2749375,1,0,24,java.math.BigDecimal,ArithmeticException thrown during BigDecimal.divide.
2749375,1,0,24,java.math.BigDecimal,I thought java.math.BigDecimal is supposed to be The Answer™ to the need of performing infinite precision arithmetic with decimal numbers.
2749375,1,0,24,java.math.BigDecimal,"I thought BigDecimal is the solution when we need exact arithmetic, e.g."
11231812,2,0,2,java.math.BigDecimal,"To divide save, you have to set the MATHcontext,  BigDecimal bd = new BigDecimal(12.12, MathContext.DECIMAL32).divide(new BigDecimal(2)).setScale(2, RoundingMode.HALF_UP);"
2749548,2,0,4,java.math.BigDecimal,"I often heard   BigDecimal being advocated over double  In financial reports we use alwasy BigDecimal with scale = 2 and ROUND_HALF_UP, since all printed values in a report must be lead to a reproducable result."
2750829,2,0,7,java.math.BigDecimal,The class is BigDecimal not BigFractional.
2750829,2,0,7,java.math.BigDecimal,BigDecimal eliminates the later but there is still the former for division.
2749636,2,1,16,java.math.BigDecimal,The BigDecimal javadoc says this:  The BigDecimal class gives its user complete control over rounding behavior.
2749636,2,1,16,java.math.BigDecimal,"In other words, it is your responsibility to tell BigDecimal what to do about rounding."
2749636,2,1,16,java.math.BigDecimal,How does BigDecimal detect infinite recurring decimal?
2749636,2,1,16,java.math.BigDecimal,I suppose that BigDecimal could have been specified to represent a recurring decimal exactly.
2749636,2,1,16,java.math.BigDecimal,"However, this would make the implementation a lot more complicated, it would make all operations more expensive, and would make it impossible for applications to put a bound on the space used by BigDecimal objects resulting from complex calculations; e.g."
2749636,2,1,16,java.math.BigDecimal,The bottom line is that this extra complexity and runtime cost would be inappropriate for typical use-cases for BigDecimal.
2750677,2,0,2,java.math.BigDecimal,You should prefer BigDecimal for finance calculations.
2790144,1,0,64,java.math.BigDecimal,"An analogous situation would be with the Java classes Integer, Double, BigDecimal etc."
2790144,1,0,64,java.math.BigDecimal,"(Sometimes I make a HashMap mapping Integer.class to an instance of IntegerStuff, BigDecimal.class to an instance of BigDecimalStuff etc."
2798849,2,0,1,java.math.BigDecimal,"You can use arbitrary precision numbers, such as BigDecimal - it's slower but as precise as you specify."
2808648,2,1,253,java.math.BigDecimal,"Of course, if you prefer, you can inline the above into a one-liner: new BigDecimal(value).setScale(places, RoundingMode.HALF_UP).doubleValue() And in every case Always remember that floating point representations using float and double are inexact."
2808648,2,1,253,java.math.BigDecimal,"For exactness, you want to use BigDecimal."
25645952,2,0,7,java.math.BigDecimal,This is because BigDecimal converts the exact binary form of the double!!!
13055184,2,0,7,java.math.BigDecimal,"If you really want the same double, but rounded in the way you want you can use BigDecimal, for example code."
2836798,2,0,4,java.math.BigDecimal,"Not the prettiest solution ever, but if you rely in the following properties of every known implementation of Number (in the JDK):  They can all be created from their String representation via a one-argument constructor None of them has numbers that can't be represented by BigDecimal  You can implement it using reflection and using Generics to avoid having to cast the result: code."
2834536,2,0,5,java.math.BigDecimal,"BigDecimal, for instance, can't be autounboxed."
2860017,2,0,0,java.math.BigDecimal,Try using java.math.BigDecimal to round: code.
2863388,1,0,26,java.math.BigDecimal,What is the equivalent of the Java BigDecimal class in C#?
2863388,1,0,26,java.math.BigDecimal,BigDecimal is a class in the java.math package that has a lot of benefits for handling big numbers of a certain scale.
6165882,2,0,3,java.math.BigDecimal,"For example, it has a square root function, which BigDecimal doesn't have: code."
2863586,2,0,3,java.math.BigDecimal,"Well, apart from using third-party libraries with support of the BigDecimal (if they exist), there are no easy workarounds."
2865026,1,0,7,java.math.BigDecimal,"My question: I am using InternPool for BigDecimal but should I consider also using it for String instead of String's intern() method, which I believe uses PermGen space?"
2880842,1,0,2,java.math.BigDecimal,BigDecimal rounding question.
2880866,2,0,1,java.math.BigDecimal,"You get to specify the rounding settings by passing in a MathContext to the BigDecimal constructor; however, the rounding mode used in an object of that class has to be a RoundingMode enum constant (and none of those implement the kind of rounding you want)."
2896019,2,0,6,java.math.BigDecimal,"If you are interested in fixed precision numbers, you should be using a fixed precision type like BigDecimal, not an inherently approximate (though high precision) type like float."
2916961,2,1,2,java.math.BigDecimal,"http://java.sun.com/javaee/5/docs/api/javax/persistence/Column.html#precision%28%29 So it would appear hibernate is right to ignore it, as your column type isn't a BigDecimal etc, and just make a column that holds a 32-bit integer."
2920124,2,0,2,java.math.BigDecimal,You can't cast a BigDecimal directly to String.
2937997,2,0,0,java.math.BigDecimal,"If I am correct about the above, then you don't need to use BigDecimal, double will suffice."
2937838,2,0,3,java.math.BigDecimal,Check out the BigDecimal class instead.
2937846,2,0,1,java.math.BigDecimal,"For maximum flexibility, use BigDecimal for rolling, and BigInteger for totalQuantity."
2937846,2,0,1,java.math.BigDecimal,"After dividing (note, you have it backwards; it should be rolling / totalQuantity), you can either return a BigDecimal, or use doubleValue at a loss of precision."
2944381,2,0,2,java.math.BigDecimal,You'll have to convert your values to String or BigDecimal to make meaningful tests about their decimal places.
2950561,2,0,4,java.math.BigDecimal,"if you need exact precision without rounding errors, you should use a BigDecimal."
2950569,2,0,1,java.math.BigDecimal,"For decimal, I believe you risk losing precision if you don't use a BigDecimal on the Java side, as some decimal fractions can't be stored as a binary fraction."
2950576,2,1,5,java.math.BigDecimal,"Since it's a DECIMAL field, you should prefer java.math.BigDecimal."
2950587,2,0,1,java.math.BigDecimal,"Question1: It's bad idea to map DECIMAL columns to Double, usually the BigDecimal is the correct type."
2956659,1,0,5,java.math.BigDecimal,Should we use double or BigDecimal for calculations in Java?
2956659,1,0,5,java.math.BigDecimal,How much is the overhead in terms of performance for BigDecimal as compared to double?
2956693,2,0,4,java.math.BigDecimal,"If you are absolutely sure that you really do need arbitrary precision arithmetic (most applications don't), then you can consider BigDecimal."
2956693,2,0,4,java.math.BigDecimal,You will find that double will significantly outperform BigDecimal (not to mention being easier to work with) for any application where double is sufficient precision.
2956693,2,0,4,java.math.BigDecimal,"This is one of the areas where you actually should consider using BigDecimal, otherwise you may get unexpected rounding effects from double calculations."
2956705,2,0,1,java.math.BigDecimal,"If you need the precision (even for ""small"" numbers, when representing amounts for example) go with BigDecimal."
2956726,2,0,1,java.math.BigDecimal,How much is the overhead in terms of performance for BigDecimal as compared to double?
2956763,2,1,1,java.math.BigDecimal,For a serious financial application BigDecimal is a must.
2957188,2,1,4,java.math.BigDecimal,"I.e. use a Long property for a BIGINT field, a BigDecimal property for a DECIMAL field, etcetera."
2967522,2,1,1,java.math.BigDecimal,correctAnswer and/or totalQues should be float/  double ( BigDecimal to be pedantic).
2972027,2,0,0,java.math.BigDecimal,If you really need to work with a fixed number of digits after the decimal point consider using BigDecimal.
2972158,2,1,4,java.math.BigDecimal,"That double value will actually be rounded to something like 10.123399999999999999976 Instead, use BigDecimal all the way, or forget about runding while you read and manipulate the data, and round it only when you print the result."
2993129,1,0,7,java.math.BigDecimal,long or BigDecimal) in EL?
2995269,2,1,9,java.math.BigDecimal,"A BigDecimal method changed its behavior between 1.4 and 5.0, causing JDBC drivers to malfunction."
3011102,2,1,5,java.math.BigDecimal,"At the   time of writing, a blank string also   cannot be set on a BigDecimal or   BigInteger."
3052772,1,0,5,java.math.BigDecimal,I converted BigInteger to BigDecimal like this: code.
3052843,2,0,4,java.math.BigDecimal,"Both BigInteger and BigDecimal extend java.lang.Number, however this does not mean that you can cast from BigInteger up to Number then down to BigDecimal."
3052843,2,0,4,java.math.BigDecimal,"There is a constructor in BigDecimal that takes a BigInteger, so try: code."
3075743,1,0,17,java.math.BigDecimal,"In Java, how can I efficiently convert floats like 1234.56 and similar BigDecimals into Strings like $1,234.56 I'm looking for the following: String 12345.67 becomes String $12,345.67 I'm also looking to do this with Float and BigDecimal as well."
3115413,1,0,9,java.math.BigDecimal,java Biginteger BigDecimal.
3115413,1,0,9,java.math.BigDecimal,Is there any way to convert a BigInteger into a BigDecimal?
3115413,1,0,9,java.math.BigDecimal,"I know you can go from a BigDecimal to a BigInteger, but I can't find a method to go the other way around in Java."
3115428,2,0,21,java.math.BigDecimal,BigDecimal(BigInteger val)
3115719,2,0,5,java.math.BigDecimal,"public BigDecimal(BigInteger unscaledVal, int scale) Translates a BigInteger unscaled value and an int scale into a BigDecimal."
3115719,2,0,5,java.math.BigDecimal,The value of the BigDecimal is (unscaledVal/10scale).
3115719,2,0,5,java.math.BigDecimal,Parameters: unscaledVal - unscaled value of the BigDecimal.
3115719,2,0,5,java.math.BigDecimal,scale - scale of the BigDecimal.
3132288,2,0,0,java.math.BigDecimal,http://leepoint.net/notes-java/data/numbers/10biginteger.html If you need decimal values use BigDecimal
3153108,2,0,14,java.math.BigDecimal,"If you are working with money, use the BigDecimal class so that you can use the round-off rules required by your accounting system."
3168655,2,0,0,java.math.BigDecimal,This is done using BigDecimal code.
3168697,2,0,0,java.math.BigDecimal,"BigDecimal, although very clumsy to work with, gives some formatting options: code."
3180099,1,0,1,java.math.BigDecimal,"When I do a query on a single Decimal column (i.e., SELECT amount AS v FROM Customer) I get a BigDecimal through the JDBC driver, but when I do an an operation of Decimal columns (i.e., SELECT amount + tax AS v FROM Customer) I get a Double even all columns involved in the operation are Decimal."
3188778,2,0,3,java.math.BigDecimal,Two pieces of advice:   Try BigDecimal if that's the case Use gamma function instead of naive implementation.
8795367,2,0,1,java.math.BigDecimal,"I would say it is good practice to use this for all Number derived types (Integer, Long, BigDecimal, etc."
3204701,1,0,2,java.math.BigDecimal,I also want to avoid rounding so indirect conversion via a BigDecimal is not suitable.
15111857,2,0,2,java.math.BigDecimal,"I know its an old topic, but.... To compare two Numbers in Java you can use the compareTo method from BigDecimal."
15111857,2,0,2,java.math.BigDecimal,"BigDecimal can hold everything from short until double or BigInteger, so its the perfect class for this."
3214633,2,0,0,java.math.BigDecimal,This post suggests using a BigDecimal instead of a double to maintain precision: http://stackoverflow.com/questions/322749/retain-precision-with-doubles-in-java So perhaps try doing something like the following and see if you have better results.
3225345,2,0,3,java.math.BigDecimal,"The persistent fields or properties of an entity may be of the following types: Java primitive types; java.lang.String; other Java serializable types (including wrappers of the primitive types, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, user-defined serializable types, byte[], Byte[], char[], and Character[]); enums; entity types and/or collections of entity types; and embeddable classes (see section 2.1.5)."
3227392,2,0,2,java.math.BigDecimal,You could use java.math.BigDecimal and its method divideAndRemainder().
3247777,2,1,9,java.math.BigDecimal,"I find it odd that there isn't a method which does this automatically and throws an exception, but I can't see one... You may also want to set the parser to produce a BigDecimal instead of a double, if you're dealing with values which are more logically decimal in nature."
3273378,2,0,103,java.math.BigDecimal,"Date, Time, Timestamp, BigDecimal, InputStream (Blob) and Reader (Clob)."
3284431,2,0,3,java.math.BigDecimal,"The Basic annotation can be applied to   a persistent property or instance   variable of any of the following   types: Java primitive types, wrappers   of the primitive types,   java.lang.String,   java.math.BigInteger,   java.math.BigDecimal,   java.util.Date,   java.util.Calendar, java.sql.Date, java.sql.Time,   java.sql.Timestamp, byte[],   Byte[], char[], Character[],   enums, and any other type that   implements Serializable."
3290328,2,0,2,java.math.BigDecimal,"So, for example, a could be a Map<String, Integer> and b could be a Map<BigDecimal, Integer>."
3291647,1,0,5,java.math.BigDecimal,How to always display a BigDecimal object in full decimal format instead of scientific notation?
3291647,1,0,5,java.math.BigDecimal,"I have a BigDecimal object, myNumber, with unknown length."
19486067,2,0,1,java.math.BigDecimal,BigDecimal.toString or toPlainString would help.
3291791,2,0,1,java.math.BigDecimal,I think that BigDecimal.toPlainString() is the method you need.
3291810,2,0,0,java.math.BigDecimal,"You can use BigDecimal.toPlainString() to return ""a string representation of this BigDecimal without an exponent field""."
3291810,2,0,0,java.math.BigDecimal,The scientific notation on the other hand is returned by BigDecimal.toEngineeringString().
3303503,1,0,4,java.math.BigDecimal,Scale() of Divide method in BigDecimal.
3303503,1,0,4,java.math.BigDecimal,"But according to the API, the divide method:  Returns a BigDecimal whose value is   (this / divisor), and whose preferred   scale is (this.scale() -   divisor.scale());  So in this case, 37146555.53880000's scale is 8, and 1000000's scale is 0."
3303543,2,0,0,java.math.BigDecimal,"To be absolutely sure, I would use BigDecimal.divide(BigDecimal, int, int)."
3303579,2,1,2,java.math.BigDecimal,"EDIT: small adition - you can force the division to a certain scale by using the overloaded divide methods:  divide(BigDecimal, RoundingMode) that will give a BigDecimal with scale of this and value rounded using the specified rounding method if the result would actually need more decimals to be exact."
3303579,2,1,2,java.math.BigDecimal,"dividedivide(BigDecimal, scale, RoundingMode) that will give a BigDecimal with specified scale, and value rounded by specified method if needed."
3323807,1,0,8,java.math.BigDecimal,String in Java has interning capabilities; I want to intern classes like BigDecimal and Account.
3323877,2,0,5,java.math.BigDecimal,But BigDecimal certainly does.
11424598,2,0,3,java.math.BigDecimal,"The behavior of floats and doubles wrecks havoc with decimal computations requiring exact decimal accuracy, such as financial calculations and is why, unless a high-precision approximation is acceptable, one should use scaled integers and longs, or classes such as BigInteger and BigDecimal, for computations requiring exact decimal accuracy, rounding and precision."
3334247,2,0,8,java.math.BigDecimal,You could use BigDecimal.scale() if you pass the number as a String like this: code.
3334247,2,0,8,java.math.BigDecimal,Using BigDecimal might have the advantage that it checks if the string is actually a number; using the string method you have to do it yourself.
3351207,2,0,0,java.math.BigDecimal,"Don't use floating-point where exact results are required; instead, use an integral type or BigDecimal."
3351207,2,0,0,java.math.BigDecimal,"If exact result is desired, then go ahead and use BigDecimal; it'll be slower since it's not a primitive, but unless profiling shows that it's not acceptable, this is often the best option."
3359319,2,1,11,java.math.BigDecimal,You should use BigDecimal: code.
3384514,2,1,4,java.math.BigDecimal,One mistake of the Java API is that BigInteger and BigDecimal are not final which means you need to perform a defensive copy of these objects when receiving them from non trusted code.
3395825,1,0,26,java.math.BigDecimal,How to print formatted BigDecimal values?
3395825,1,0,26,java.math.BigDecimal,I have a BigDecimal field amount which represents money.
3395825,1,0,26,java.math.BigDecimal,(The only simple solution which I see myself is getting floatValue from BigDecimal and then using NumberFormat to make 2 digits presision for the fraction part).
3409606,1,0,4,java.math.BigDecimal,On the backend I'm storing money values in a Money class which wraps a BigDecimal and sets rounding to be always Half Even with scale 8.
3413448,1,0,70,java.math.BigDecimal,Double vs. BigDecimal?
3413448,1,0,70,java.math.BigDecimal,I have to calculate some floating point variables and my colleague suggest me to use BigDecimal instead of double since it will be more precise.
3413448,1,0,70,java.math.BigDecimal,But I want to know what it is and how to make most out of BigDecimal?
31486748,2,0,1,java.math.BigDecimal,BigDecimal is Oracle's arbitrary-precision in-house numerical library.
31486748,2,0,1,java.math.BigDecimal,BigDecimal is part of the Java language and is useful for a variety of applications ranging from the financial to the scientific (that's where sort of am).
31486748,2,0,1,java.math.BigDecimal,"BigDecimal, on the other hand, includes many options for calculating expressions to arbitrary precision."
31486748,2,0,1,java.math.BigDecimal,"The add, multiply, and divide methods as described in the Oracle documentation below ""take the place"" of +, *, and / in BigDecimal Java World: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html The compareTo method is especially useful in while and for loops."
31486748,2,0,1,java.math.BigDecimal,"Be careful, however, in your use of constructors for BigDecimal."
31486748,2,0,1,java.math.BigDecimal,"For instance, the code BigDecimal onethird = new BigDecimal(""0.33333333333""); utilizes a string representation of 1/3 to represent that infinitely-repeating number to a specified degree of accuracy."
29622364,2,0,2,java.math.BigDecimal,"There are two main differences from double:  Arbitrary precision, similarly to BigInteger they can contain number of arbitrary precision and size Base 10 instead of Base 2, a BigDecimal is n*10^scale where n is an arbitrary large signed integer and scale can be thought of as the number of digits to move the decimal point left or right  The reason you should use BigDecimal for monetary calculations is not that it can represent any number, but that it can represent all numbers that can be represented in decimal notion and that include virtually all numbers in the monetary world (you never transfer 1/3 $ to someone)."
3413493,2,1,109,java.math.BigDecimal,A BigDecimal is an exact way of representing numbers.
3413493,2,1,109,java.math.BigDecimal,With BigDecimal this would not happen.
3413493,2,1,109,java.math.BigDecimal,"The disadvantage of BigDecimal is that it's slower, and it's a bit more difficult to program algorithms that way (due to + - * and / not being overloaded)."
3413493,2,1,109,java.math.BigDecimal,"If you are dealing with money, or precision is a must, use BigDecimal."
3413493,2,1,109,java.math.BigDecimal,I do recommend reading the javadoc of BigDecimal as they do explain things better than I do here :)
3413902,2,0,2,java.math.BigDecimal,"DecimalFormat is the way to go - get the appropriate DecimalFormat for the user's locale, and call setParseBigDecimal(true) so that it parses to BigDecimal rather than double."
3440913,2,1,6,java.math.BigDecimal,"You must use a double if you require floating point, or use BigDecimal if you need arbitrary precision."
3441072,2,0,1,java.math.BigDecimal,"The BigDecimal(double) constructor is exact, so it's a handy way to see the representation: code."
3440856,2,0,1,java.math.BigDecimal,"If decimal places are of interest to you, I would strongly recommend using BigDecimal instead."
3440875,2,0,0,java.math.BigDecimal,"If you want to avoid rounding, use BigDecimal."
3487685,2,1,1,java.math.BigDecimal,"2.1.1 Persistent Fields and Properties The persistent fields or properties of   an entity may be of the following   types: Java primitive types;   java.lang.String; other Java   serializable types (including   wrappers of the primitive types,   java.math.BigInteger,   java.math.BigDecimal,   java.util.Date,   java.util.Calendar,   java.sql.Date, java.sql.Time,   java.sql.Timestamp, user-defined   serializable types, byte[],   Byte[], char[], and Character[]; enums; entity   types and/or collections of entity types; and embeddable classes (see section 2.1.5)."
3504673,2,1,8,java.math.BigDecimal,"As others have already said: the driver maps everything to BigDecimal, even if it's defined as NUMBER(38) (which could be mapped to BigInteger) But it's pretty easy to find out what the driver maps."
3504537,2,0,1,java.math.BigDecimal,"It's been a while, but I believe it's BIGINT in Java.It's BigDecimal."
3504597,2,0,2,java.math.BigDecimal,According to the Oracle documentation it is java.math.BigDecimal.
3504597,2,0,2,java.math.BigDecimal,"""but my cast to BigDecimal throws a   ClassCastException""  Have you tried using oracle.sql.NUMBER ?"
3504897,2,0,0,java.math.BigDecimal,But if your BigDecimal works then even I want to know what is the return type :)
3514132,2,0,0,java.math.BigDecimal,The class type of the object that hibernateTemplate.execute() returns is indeed BigDecimal.
3507614,2,0,14,java.math.BigDecimal,"This would work for all subclasses of Number like Long, Double, Biginteger or BigDecimal."
3507208,2,0,2,java.math.BigDecimal,"If you need to convert it, then you can use every parser from Integer.parseInt(String) to BigDecimal(String) If you just need to check that the content can be seen as a numeric then you can get away with regular expressions."
20159376,2,0,0,java.math.BigDecimal,")+"")) ){    ...   }   //---All numeric types including BigDecimal extend Number"
3570287,2,1,0,java.math.BigDecimal,"The Basic annotation can be applied to   a persistent property or instance   variable of any of the following   types: Java primitive types, wrappers   of the primitive types,   java.lang.String,   java.math.BigInteger,   java.math.BigDecimal, java.util.Date,   java.util.Calendar, java.sql.Date,   java.sql.Time, java.sql.Timestamp,   byte[], Byte[], char[], Character[],   enums, and any other type that   implements Serializable."
3574441,2,0,26,java.math.BigDecimal,SUM returns Long when applied to state-fields of integral types (other   than BigInteger); Double when applied   to state-fields of floating point   types; BigInteger when applied to   state-fields of type BigInteger; and   BigDecimal when applied to   state-fields of type BigDecimal.
3579779,1,0,16,java.math.BigDecimal,How to do a fractional power on BigDecimal in Java?
3579779,1,0,16,java.math.BigDecimal,"I came across a few solutions:  Use double - but the numbers are too big Use BigDecimal.pow but no support for fractional Use the X^(A+B)=X^A*X^B formula (B is the remainder of the second num), but again no support for big X or big A because I still convert to double Use some kind of Taylor series algorithm or something like that - I'm not very good at math so this one is my last option if I don't find any solutions (some libraries or a formula for (A+B)^(C+D))."
3590314,2,1,19,java.math.BigDecimal,"in double looks like this: 9.332621544394415E157), there is no problem to use BigDecimal.doubleValue()."
3590314,2,1,19,java.math.BigDecimal,"SO: use the formula X^(A+B)=X^A*X^B to separate the calculation to TWO powers, the big, using BigDecimal.pow, and the small (remainder of the 2nd argument), using Math.pow, then multiply."
3590314,2,1,19,java.math.BigDecimal,"X will be copied to DOUBLE - make sure it's not bigger than MAX_VALUE, A will be INT (maximum 2147483647 but the BigDecimal.pow doesn't support integers more than a billion anyway), and B will be double, always less than 1."
11081431,2,0,1,java.math.BigDecimal,"BigDecimal a = new BigDecimal(""12345.0789"");  a = a.divide(new BigDecimal(""1""), 2, BigDecimal.ROUND_HALF_UP);  //Also check other rounding modes  System.out.println(""a >> ""+a.toPlainString()); //Returns 12345.08"
3608552,2,0,1,java.math.BigDecimal,"Also, why are you taking a BigDecimal (an arbitrary-precision signed decimal number) and then taking its float value to do division?"
3608552,2,0,1,java.math.BigDecimal,This defeats the purpose of using a BigDecimal and reverts back to floating point math which may lead to unexpected results.
3608552,2,0,1,java.math.BigDecimal,You should divide BigDecimal instances with the BigDecimal.divide(BigDecimal) method (or one of it's overloads).
3631349,1,0,5,java.math.BigDecimal,Am I incorrectly mapping column USER_RV in table User to class Integer instead of BigDecimal or some other integer type?
3739047,2,1,33,java.math.BigDecimal,"The Basic annotation can be applied   to a persistent property or instance   variable of any of the following   types: Java primitive, types, wrappers   of the primitive types,   java.lang.String,   java.math.BigInteger,   java.math.BigDecimal,   java.util.Date,   java.util.Calendar, java.sql.Date,   java.sql.Time, java.sql.Timestamp,   byte[], Byte[], char[], Character[], enums, and any other   type that implements Serializable."
3684079,1,0,51,java.math.BigDecimal,"There is too many preconditions to test, and the constructor BigDecimal() is always checking them all, so this seem the simplest method."
3686604,2,0,1,java.math.BigDecimal,There is no reference to the created BigDecimal.
3693014,1,0,1,java.math.BigDecimal,BigDecimal from Double incorrect value?
3693014,1,0,1,java.math.BigDecimal,I am trying to make a BigDecimal from a string.
3693023,2,1,7,java.math.BigDecimal,"You can create a BigDecimal from a string without the intermediate double, as in code."
3708211,2,1,6,java.math.BigDecimal,"To elaborate, say we will cache those stock prices in a ConcurrentHashMap<String, BigDecimal> where the string represents the stock symbol, ""GOOG"", ""ORCL"", ""MSFT"" etc, and the BigDecimal represents the price/quote of the stock."
3725386,1,0,2,java.math.BigDecimal,BigDecimal and BigInteger ?
3740418,2,0,0,java.math.BigDecimal,BigDecimal junks up the source code too much.
31486986,2,0,0,java.math.BigDecimal,BigDecimal in Java is native to the Java language.
31486986,2,0,0,java.math.BigDecimal,"However, I tend to lean towards either BigDecimal in Java or decimal in C#."
31486986,2,0,0,java.math.BigDecimal,"For me, I like BigDecimal because of the methods it supports."
31486986,2,0,0,java.math.BigDecimal,"I do scientific calculations of interest to me in my spare time, and BigDecimal seems to work very well because I can set the precision of my floating point numbers."
31486986,2,0,0,java.math.BigDecimal,The disadvantage to BigDecimal?
3730249,2,0,146,java.math.BigDecimal,"The right way to solve this problem is   to use BigDecimal, int or long   for monetary calculations."
25251702,2,0,6,java.math.BigDecimal,"Look at below example of BigDecimal and double primitive which is used to represent money value, its quite clear that floating point calculation may not be exact and one should use BigDecimal for financial calculations."
25251702,2,0,6,java.math.BigDecimal,Output: difference between 2.0 and 1.1 using double is: 0.8999999999999999 difference between 2.0 and 1.1 using BigDecimal is: 0.9
3730040,2,1,348,java.math.BigDecimal,"Among others, Java  has the BigDecimal class, and C# has the decimal type."
3730060,2,0,22,java.math.BigDecimal,If you create a BigDecimal and pass a float into the constructor you see what the float actually equals: code.
3730060,2,0,22,java.math.BigDecimal,"Since accountants like things to come out exactly to the penny, and customers will be annoyed if they pay their bill and after the payment is processed they owe .01 and they get charged a fee or can't close their account, it's better to use exact types like decimal (in C#) or java.math.BigDecimal in Java."
15790782,2,0,9,java.math.BigDecimal,"Certainly, when adding and subtracting non-fractional monetary amounts there will be no loss of precision when using integer classes or BigDecimal classes."
13092862,2,0,10,java.math.BigDecimal,"It must be said that even if you use fixed point arithmetic you still have to round numbers, were it not for the fact that BigInteger and BigDecimal give errors if you obtain periodic decimal numbers."
13092862,2,0,10,java.math.BigDecimal,It shows that after rounding double give the same result as BigDecimal up to precision 16. code.
3736867,2,0,0,java.math.BigDecimal,You could switch to using the BigDecimal class which has much better handling for overflow/underflow than the int/long primitives in Java.
3746379,2,0,1,java.math.BigDecimal,Perhaps converting via BigDecimal would work?
3752578,1,0,46,java.math.BigDecimal,Safe String to BigDecimal conversion.
3752578,1,0,46,java.math.BigDecimal,I'm trying to read some BigDecimal values from the string.
3752578,1,0,46,java.math.BigDecimal,"Let's say I have this String: ""1,000,000,000.999999999999999"" and I want to get a BigDecimal out of it."
3752616,2,1,41,java.math.BigDecimal,"With this setter, parse will return a BigDecimal for you."
31655835,2,0,0,java.math.BigDecimal,"The Java platform libraries contain many immutable classes, including String, the boxed primitive classes, and BigInte- ger and BigDecimal."
3772266,2,0,2,java.math.BigDecimal,Then do the math with BigDecimal.
3772750,1,0,9,java.math.BigDecimal,BigDecimal to SQL NUMBER: check for value larger than precision.
3772750,1,0,9,java.math.BigDecimal,"In my app, I handle numbers as BigDecimal and store them as NUMBER(15,5)."
3772750,1,0,9,java.math.BigDecimal,"Now I'd need to properly check on Java if the BigDecimal values would fit the column, so that I can generate proper error messages without executing the SQL, catching exceptions and verifying the vendor error code."
3772750,1,0,9,java.math.BigDecimal,"Such rounding is unacceptable because the application is financial, and any rounding/truncation must be explicit (through BigDecimal methods)."
5007298,2,0,3,java.math.BigDecimal,Since 0.000010 and 0.00001 are equal (with BigDecimal.compareTo) shouldn't they both return the same result?
3779519,1,0,3,java.math.BigDecimal,"Then I read somewhere that the standard mapping for NUMBER is BigDecimal (-> ""General Error""), I tried BigInteger instead (-> ""No data found"")."
19922501,2,0,3,java.math.BigDecimal,"Here's a good implementation, using BigDecimal: code."
3820617,2,0,1,java.math.BigDecimal,You may want to look at the BigDecimal class as it provides a round(MathContext mc) method that allows you to specify different rounding modes such as HALF_DOWN.
3820642,2,0,2,java.math.BigDecimal,"I suggest you use BigDecimal instead of float, as that's a more natural representation where decimal digits make sense."
3829063,2,0,29,java.math.BigDecimal,"From the javadocs, the string constructor is generally the preferred way to convert a float into a BigDecimal, as it doesn't suffer from the unpredictability of the BigDecimal(double) constructor."
3829063,2,0,29,java.math.BigDecimal,"This is generally the preferred way to convert a float or double into a BigDecimal, as it doesn't suffer from the unpredictability of the BigDecimal(double) constructor."
3829075,2,0,1,java.math.BigDecimal,"Converting from float to BigDecimal, in other words: casting?"
3829075,2,0,1,java.math.BigDecimal,But you can create an instance of BigDecimal that represents the same fractional value like the float value: code.
17348697,2,0,3,java.math.BigDecimal,"Quote from documentations:  Note: This is generally the preferred way to convert a double (or   float) into a BigDecimal, as the value returned is equal to that   resulting from constructing a BigDecimal from the result of using   Double.toString(double)."
17348697,2,0,3,java.math.BigDecimal,Reference: BigDecimal (Java Platform SE 6)
3832592,1,0,11,java.math.BigDecimal,"For values that must be precise, such as monetary values, consider using a fixed-precision type such as BigDecimal."
3843440,1,0,38,java.math.BigDecimal,BigDecimal setScale and round.
3851004,2,0,4,java.math.BigDecimal,I've done that recently (based on lambdaj code) beware it will need all your elements to be the same type (you can't really add a Byte and a BigDecimal) and can throw a CCE if it isn't the case and won't handle custom Number: code.
3858855,2,0,1,java.math.BigDecimal,(Obviously you could use BigDecimal or whatever rather than Double depending on your needs.)
3866514,1,0,23,java.math.BigDecimal,"Why BigDecimal(""5.50"") not equals to BigDecimal(""5.5"") and how to work around this issue?"
3866514,1,0,23,java.math.BigDecimal,"If someone knows why java designers decided to implement BigDecimal's equals in that way, it would be interesting to read."
3866544,2,1,52,java.math.BigDecimal,From the javadoc of BigDecimal  equals public boolean equals(Object x) Compares this BigDecimal with the specified Object for equality.
3866544,2,1,52,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method)."
3867445,1,0,9,java.math.BigDecimal,"Edit: yeah, I know BigDecimal should be used."
3867653,2,0,2,java.math.BigDecimal,"Plenty of people will suggest using BigDecimal and if you don't know how to use rounding in your project, that is what you should do."
3867653,2,0,2,java.math.BigDecimal,note: you could use BigDecimal to perform the final rounding.
3867928,2,0,0,java.math.BigDecimal,"You can then convert it to BigDecimal using the static valueOf method (see here for why) before doing any math/calculations on it, and then convert it back to double only for storing it."
3867928,2,0,0,java.math.BigDecimal,"Since you are extending these classes anyway, you can add getters for your double value that gets them as BigDecimal when you need it."
3867461,2,0,6,java.math.BigDecimal,Here's some information on double vs BigDecimal.
3867461,2,0,6,java.math.BigDecimal,This post suggests using BigDecimal even though it is slower.
3867536,2,0,1,java.math.BigDecimal,BigDecimal (or something that better suits its needs) to represent money.
3891819,2,0,2,java.math.BigDecimal,"BigInteger and BigDecimal will both also definitely contain your number, since they're arbitrary precision, but you don't need them, and they'll likely make your code more clunky (due to not being primitives)."
3891819,2,0,2,java.math.BigDecimal,(And I can't see any reason why you'd use a BigDecimal over BigInteger for inputs that are definitely whole numbers).
18869347,2,0,0,java.math.BigDecimal,"In case you want to use the BigDecimal class, there is the BigDecimal.ulp() method as well."
3923203,2,0,2,java.math.BigDecimal,"where that is possible (all wrappers, not for BigInteger/BigDecimal or any custom types)."
3923192,2,0,7,java.math.BigDecimal,"Note that this only works for the standard number types but Number is also implemented by a lot of other types (AtomicInteger, BigDecimal)."
3923192,2,0,7,java.math.BigDecimal,"If you want to support all types, a trick is to use BigDecimal: code."
3958520,2,0,1,java.math.BigDecimal,"If you want to do mathematical operations with large numerical values without over flowing, try the BigDecimal class."
3958520,2,0,1,java.math.BigDecimal,By using the BigDecimal class you can eliminate the dropped bits and get the correct result.
3958520,2,0,1,java.math.BigDecimal,"After using the BigDecimal, the multiplication returns the correct result which is 80000000000000000000000000000000000"
3972525,2,0,1,java.math.BigDecimal,implement javax.faces.convert.Converter in the getAsString(..) method use object.toString() in the getAsObject(..) method use new BigDecimal(str) / Double.parseDouble(str) / Integer.parseInt(str).
3989524,1,0,4,java.math.BigDecimal,"And because i have a locale specific decimal value which needs to be converted to a BigDecimal, is there some annotation which allows me to set up incoming data such as @Decimal(""###.###,##"") or something else ??"
3990701,1,0,8,java.math.BigDecimal,Maximum number of digits after the decimal point using BigDecimal.
3990701,1,0,8,java.math.BigDecimal,What is the maximum number of digits we can have after the decimal point of a BigDecimal value in Java?
3990810,2,0,2,java.math.BigDecimal,According to what is mentioned in the BigDecimal Java 2 Platform Standard Ed.
3990810,2,0,2,java.math.BigDecimal,A BigDecimal consists   of an arbitrary precision integer   unscaled value and a 32-bit integer   scale.
3990810,2,0,2,java.math.BigDecimal,The value of   the number represented by the   BigDecimal is therefore (unscaledValue   × 10^(-scale)).
3990721,2,1,12,java.math.BigDecimal,"See the BigDecimal documentation:  Immutable, arbitrary-precision signed decimal numbers."
3990721,2,1,12,java.math.BigDecimal,A BigDecimal consists of an arbitrary precision integer unscaled value and a 32-bit integer scale.
3990721,2,1,12,java.math.BigDecimal,The value of the number represented by the BigDecimal is therefore (unscaledValue × 10-scale).
4001789,2,0,4,java.math.BigDecimal,Take a look at java.math.BigDecimal instead.
4014906,2,1,1,java.math.BigDecimal,"The persistent fields or properties of   an entity may be of the following   types: Java primitive types;   java.lang.String; other Java   serializable types (including wrappers   of the primitive types,   java.math.BigInteger,   java.math.BigDecimal, java.util.Date,   java.util.Calendar, java.sql.Date,   java.sql.Time, java.sql.Timestamp,   user-defined serializable types,   byte[], Byte[], char[], and   Character[]); enums; entity types   and/or collections of entity types;   and embeddable classes (see section   2.1.5)."
4024200,2,0,1,java.math.BigDecimal,"... that will return the cost of all the CDs in the ArrayList  This indicates some data structure similar to this one (if we stick with integers to represent the cost, BigInteger/BigDecimal or something similar would be more generic here): code."
4043579,1,0,60,java.math.BigDecimal,Converting BigDecimal to Integer.
4043579,1,0,60,java.math.BigDecimal,I have Hibernate method which returns me a BigDecimal.
4043579,1,0,60,java.math.BigDecimal,Now how to convert the BigDecimal into Integer and pass it to second method?
4043599,2,0,17,java.math.BigDecimal,Can you guarantee that the BigDecimal will never contain a value larger than Integer.MAX_VALUE?
4043606,2,0,0,java.math.BigDecimal,See BigDecimal#intValue()
4043615,2,0,7,java.math.BigDecimal,"Well, you could call BigDecimal.intValue():  Converts this BigDecimal to an int."
4043615,2,0,7,java.math.BigDecimal,"This conversion is analogous to a narrowing primitive conversion from double to short as defined in the Java Language Specification: any fractional part of this BigDecimal will be discarded, and if the resulting ""BigInteger"" is too big to fit in an int, only the low-order 32 bits are returned."
4043615,2,0,7,java.math.BigDecimal,Note that this conversion can lose information about the overall magnitude and precision of this BigDecimal value as well as return a result with the opposite sign.
28994284,2,0,0,java.math.BigDecimal,Will the BigDecimal potentially have a non-zero fractional part?
28994284,2,0,0,java.math.BigDecimal,Will the BigDecimal potentially not fit into the Integer range?
28994284,2,0,0,java.math.BigDecimal,"If you answered no to the first 2 questions, you could just use BigDecimal.intValueExact() as others have suggested and let it blow up when something unexpected happens."
28994284,2,0,0,java.math.BigDecimal,We are okay with losing precision and truncating the value because that's what intValueExact() and auto-boxing do We want an exception thrown when the BigDecimal is larger than the Integer range because anything else would be crazy unless you have a very specific need for the wrap around that happens when you drop the high-order bits.
28994284,2,0,0,java.math.BigDecimal,"On the other hand, intValue() doesn't throw an exception when it should if our BigDecimal is too large."
28994284,2,0,0,java.math.BigDecimal,"To get the best of both worlds, round off the BigDecimal first, then convert."
4057415,2,0,2,java.math.BigDecimal,"If you really want to know if a string has a BigDecimal, why not ask the source BigDecimal itself, after all it by definition is always right while using a regular expression cant always be right, you might just get it wrong."
4049489,2,1,8,java.math.BigDecimal,"That said, a regular expression that implements the BigDecimal grammar according to the Java Docs is code."
4049489,2,1,8,java.math.BigDecimal,"You could then replace the locale-dependent bits back into their US counterparts before handing the number over for BigDecimal conversion, if that's not locale-aware."
4057726,2,0,2,java.math.BigDecimal,The JPA 2.0 specification states:  2.4 Primary Keys and Entity Identity ... A simple primary key or a field or property of a composite primary key   should be one of the following types:   any Java primitive type; any primitive   wrapper type; java.lang.String;   java.util.Date; java.sql.Date;   java.math.BigDecimal;   java.math.BigInteger.
4073171,2,1,7,java.math.BigDecimal,"I create a BigDecimal with the value I need to round, then I get a BigDecimal of that value with the scale set to the number of digits I need to round my values to."
6298589,2,0,3,java.math.BigDecimal,"So looks like we are stuck Kludging BigDecimal scale Settings to format output all over any app that needs it, instead of simply being able to rely on a formatter call alone to get the job done."
4113258,2,1,273,java.math.BigDecimal,"Returning List<Entity> as JSON Here's the last example which displays List<Product> in a <table> where the Product class has the properties Long id, String name and BigDecimal price."
4134047,1,0,35,java.math.BigDecimal,Java BigDecimal: Round to the nearest whole value.
4134181,2,0,3,java.math.BigDecimal,Simply look at:  http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#ROUND_HALF_UP and: code.
4134135,2,1,61,java.math.BigDecimal,(Note that BigDecimal objects are immutable; both setScale and round will return a new object.)
4143486,2,1,8,java.math.BigDecimal,"Although BigDecimal solutions are more flexible, here's a simpler solution using int and double."
4143333,2,0,4,java.math.BigDecimal,"I suggest you use BigDecimal in the actual division, to maintain the decimals exactly."
4164521,1,0,69,java.math.BigDecimal,Compare if BigDecimal is greater than zero.
4164521,1,0,69,java.math.BigDecimal,How can I compare if BigDecimal value is greater than zero?
4192900,2,0,3,java.math.BigDecimal,"The solution below however, handles  Bytes, Shorts, Integers, Longs, Floats and Doubles Arbitrary large BigIntegers Arbitrary large BigDecimals Instances of {Double, Float}.NEGATIVE_INFINITY and {Double, Float}.POSITIVE_INFINITY Note that these should always come before/after any BigDecimal even though the BigDecimal.doubleValue may return Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY null elements A mixture of all of the above, and Unknown implementations of Number that also implements Comparable."
4204133,1,0,2,java.math.BigDecimal,Bug in Number or BigInteger and BigDecimal (or alternatively in the API documentation of those)?
4204133,1,0,2,java.math.BigDecimal,"However, the BigInteger (and BigDecimal) overrides this method and returns the 64 low bits of the integer part of the number it represents."
4213050,1,0,3,java.math.BigDecimal,"it should be configurable for Double, BigDecimal etc."
4213653,2,1,9,java.math.BigDecimal,"Use BigDecimal, or possibly int"
4213692,2,0,3,java.math.BigDecimal,"Also, if you are dealing with money and currencies, you should consider using BigDecimal instead of double."
4231610,1,0,3,java.math.BigDecimal,How do you trim the BigDecimal division results.
4231975,2,1,3,java.math.BigDecimal,How about keeping the result as a BigDecimal and then you can set the scale on it to only represent the significant figures that you want.
4231975,2,1,3,java.math.BigDecimal,"An easy way to do this, for some numbers, is to use BigDecimal#stripTrailingZeros()."
4231975,2,1,3,java.math.BigDecimal,"If this isn't what you want, you'll have to detect this condition and manually use BigDecimal#setScale() to set the scale appropriately."
4231883,2,0,1,java.math.BigDecimal,"If you stay with BigDecimal, your output will be better."
4237252,1,0,3,java.math.BigDecimal,Possible Duplicate: How to do a fractional power on BigDecimal in Java?
4237509,2,0,0,java.math.BigDecimal,http://en.wikipedia.org/wiki/Real_number The workaround is using a temporary float and then approximate to the nearest BigDecimal.
4261829,2,1,6,java.math.BigDecimal,"extends Number> - and you can store various objects that extend Number class, i.e. BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short."
4268093,1,0,2,java.math.BigDecimal,"I've tried using BigDecimal, but that didn't improve the situation."
4268093,1,0,2,java.math.BigDecimal,"The values array contains an array of elements of type java.math.BigDecimal, because the SQL NUMBER datatype maps to Java BigDecimal by default, according to the Oracle JDBC drivers."
4276585,2,0,0,java.math.BigDecimal,"If you wish to store and manage these are numbers, you'll need to convert these into BigInteger or BigDecimal objects (given the length of the digest)."
4285131,2,1,6,java.math.BigDecimal,You can use BigDecimal's String constructor to create the BigDecimal (see the link for details) and apply any transformations you wish to your input string beforehands.
4324627,2,0,0,java.math.BigDecimal,Try BigDecimal - it has arbitrary precision for calculations.
4332890,2,0,0,java.math.BigDecimal,"If you need 64-bits, you can use double precision to get up to 53-bits (note for values 1 or more, you will get less fractional precision) and then use BigDecimal and successive approximation to get more bits of precision."
4341813,2,0,0,java.math.BigDecimal,"The only alternative is to parse the byte buffer manually (i.e. go through it, byte by byte, and initialize your BigDecimal that way) - that will avoid allocating any temporary objects, but ends up in a lot more function calls, so you probably don't want to go that route unless you're really trying to avoid creating that String."
4341813,2,0,0,java.math.BigDecimal,"I don't know more about the context of your application, so I'm not sure how exactly your BigDecimal is used."
4448898,2,0,1,java.math.BigDecimal,Using BigInteger you can interpretate a byte-array as positive large number and from BigInteger it is a very small step to BigDecimal: code.
4354764,2,0,1,java.math.BigDecimal,Use the BigDecimal class instead.
4355418,2,0,1,java.math.BigDecimal,I rewrote the brute-force algorithm from the int world to the BigDecimal one with the help of the BigSquareRoot class from http://www.merriampark.com/bigsqrt.htm.
4378579,2,0,2,java.math.BigDecimal,"For this reason, many developers recommend not using floating point at all and strongly recommend BigDecimal."
4395500,2,1,3,java.math.BigDecimal,"As Emil said, BigDecimal helps you."
4395500,2,1,3,java.math.BigDecimal,"You need to define the format using a String, the tutorial is  http://download.oracle.com/javase/tutorial/i18n/format/decimalFormat.html You would have to define the format of scientific numbers, call yourDecimalFormat.parse(yourStringtoBecomeScientificNumber) which will give you a Number, then cast it as a BigDecimal to do arithmetic on it."
4399692,2,1,5,java.math.BigDecimal,"Allows to store values of BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short (and AtomicLong, AtomicInteger)."
4439770,1,0,2,java.math.BigDecimal,"I have used maven plugin for hibernate and it has generated entity classes without identifing sequences that are related to ID fields, id fields are generated as BigDecimal... now even if I point to an existing sequence through code like.. code."
4449498,1,0,0,java.math.BigDecimal,Note in java pojo i am using BigDecimal to that property
4457722,1,0,1,java.math.BigDecimal,How can I specify the number of decimal places of a BigDecimal to print?
4457722,1,0,1,java.math.BigDecimal,I am using BigDecimal as follows: code.
4473878,2,0,1,java.math.BigDecimal,"If you truly need high performance, BigInteger/BigDecimal are not going to cut it."
4547904,2,1,6,java.math.BigDecimal,"Gson provides default serialization and deserialization for Enums, Map, java.net.URL, java.net.URI, java.util.Locale, java.util.Date, java.math.BigDecimal, and java.math.BigInteger classes."
4552469,2,0,1,java.math.BigDecimal,"~ 2^62 bits which is more than the accuracy of a double, so you would have to use BigDecimal in any case."
4560276,1,0,1,java.math.BigDecimal,How to get the list of digits in the scale representing the BigDecimal.
4560276,1,0,1,java.math.BigDecimal,"I have 3 BigDecimal  objects 9.1, 9.12, 9.123 and I am looking to get the number of digits in the scale which would be 1, 2 and 3 for the above decimals."
4580349,2,0,0,java.math.BigDecimal,Use BigDecimal and you need to set the scale on the result to invoke rounding as most likely the scale will be bigger than what you want.
4582365,2,0,2,java.math.BigDecimal,"2^2,147,483,647 has at least 500000000 digit, in fact computing pow is NPC problem, [Pow is NPC in the length of input, 2 input (m,n) which they can be coded in O(logm + logn) and can take upto nlog(m) (at last the answer takes n log(m) space) which is not polynomial relation between input and computation size], there are some simple problems which are not easy in fact for example sqrt(2) is some kind of them, you can't specify true precision (all precisions), i.e BigDecimal says can compute all precisions but it can't (in fact) because no one solved this up to now."
4583682,2,0,1,java.math.BigDecimal,You should use BigDecimal for this kind of operations.
4589681,1,0,4,java.math.BigDecimal,"EDIT: as suggested by one of answers, java.math.BigDecimal is a good example with its 'add', 'subtract' (etc) methods."
4591223,2,0,49,java.math.BigDecimal,"BigDecimal is complaining that it could use 10, 20, 5000, or infinity decimal places, and it still wouldn't be able to give you an exact representation of the number."
4591223,2,0,49,java.math.BigDecimal,"So instead of giving you an incorrect BigDecimal, it just whinges at you."
4643592,1,0,6,java.math.BigDecimal,Which PostgreSQL column type should be used to store a Java BigDecimal?
4643592,1,0,6,java.math.BigDecimal,What PostgreSQL column type should I use to store a Java BigDecimal?
4643609,2,0,0,java.math.BigDecimal,"Probably text, where the contents is the decimal-encoded BigDecimal."
4678985,1,0,5,java.math.BigDecimal,"Java run-time error "" Non-terminating decimal expansion; no exact representable decimal result"" in BigDecimal class."
4679104,2,0,2,java.math.BigDecimal,This happens when you do 1/3 on BigDecimal and don't specify how precise the result should be and what the round method should be like.
4679104,2,0,2,java.math.BigDecimal,See javadoc (http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html) You may use a MathContext object to wrap up precision and roundupMethod together.
4685664,2,1,3,java.math.BigDecimal,"If you don't specify a custom encoder (and most of the time you shouldn't need to), then it will use the DefaultObjectEncoder class to perform the work, and it supports the following data types:  boolean byte[] char[] double float int long short java.lang.Boolean java.lang.Double java.lang.Float java.lang.Integer java.lang.Long java.lang.Short java.lang.String java.lang.StringBuffer java.lang.StringBuilder java.math.BigDecimal java.math.BigInteger java.net.URI java.net.URL java.util.Date java.util.UUID java.util.concurrent.atomic.AtomicInteger java.util.concurrent.atomic.AtomicLong com.unboundid.ldap.sdk.DN com.unboundid.ldap.sdk.Filter com.unboundid.ldap.sdk.LDAPURL com.unboundid.ldap.sdk.RDN  It also supports arrays, lists, and sets of any of the above types, and any kind of enumeration."
4689527,2,0,1,java.math.BigDecimal,Do you perhaps want BigDecimal?
4689527,2,0,1,java.math.BigDecimal,Use as new BigDecimal(stringNumber).
4723384,1,0,3,java.math.BigDecimal,My concern is that if anyone refactors the return type of the unit of work (say from Integer to BigDecimal or whatever) then the cast from Object will never be caught by automatic refactor tools and could lead to runtime issues.
4729748,2,1,3,java.math.BigDecimal,I should point out that a version string doesn't sound like a great idea to store as a double... you might want to consider using BigDecimal instead.
4729748,2,1,3,java.math.BigDecimal,"I don't think I'd even use BigDecimal to be honest... it's not like version numbers are usually treated in the same way as ""normal"" numbers."
4746352,2,1,3,java.math.BigDecimal,I then use a BigDecimal to handle the rounding.
4746352,2,1,3,java.math.BigDecimal,I can get the number of decimal places from the DecimalFormat instance and call setScale on the BigDecimal to perform the rounding.
4748706,2,0,4,java.math.BigDecimal,Easiest way is to use a BigDecimal: code.
4796411,2,0,1,java.math.BigDecimal,On Java you can use BigDecimal to perform money operations resulting on accurate numbers: it is the Sun/Oracle recommended way to store money numbers.
4796901,2,0,4,java.math.BigDecimal,"So if you want decimal places in your result, that result must either be a String (which you already got with the DecimalFormat), or a BigDecimal (which has a setScale() method that does exactly what you want)."
4798592,1,0,2,java.math.BigDecimal,Java BigDecimal alternative library.
4798592,1,0,2,java.math.BigDecimal,This may strike as particularly odd but I must compile several new code against GCJ; that doesn't support Java's BigDecimal.
4798592,1,0,2,java.math.BigDecimal,What I'm looking for is an alternative to java.math.BigDecimal.
4798758,2,1,3,java.math.BigDecimal,"In 1.5.0, instead of specifing an integer value for roundingMode (using the static ints in BigDecimal), you can specify it using the RoundingMode enum (the older method is still maintained for backwards compatibility)."
4798758,2,1,3,java.math.BigDecimal,"So in your code, instead of RoundingMode.CEILING, you would use BigDecimal.ROUND_CEILING."
4813989,1,0,0,java.math.BigDecimal,When I just put blob column in my select it returns BigDecimal :| its plain JDBC query with parameters
4814672,1,0,0,java.math.BigDecimal,"If the something parameter contains and R alphabet, then the BigDecimal conversion will throw an exception."
4814872,2,0,1,java.math.BigDecimal,"The right way to solve this problem is   to use BigDecimal, int or long   for monetary calculations."
4826637,2,0,13,java.math.BigDecimal,You should use BigDecimal to represent monetary values.
4826637,2,0,13,java.math.BigDecimal,"The right way to solve this problem is   to use BigDecimal, int or long   for monetary calculations."
4826641,2,0,4,java.math.BigDecimal,"In development circles, it is commonly considered best practice to use BigDecimal for money in Java."
4826641,2,0,4,java.math.BigDecimal,"That is not to say it is always better than using double IMHO, but I would suggest you start with BigDecimal."
4826641,2,0,4,java.math.BigDecimal,For SQL I suggest using a matching type NUMERIC or DECIMAL for BigDecimal and REAL for double.
4826641,2,0,4,java.math.BigDecimal,"Conversely I have never seen BigDecimal used, but I have seen NUMERIC used in databases."
4826641,2,0,4,java.math.BigDecimal,For accounting purposes use BigDecimal.
4826657,2,1,15,java.math.BigDecimal,Use BigDecimal.
4826657,2,1,15,java.math.BigDecimal,Hibernate (and probably all others) can handle BigDecimal just fine.
4861026,2,0,3,java.math.BigDecimal,I am amazed no one has mentioned BigDecimal.
4893684,1,0,6,java.math.BigDecimal,Java - How to round up float (or BigDecimal ) value by 0.5?
4896728,2,1,3,java.math.BigDecimal,BigDecimal also fails.
4900262,1,0,5,java.math.BigDecimal,How can I create a random BigDecimal in Java?
4900262,1,0,5,java.math.BigDecimal,I would like to do the same for BigDecimal and Random.nextDouble().
5028097,2,0,1,java.math.BigDecimal,I don't use this directly for generating a random BigDecimal.
4912502,2,0,3,java.math.BigDecimal,Profiling it showed that it spent about 60% of its time in BigDecimal.divide().
4912502,2,0,3,java.math.BigDecimal,The culprit turned out to be one line with a very simple arithmetic calculation on float values that Groovy somehow insisted on transforming into BigDecimal.
4920075,2,0,1,java.math.BigDecimal,The only way to do what you want is to use BigDecimal.
4920165,2,1,4,java.math.BigDecimal,If you want more precision use BigDecimal.
4920165,2,1,4,java.math.BigDecimal,"Even BigDecimal has limits too, but they are far beyond what you or just about any one else would need."
4920165,2,1,4,java.math.BigDecimal,(~ 2 billion digits) EDIT: The largest known primes fit into BigDecimal http://primes.utm.edu/largest.html
4923701,1,0,5,java.math.BigDecimal,unexpected exception java.math.BigDecimal running on IBM WebSphere.
4923701,1,0,5,java.math.BigDecimal,As I reviewed java.math.BigDecimal class has no such method add2DFP and does not call one either.
4978453,2,1,1,java.math.BigDecimal,I have moved declaration of BigDecimal annualPremiumAmt before the loop and reorganized code: code.
16962488,2,0,0,java.math.BigDecimal,"I'm seeing the same stacktrace on WebSphere, in my case it's caused by passing a null into java.math.BigDecimal#add."
4937591,2,1,169,java.math.BigDecimal,"If you can't do this, use BigDecimal."
15765686,2,0,3,java.math.BigDecimal,Funny that numerous posts mention to use BigDecimal but no-one bothers to give the correct answer based on BigDecimal?
15765686,2,0,3,java.math.BigDecimal,"Because even with BigDecimal, you can still go wrong, as demonstrated by this code code."
15765686,2,0,3,java.math.BigDecimal,The BigDecimal constructor specifically mentions that it is better to use String constructor than a numeric constructor.
15765686,2,0,3,java.math.BigDecimal,"According to the BigDecimal Javadoc it is possible to create a BigDecimal which is exactly equal to 0.1, provided you use the String constructor."
4937424,2,0,50,java.math.BigDecimal,"No - if you want to store decimal values accurately, use BigDecimal."
4937455,2,0,2,java.math.BigDecimal,"While they're very useful for a lot of tasks, if you need arbitrary precision, you should use BigDecimal."
4948203,2,0,0,java.math.BigDecimal,"Here is a safe version of Peter Lawrey's answer, using BigDecimal: code."
4948203,2,0,0,java.math.BigDecimal,"(Not quite safe, however, as BigInteger and BigDecimal also extend Number."
4971596,1,0,1,java.math.BigDecimal,Cannot find symbol using BigDecimal.
4971596,1,0,1,java.math.BigDecimal,I'm doing my first attempts to use BigDecimal.
4971596,1,0,1,java.math.BigDecimal,i would like to understand why i get the following error message:  cannot find symbol method substract(int)  not looking for a discussion on factorials but rather on the use of BigDecimal (or BigInteger).
4971596,1,0,1,java.math.BigDecimal,"I'm using BigDecimal because at a later stage i will need to divide, resulting in floating point."
4971627,2,0,2,java.math.BigDecimal,You are attempting to subtract an int from a BigDecimal.
4971627,2,0,2,java.math.BigDecimal,"Since there is no method subtract(int x) on the BigDecimal class, you get the cannot find symbol compiler error."
4971637,2,1,2,java.math.BigDecimal,"as there is no BigDecimal.subtract(int) method, only a BigDecimal.subtract(BigDecimal) method."
4971638,2,0,1,java.math.BigDecimal,BigDecimal can only subtract another BigDecimal.
4971638,2,0,1,java.math.BigDecimal,See  http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#subtract(java.math.BigDecimal)
4973079,1,0,3,java.math.BigDecimal,Converting from String to BigDecimal to do math on currency.
4973079,1,0,3,java.math.BigDecimal,"At first I thought Float was right but after reading elsewhere and introducing myself to the numbers class, it appears BigDecimal is correct."
4973153,2,1,5,java.math.BigDecimal,BigDecimal is a fine approach.
4982058,1,0,3,java.math.BigDecimal,BigDecimal rounding in jsf 1.1.
4982058,1,0,3,java.math.BigDecimal,There is a bug in el-1.0 which jsf 1.1 uses which converts a BigDecimal to double and then back to BigDecimal during the update model phase.
5642046,2,1,1,java.math.BigDecimal,The two work arounds are to:  Bind to a String and convert to BigDecimal by calling new BigDecimal(string); Continue binding to BigDecimal but attach a ValueChangeListener where you can manually set the Value in your datamodel prior to calling renderResponse on FacesContext.
5017110,2,1,23,java.math.BigDecimal,"If this is not desireable you can use BigDecimal which does not have rounding errors, but has its own headaches IMHO."
5017115,2,0,0,java.math.BigDecimal,Try java.math.BigDecimal.
5017252,2,0,3,java.math.BigDecimal,If you want fixed point numbers internally use BigDecimal
5023421,1,0,4,java.math.BigDecimal,Generating random BigDecimal value from given range.
5023421,1,0,4,java.math.BigDecimal,I need to generate random BigDecimal value  from given range.
5054132,1,0,91,java.math.BigDecimal,I have this little crazy method that converts BigDecimal values into nice and readable Strings.
9874839,2,0,2,java.math.BigDecimal,BigDecimal does not seem to respect Locale settings.
9874839,2,0,2,java.math.BigDecimal,Same as BigDecimal can be said for any Java .toString() functions.
5073916,2,1,1,java.math.BigDecimal,"With Java datatype BigDecimal, the inserted value into DB will also be padded with numbers, i.e. -0.1111111099999999990428634077943570446223 and this is consistent for both direct JDBC and Spring JDBC."
5073916,2,1,1,java.math.BigDecimal,"For BigDecimal, read http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#BigDecimal%28double%29"
5074735,1,0,1,java.math.BigDecimal,BigDecimal variable padded with random numbers in JDBC Insert.
5074735,1,0,1,java.math.BigDecimal,"But when the value to be inserted is of type BigDecimal, you get the value padded with random numbers, i.e. 0.1111111099999999990428634077943570446223."
5074735,1,0,1,java.math.BigDecimal,"Java states that ""BigDecimal is an immutable, arbitrary-precision signed decimal numbers."""
5074807,2,0,4,java.math.BigDecimal,"You are creating the BigDecimal from a float so it will reflect exactly the value of the float, and as you probably know the trailing digits of a float are more ore less random."
5074807,2,0,4,java.math.BigDecimal,I assume you see this int he database because the jdbc driver thinks: Hey I am getting a BigDecimal.
5077927,2,1,3,java.math.BigDecimal,For a literal value you should always use the BigDecimal constructor taking a string argument.
5077927,2,1,3,java.math.BigDecimal,See the documentation of the BigDecimal(double) constructor for details.
20609944,2,0,0,java.math.BigDecimal,"The Basic annotation can be applied to a persistent property or instance variable of any of the following types: Java primitive types, wrappers of the primitive types, String, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, and any other type that implements java.io.Serializable."
5105951,1,0,0,java.math.BigDecimal,Parse BigDecimal from String containing a number in arbitrary format.
5105951,1,0,0,java.math.BigDecimal,"The cell hopefully contains a number, output will be a BigDecimal (because of arbitrary precision)."
5124214,2,0,45,java.math.BigDecimal,"java.math.BigInteger and java.math.BigDecimal (at least objects of those classes themselves, subclasses could introduce mutability, though this is not a good idea) java.io.File."
5124968,1,0,3,java.math.BigDecimal,How to reset BigDecimal to zero.
5124968,1,0,3,java.math.BigDecimal,"Hallo, I have a BigDecimal temp variable, I want it to be reusable in a function."
5124982,2,1,3,java.math.BigDecimal,"BigDecimal is immutable, and instances cannot be modified."
5128177,2,1,1,java.math.BigDecimal,Have you tried using BigInteger objects (or BigDecimal) for f1?
5132473,1,0,1,java.math.BigDecimal,"so my question is,   how do i assign the DEFAULT value to a BigDecimal value in java ?"
5132539,2,0,1,java.math.BigDecimal,1 - I think it is proper to use Long or long types instead of BigDecimal for id fields.
5155517,2,0,7,java.math.BigDecimal,java.lang.Number doesn't provide methods such as those found in BigInt and BigDecimal.
5157424,2,0,1,java.math.BigDecimal,"Using double to represent money may give you bad results though, you should consider using BigDecimal instead."
5195837,1,0,85,java.math.BigDecimal,"was trying to BigDecimal, but the return value is not correct... code."
5201213,2,0,0,java.math.BigDecimal,"If your range is suitable, using long is much faster and cleaner than using BigDecimal"
5200100,2,0,1,java.math.BigDecimal,Use BigDecimal it offers much better precision
5200105,2,1,14,java.math.BigDecimal,"Yes, use java.math.BigDecimal class."
5200105,2,1,14,java.math.BigDecimal,And you can get BigDecimal values out of databases with JDBC: code.
5200107,2,0,1,java.math.BigDecimal,Yes: the java.math.BigDecimal class.
5200108,2,0,1,java.math.BigDecimal,"Yes, you can use an arbitrary precision class such as BigDecimal."
5200113,2,0,1,java.math.BigDecimal,you can use a BigDecimal To calculate with with BigDeciamls this class provides special methods that are used instead of the standard operators e.g.
5201422,2,0,0,java.math.BigDecimal,"As a convenience, note that the  double constructor of BigDecimal ""Translates a double into a BigDecimal which is the exact decimal representation of the double's binary floating-point value."""
5215061,2,0,3,java.math.BigDecimal,BigDecimal has parameters you can set to control the rounding behavior that will probably get you to where you need to go.
5222388,2,0,14,java.math.BigDecimal,"If you want exact decimal values, use BigDecimal."
5222388,2,0,14,java.math.BigDecimal,"(Even BigDecimal won't be able to represent something like ""a third"" exactly, of course.)"
5222388,2,0,14,java.math.BigDecimal,"BigDecimal) whereas ""natural"" values such as height and width are more appropriate as float/double."
5239137,1,0,6,java.math.BigDecimal,Clarification on behavior of BigDecimal.stripTrailingZeroes().
5239137,1,0,6,java.math.BigDecimal,The following is the documentation for stripTrailingZeroes:  Returns BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation.
5239137,1,0,6,java.math.BigDecimal,"For example, stripping the trailing zeros from the BigDecimal value 600.0, which has [BigInteger, scale] components equals to [6000, 1], yields 6E2 with [BigInteger, scale] components equals to [6, -2] Returns: a numerically equal BigDecimal with any trailing zeros removed."
5243520,2,0,1,java.math.BigDecimal,"As JSP has access to everything in Java, it does have access to BigDecimal."
5243520,2,0,1,java.math.BigDecimal,To convert a String to BigDecimal simply use this constructor.
31603824,2,0,0,java.math.BigDecimal,"I had faced same issue, resolved the same using BigDecimal."
5257597,2,0,4,java.math.BigDecimal,"I know BigDecimal is a popular choice, but I prefer double not because its much faster but its usually much shorter/cleaner to understand."
5257597,2,0,4,java.math.BigDecimal,If you count the number of symbols as a measure of code complexity  using double => 11 symbols use BigDecimal (from @Mark Byers example) => 21 symbols  BTW: don't use float unless there is a really good reason to not use double.
5257183,2,1,17,java.math.BigDecimal,"Alternatively use a type that allows you to store the numbers you are trying to represent exactly, for example BigDecimal can represent 0.1 exactly."
5257183,2,1,17,java.math.BigDecimal,Example code for BigDecimal: code.
5257191,2,0,6,java.math.BigDecimal,You can avoid this specific problem using classes like BigDecimal.
5257191,2,0,6,java.math.BigDecimal,"But note Jon's point below: BigDecimal can't represent ""one third"" accurately, any more than double can represent ""one tenth"" accurately."
5257191,2,0,6,java.math.BigDecimal,"But for (say) financial calculations, BigDecimal and classes like it tend to be the way to go, because they can represent numbers in the way that we humans tend to think about them."
5257192,2,0,1,java.math.BigDecimal,"You should use a decimal datatype, not floats: http://download.oracle.com/javase/1.4.2/docs/api/java/math/BigDecimal.html"
5272373,1,0,1,java.math.BigDecimal,"Unfortunately BigDecimal is not really complete for my needs its missing many key functions eg: sine, log and most of the static helpers on Math."
5272373,1,0,1,java.math.BigDecimal,Examining DFP there is no simple way to pass a BigDecimal/BigInteger and build a DFP.
5272373,1,0,1,java.math.BigDecimal,none of the functions (like multiply) accept a context w/ a precision and rounding just like BigDecimal.
5272373,1,0,1,java.math.BigDecimal,there are no methods to export to a BigDecimal or BigInteger  dfp  is this the original inspiration for apache commons math DFP class ?
5272373,1,0,1,java.math.BigDecimal,the first concern about import from a BigDecimal or BigInteger is lacking.
5272373,1,0,1,java.math.BigDecimal,there are no methods to export to a BigDecimal or BigInteger
5272419,2,0,1,java.math.BigDecimal,BigDecimal is not final.
5272517,2,0,0,java.math.BigDecimal,I think the best way is to write wrapper for BigDecimal and implement all your additional options.
5277819,1,0,1,java.math.BigDecimal,Get the Mantissa of a Java BigDecimal.
5277819,1,0,1,java.math.BigDecimal,I figured I'd start with BigDecimal: code.
5277987,2,1,2,java.math.BigDecimal,BigDecimal.unscaledValue(): code.
5277987,2,1,2,java.math.BigDecimal,The result of this method is a BigInteger since BigDecimal has arbitrary length decimal precision.
5285505,1,0,5,java.math.BigDecimal,BigDecimal for Stock Prices?
5285505,1,0,5,java.math.BigDecimal,"I realize that we should use BigDecimal for all monetary values, but what about stock prices in dollars?"
5285704,2,0,9,java.math.BigDecimal,"Instead, because of the large amount of data, storage efficiency and performance are relevant, and BigDecimal really sucks at those."
5286236,2,0,0,java.math.BigDecimal,"When you receive a stock price as double and want to calculate ""in a money way"" about it, make sure you know how much decimal digits (after the point) it has (should have - not from the double, but from the type of stock price), and convert it with this scale to a BigDecimal (or whatever you are using for money calculations)."
5285545,2,0,2,java.math.BigDecimal,Personally I would stick to BigDecimal.
5285593,2,0,4,java.math.BigDecimal,I reject the use of BigDecimal for monetary values (in general*).
5285593,2,0,4,java.math.BigDecimal,"While a BigDecimal is far better than a double for addressing a fixed precision, it is still not a correct monetary representation IMOHO."
5285593,2,0,4,java.math.BigDecimal,(BigDecimal may be the back-end [or it could be entirely replaced with another impl.
5285601,2,1,7,java.math.BigDecimal,"BigDecimal is obviously ideal from a precision perspective, but it sucks from a performance perspective."
24407312,2,0,2,java.math.BigDecimal,"I achived this by java.math.BigDecimal Class, Below is the code snippet code."
5318258,2,0,1,java.math.BigDecimal,"This means that if you can't fit your desired numbers into the range of, say a double or long then you'll have to use a ""big number"" library, such as the one built-in to Java (BigDecimal, BigInteger), or a third-party library, or write your own."
5323502,1,0,36,java.math.BigDecimal,"I have String representation of BigDecimal, i want to set thousands separator and return String."
5334083,1,0,3,java.math.BigDecimal,Initially i was after a BigDecimal with more functionality than the simple +-*/ which is significantly less than whats available on java.lang.Math.
5334083,1,0,3,java.math.BigDecimal,I had originally only selected BigDecimal simply because it offers more digits of precision that double.
5372279,1,0,5,java.math.BigDecimal,"Edit2: And also, I am not allowed to use BigDecimal, BigInteger, or any other library, sorry for not specifying earlier."
5372314,2,0,0,java.math.BigDecimal,"If not, unfortunately BigDecimal doesn't have that method."
5379412,2,0,4,java.math.BigDecimal,BigDecimal will do just fine.
5379413,2,0,4,java.math.BigDecimal,"Alternately, you could use the arbitrary-precision java.math.BigDecimal class."
5379430,2,0,1,java.math.BigDecimal,"Floats (and doubles) have less accuracy in the extreme ends of their ranges, but are more space efficient than, say, BigDecimal."
5379430,2,0,1,java.math.BigDecimal,Go with BigDecimal.
5379432,2,0,2,java.math.BigDecimal,"You can use double and if not enough, you also have the BigDecimal class."
5379465,2,0,1,java.math.BigDecimal,BigDecimal will be perfectly accurate but use (comparatively) a lot of space.
5385429,2,0,0,java.math.BigDecimal,Try using BigDecimal if you requires extra precision.
5384601,1,0,0,java.math.BigDecimal,I have looked into the BigDecimal class but I cannot do trig and logarithms and whatnot with that class
5384628,2,0,1,java.math.BigDecimal,BigDecimal are even slower.
5385202,2,0,4,java.math.BigDecimal,Another alternative is to do all of your calculator arithmetic in Java using the BigDecimal class.
5385202,2,0,4,java.math.BigDecimal,"The downsides are that BigDecimal arithmetic is many orders of magnitude slower than floating point, and the APIs are more cumbersome to use."
5390610,2,0,3,java.math.BigDecimal,I would recommend using System.out.println(new BigDecimal(d)).
5396129,1,0,0,java.math.BigDecimal,JTable DefaultCellRenderer doesn't work on BigDecimal Type when I set Object.class.
5396129,1,0,0,java.math.BigDecimal,"But it turns out, it didin't apply those columns that have type ""BigDecimal"", Other String fields are all working fine."
5405406,2,1,2,java.math.BigDecimal,BigDecimal is-a Number so the default renderer is used instead of your custom renderer.
5397167,2,1,1,java.math.BigDecimal,"If you need to store precise values, I wouldn't use Double... instead look at BigDecimal."
5403208,2,0,2,java.math.BigDecimal,If a BigDecimal is passes to one of your methods you can't rely on the fact that no one has overridden BigDecimal like you can with String.
5403208,2,0,2,java.math.BigDecimal,subclasses of BigDecimal could potentially replace its methods with others which give unpredictable results.
5403208,2,0,2,java.math.BigDecimal,The following will compile because BigDecimal is not immutable: code.
5403208,2,0,2,java.math.BigDecimal,"You cannot rely on he state of BigDecimal instances passed into your code, you should make Defensive copies of non final classes if you need to rely on their immutability."
5407877,1,0,0,java.math.BigDecimal,Convert BigDecimal to String for a check.
5407877,1,0,0,java.math.BigDecimal,Is there a library or a call that will convert a BigDecimal value to a string to print on checks?
5411637,1,0,2,java.math.BigDecimal,BigDecimal - check value is within double range.
5423632,2,0,3,java.math.BigDecimal,"However, regardless of Java version, for best results when you are particularly worried about decimal accuracy in java, you should use the BigDecimal class for your values."
5423632,2,0,3,java.math.BigDecimal,"But if this happens frequently and in more than one place, or if you think you might be expanding your application in the future, I would use the safer BigDecimal."
5423607,2,1,3,java.math.BigDecimal,OR You can use BigDecimal.
5424888,1,0,0,java.math.BigDecimal,"I'm running a query in Java using HQL and creating a parameter that looks like this: query.setParameter(""month"", month); The month variable is a BigDecimal that is between 1 and 12."
5425232,2,1,0,java.math.BigDecimal,It was just a problem trying to add a BigDecimal to a constant number within the query.
5426861,2,0,5,java.math.BigDecimal,"I don't know what the exact issue is here, but use BigDecimal (instead of double) when working with money."
5430337,2,0,0,java.math.BigDecimal,"Note that for financial calculations it is generally advisable to use BigDecimal, although in that simple case the precision errors should not be that big a problem."
5430413,2,0,0,java.math.BigDecimal,"You can use BigDecimal, but the process is the same."
5446205,2,0,2,java.math.BigDecimal,Its definitely a better BigDecimal which to be fair works but is quite simple and offers little functionality.
5476971,2,0,3,java.math.BigDecimal,"When you're doing something like this you want to use BigDecimal, to avoid rounding problems with floating point types"
5477004,2,0,0,java.math.BigDecimal,"You should use BigDecimal if you want to avoid the rounding issues, or use integers and treat them as ""number of tenths or hundredths"" vs absolute values."
5485057,2,1,3,java.math.BigDecimal,"You covnert the value to BigDecimal, and the rounding problems of doubles account for the decimal places after the dot."
5485826,2,0,0,java.math.BigDecimal,"If you can cast your NumberFormat to DecimalFormat, you can tell it to parse to a BigDecimal directly, reducing your code to: code."
5485090,2,0,5,java.math.BigDecimal,"When playing with BigDecimal, the appropriate constructor is BigDecimal(String val) code."
5485090,2,0,5,java.math.BigDecimal,"BigDecimal(double val) does construct an exact decimal representation of the double value, which is not the human readable value you expected."
5485090,2,0,5,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
5485090,2,0,5,java.math.BigDecimal,"[...] Therefore, it is generally recommended that the String constructor be used in preference to this one"" Source : BigDecimal javadoc"
5485456,2,0,0,java.math.BigDecimal,You can try the following without BigDecimal or NumberFormat.
5485456,2,0,0,java.math.BigDecimal,If youw ant to avoid rounding error in your calculations but don't want the heavy weight BigDecimal you can use long cents.
5486858,2,0,2,java.math.BigDecimal,This indicates that you're using String to hold the number instead of BigDecimal or BigInteger.
5509366,2,1,5,java.math.BigDecimal,I think you need to use BigInteger or BigDecimal For example: code.
5543897,2,0,0,java.math.BigDecimal,"I would use BigDecimal class for such kind of calculations, though it is not an answer to your questions, but it will really improve the precision of floating point arithmetic."
5552454,2,0,1,java.math.BigDecimal,It explains why you are seeing this behaviour and also discusses the BigDecimal class.
5552381,2,0,9,java.math.BigDecimal,"If you want exact values, use BigDecimal: code."
5553897,2,1,4,java.math.BigDecimal,"If this is MySql, you should probably use java.math.BigDecimal."
5558713,2,1,4,java.math.BigDecimal,You may want to consider using BigDecimal.pow() if accuracy rather than performance is your primary concern.
5559091,2,0,0,java.math.BigDecimal,"You'll be interested in BigDecimal, for example: code."
5558962,2,0,1,java.math.BigDecimal,I think you're looking for the BigDecimal class.
5558962,2,0,1,java.math.BigDecimal,"You can also set the precision of a BigDecimal, by specifying the MathContext in its constructor, or the scale by using one of the setScale() methods."
5566300,2,0,2,java.math.BigDecimal,Look into the BigDecimal class.
5566348,2,0,3,java.math.BigDecimal,Here BigDecimal is one type you could use instead.
5573430,2,0,2,java.math.BigDecimal,Otherwise BigDecimal is the answer.
5576896,2,0,0,java.math.BigDecimal,"The answer you are seeing is most likely due to:  defining the column type for the telephone number to be ""float"", ""double"", ""decimal"", ""numeric"" or ""real"", or defining the column type as ""char"", ""varchar"", etc and populating it from a Java float, double or BigDecimal."
5600384,2,0,0,java.math.BigDecimal,"As others have pointed out, only numbers that are combinations of powers of two are exactly representable in (bianary) floating point format If you need to store arbitrary numbers with arbitrary precision, then use BigDecimal."
5599936,2,0,5,java.math.BigDecimal,"If you need exact values, use a BigDecimal instead."
5599995,2,0,1,java.math.BigDecimal,As suggested by @Kaleb Brasee go and use BigDecimal's when accuracy is a must.
5599995,2,0,1,java.math.BigDecimal,Here is a link to a nice explanation of tiny details related to using floating point operations in Java http://firstclassthoughts.co.uk/java/traps/java_double_traps.html There is also a link to issues involved with using BigDecimal's.
5602950,2,1,5,java.math.BigDecimal,"The   Basic annotation can be applied to a   persistent property or instance   variable of any of the following   types: Java primitive types, wrappers   of the primitive types, String,   java.math.BigInteger,   java.math.BigDecimal, java.util.Date,   java.util.Calendar, java.sql.Date,   java.sql.Time, java.sql.Timestamp,   byte[], Byte[], char[], Character[],   enums, and any other type that   implements Serializable."
5621597,2,0,0,java.math.BigDecimal,You may want to use BigDecimal instead.
5653554,2,0,1,java.math.BigDecimal,Use instances of java.math.BigDecimal instead.
5661016,2,1,1,java.math.BigDecimal,"For monetary values, you should always use BigDecimal since it gives you complete control over the precision (like double or float which can give odd results even for simple values)"
5667580,2,0,0,java.math.BigDecimal,"For learning, a double might be sufficient, but in real world, you shouldn't use double for Money amounts, but BigDecimal."
8807549,2,0,0,java.math.BigDecimal,"It's a response to a question about calculating logs with BigDecimal types, but it could be adapted, pretty easily, to any floating-point type."
5681868,1,0,8,java.math.BigDecimal,Efficient BigDecimal round Up and down to two decimals.
5681868,1,0,8,java.math.BigDecimal,"In java am trying to find an efficient way to round a BigDecimal to two decimals, Up or Down based on a condition."
5703242,2,0,7,java.math.BigDecimal,"If you want to have precise double calculations, either use BigDecimal, or use ints (your doubles multiplied by 10 or 100)"
5704185,2,1,5,java.math.BigDecimal,Most decimal values aren't :) You should use BigDecimal if the exact decimal representation is important to you.
5704186,2,0,1,java.math.BigDecimal,"If you're assigning from a string, you may prefer BigDecimal as BigDecimal can precisely hold anything that you can reasonably represent with a string."
5704186,2,0,1,java.math.BigDecimal,"Note that BigDecimal also cannot hold every possible value (it can't precisely represent 1/3rd, for instance, for the same reason we can't write 1/3rd precisely in our decimal notation system — it would never end)."
5704186,2,0,1,java.math.BigDecimal,"But again, if your source is a string value, BigDecimal will more closely align with your possible values than will float or double."
5704186,2,0,1,java.math.BigDecimal,"float and double are designed to be very fast in computation; BigDecimal is designed to be very precise with decimal values, at the expense of speed."
17091403,2,0,4,java.math.BigDecimal,"You can use org.apache.commons.math.util.MathUtils from apache common double round = MathUtils.round(double1, 2, BigDecimal.ROUND_HALF_DOWN);"
5710926,2,1,14,java.math.BigDecimal,Use BigDecimal.
5710926,2,1,14,java.math.BigDecimal,You should have a money class and the amount should be a BigDecimal.
5710926,2,1,14,java.math.BigDecimal,"Even if you're not doing money, consider BigDecimal."
5721594,1,0,4,java.math.BigDecimal,I've come to the conclusion of using BigDecimal to do all numerical calculations and store the final value.
5721594,1,0,4,java.math.BigDecimal,"Since BigDecimal is immutable, I'm worried about the number of objects generated in the heap every second."
5721594,1,0,4,java.math.BigDecimal,Questions  Is there any mutable cousin of BigDecimal I could use?
5722665,2,0,0,java.math.BigDecimal,"The Garbage collector should do a decent enough job of cleaning the objects up, however if you still do want immutable Numbers, you can always access the back-data of BigDecimal using reflections, that way you can create a wrapper class for BigDecimal to do what you want."
5721797,2,1,2,java.math.BigDecimal,"I would recommend that before you jump to the conclusion that BigDecimal doesn't suit your needs, that you actually profile your scenario."
5734036,1,0,3,java.math.BigDecimal,"Hibernate loss of precision in results when mapping a number (22,21) to BigDecimal."
5734036,1,0,3,java.math.BigDecimal,For a particular record for which the value of the column is  0.493 I get a BigDecimal whose value is 0.49299999999.
5734036,1,0,3,java.math.BigDecimal,"Any variant of that code, using Float, BigDecimal and various constructors gives the same result: ""0.493""... Any hint on how should I map the column to avoid such issues?"
5734172,2,1,2,java.math.BigDecimal,It's a result of initializing BigDecimal from double: code.
5743633,2,0,0,java.math.BigDecimal,"(+/-) roundingMethod : BigDecimal.ROUND_DOWN, #.ROUND_CEILING, #.ROUND_HALF_UP, ..."
5749615,1,0,8,java.math.BigDecimal,losing precision converting from java BigDecimal to double.
5749615,1,0,8,java.math.BigDecimal,"I've found a fix where using BigDecimal for the conversion solves the issue, but raises another problem when I go to convert the BigDecimal back to a double: I'm losing several places of precision."
5749615,1,0,8,java.math.BigDecimal,How can I get BigDecimal to preserve those additional places of precision?
5749657,2,1,17,java.math.BigDecimal,The conversion from BigDecimal is unrelated and the precision problem is the same either way.
5749657,2,1,17,java.math.BigDecimal,You could use BigDecimal in place of them.
5749673,2,0,0,java.math.BigDecimal,If it's entirely based on doubles ... why are you using BigDecimal?
5749673,2,0,0,java.math.BigDecimal,If it's too large of value (or too much precision) for that then ... you can't convert it; that would be the reason to use BigDecimal in the first place.
5749673,2,0,0,java.math.BigDecimal,"As to why it's losing precision, from the javadoc  Converts this BigDecimal to a double."
5749673,2,0,0,java.math.BigDecimal,"This conversion is similar to the narrowing primitive conversion from double to float as defined in the Java Language Specification: if this BigDecimal has too great a magnitude represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate."
5749673,2,0,0,java.math.BigDecimal,"Note that even when the return value is finite, this conversion can lose information about the precision of the BigDecimal value."
5749978,2,0,3,java.math.BigDecimal,"The problem is that a double can hold 15 digits, while a BigDecimal can hold an arbitrary number."
5749978,2,0,3,java.math.BigDecimal,"To keep as much precision as you can, you need to change the BigDecimal's rounding mode so that it truncates: code."
5768688,1,0,1,java.math.BigDecimal,"For java applications, is it safe to use BigDecimal when dealing with money, or should I use integers and create an abstraction for money?"
5768688,1,0,1,java.math.BigDecimal,"Do I still need to do this, or can I just use BigDecimal?"
5768697,2,1,1,java.math.BigDecimal,"Assuming you mean you need granularity, BigDecimal seems perfectly suited for the job."
5769690,2,0,21,java.math.BigDecimal,Use new BigDecimal(string).
5769690,2,0,21,java.math.BigDecimal,As a rule of thumb - always use BigDecimal for sensitive calculations like money.
7610652,2,0,0,java.math.BigDecimal,It's all based on BigDecimal and string conversions.
5792548,2,1,0,java.math.BigDecimal,Ok to resolve the BigDecimal error I changed: code.
5783341,2,0,0,java.math.BigDecimal,I have @NotNull on a BigDecimal property and I get the following error code.
5783341,2,0,0,java.math.BigDecimal,From the documentation it looks like BigDecimal is supported.
5784673,1,0,0,java.math.BigDecimal,"Notes: -Some of the numbers are up to 25 digits in size, and BigDecimal and BigInt aren't allowed to be used."
5844524,2,0,2,java.math.BigDecimal,multiply it by 10^n floor or cast to int divide it by 10^n  or make use of  BigDecimal
5844545,2,0,2,java.math.BigDecimal,"If you need EXACTLY 123.45 you need the BigDecimal class, like  code."
5859081,2,0,1,java.math.BigDecimal,"Number has non Integer subclasses such as Float, and BigDecimal so it doesn't make sense to implement Iterable<Integer> on Number."
5888987,1,0,20,java.math.BigDecimal,One solution would be to use Double.parseDouble(s) or similarly new BigDecimal(s).
9227118,2,0,3,java.math.BigDecimal,Unfortunately Double.parseDouble(s) or new BigDecimal(s) seem to be your best options.
5908287,2,0,1,java.math.BigDecimal,"You're already using BigDecimal for the rounding, you're already using a rounding mode that is well-suited for financial applications unless there are specific requirements or regulations that proscribe a different one."
5908287,2,0,1,java.math.BigDecimal,The only thing you absolutely MUST do is take the last step and use BigDecimal to represent the money values throughout your application.
5940396,2,0,0,java.math.BigDecimal,Use BigDecimal that does not introduce any rounding for very big or very small numbers at the cost of bigger memory consumption and slower computations.
5945919,2,1,17,java.math.BigDecimal,"If you're only interested in formatting a value to two decimal places, look at DecimalFormat - if you're interested in a number of decimal places while calculating you should really be using BigDecimal."
5965138,2,0,1,java.math.BigDecimal,"I wouldn't use float, I suggest using double or int or long or (if you have to) BigDecimal code."
5965008,2,0,7,java.math.BigDecimal,Use java.math.BigDecimal instead.
5965008,2,0,7,java.math.BigDecimal,BigDecimal lets you specify a fixed-decimal value that isn't subject to representation problems.
5965008,2,0,7,java.math.BigDecimal,I create two BigDecimal numbers.
5965008,2,0,7,java.math.BigDecimal,In both cases the BigDecimal shows me what the number is that it holds: code.
5965055,2,1,2,java.math.BigDecimal,Use BigDecimal class instead of float.
5978949,2,1,17,java.math.BigDecimal,"As Grammin said, if you're trying to represent money, use BigDecimal."
5978797,2,0,2,java.math.BigDecimal,I would recommend using BigDecimal if you are trying to represent currency.
29739013,2,0,1,java.math.BigDecimal,I used to BigDecimal and to toPlainString() method code.
30005285,2,0,0,java.math.BigDecimal,"I try to compile the list as much as i can:  java.lang.String The wrapper classes for the primitive types:  java.lang.Integer java.lang.Byte java.lang.Character java.lang.Short java.lang.Boolean java.lang.Long java.lang.Double java.lang.Float java.lang.StackTraceElement (used in building exception stacktraces) Most of the enum classes java.math.BigInteger java.math.BigDecimal java.io.File java.awt.Font java.awt.BasicStroke java.awt.Color java.awt.GradientPaint, java.awt.LinearGradientPaint java.awt.RadialGradientPaint, java.awt.Cursor java.util.Locale java.util.UUID  java.util.Collections java.net.URL java.net.URI java.net.Inet4Address java.net.Inet6Address java.net.InetSocketAddress most subclasses of java.security.Permission"
5998648,2,0,0,java.math.BigDecimal,"Or read the excellent book ""Effective Java"" BigDecimal class is there to have correct numbers in Java"
6016642,2,0,1,java.math.BigDecimal,The following article also discusses the problems (and solutions) to handling money in Java: http://www.javapractices.com/topic/TopicAction.do?Id=13 Other related classes include: Currency and of course BigDecimal.
6021369,1,0,2,java.math.BigDecimal,Java BigDecimal difference.
6021413,2,1,7,java.math.BigDecimal,"Looking at the source code for BigDecimal, it does: code."
6021413,2,1,7,java.math.BigDecimal,"From its JavaDoc:  Translates a double into a BigDecimal,   using the double's canonical string   representation provided by the   Double.toString(double) method."
6021413,2,1,7,java.math.BigDecimal,"Note: This is generally the preferred way to   convert a double (or float) into a   BigDecimal, as the value returned is   equal to that resulting from   constructing a BigDecimal from the   result of using   Double.toString(double)."
6021413,2,1,7,java.math.BigDecimal,"Furthermore, because of this rounding, if you did: BigDecimal d = BigDecimal.valueOf(4.00000000000000000000000000000000001)); you would get the wrong value."
6021417,2,0,1,java.math.BigDecimal,"When you pass a double into the BigDecimal constructor, the constructor takes the floating-point value and reproduces it exactly."
6021417,2,0,1,java.math.BigDecimal,"In case you didn't notice, using System.out.println() to show a floating point number doesn't show the same results as if you wrap the floating point number in a BigDecimal first (using the BigDecimal constructor that takes a double)."
6021431,2,0,1,java.math.BigDecimal,"BigDecimal.valueOf(double) first does a conversion from double to String, then String to BigDecimal."
6021431,2,0,1,java.math.BigDecimal,"In the first case, you're starting with a double or float, converting to BigDecimal, calculating the difference."
6021431,2,0,1,java.math.BigDecimal,"In the second case, you're starting with double or float, converting to a String, then converting to BigDecimal, then calculating the difference."
6021445,2,0,1,java.math.BigDecimal,"From the Javadocs: public static BigDecimal valueOf(double val)  Translates a double into a BigDecimal,   using the double's canonical string   representation provided by the   Double.toString(double) method."
6021445,2,0,1,java.math.BigDecimal,"Note:   This is generally the preferred way to   convert a double (or float) into a   BigDecimal, as the value returned is   equal to that resulting from   constructing a BigDecimal from the   result of using   Double.toString(double)."
6058984,1,0,6,java.math.BigDecimal,BigDecimal compareTo not working as expected.
6058984,1,0,6,java.math.BigDecimal,"According to the JavaDoc for BigDecimal, the compareTo function does not account for the scale during comparison."
6059045,2,1,17,java.math.BigDecimal,new BigDecimal(0.7) does not represent 0.7.
6059045,2,1,17,java.math.BigDecimal,"If you need precise BigDecimal values, you must use the String constructor (actually all constructors that don't take double values will work)."
6059045,2,1,17,java.math.BigDecimal,"Try new BigDecimal(""0.7"") instead."
6059045,2,1,17,java.math.BigDecimal,The JavaDoc of the BigDecimal(double) constructor has some related notes:   The results of this constructor can be somewhat unpredictable.
6059045,2,1,17,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
6059045,2,1,17,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which is exactly equal to 0.1, as one would expect."
6059045,2,1,17,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the same result as converting the double to a String using the Double.toString(double) method and then using the BigDecimal(String) constructor."
6059045,2,1,17,java.math.BigDecimal,"So to summarize: If you want to create a BigDecimal with a fixed decimal value, use the String constructor."
6059045,2,1,17,java.math.BigDecimal,"If you already have a double value, then BigDecimal.valueOf(double) will provide a more intuitive behaviour than using new BigDecimal(double)."
6063376,2,0,4,java.math.BigDecimal,Here is another solution based on BigDecimal (that does not go through a String).
6063376,2,0,4,java.math.BigDecimal,The BigDecimal.valueOf is in most JDK's (internally) implemented through a call to Double.toString however.
6063788,2,0,1,java.math.BigDecimal,"(For this specific example with d=5.6 a BigDecimal would also be able to represent it exactly, but there are other numbers it cannot represent exactly, e.g."
6063301,2,1,10,java.math.BigDecimal,Use BigDecimal to do that same calculation.
6063301,2,1,10,java.math.BigDecimal,"Construct it with new BigDecimal(String.valueOf(yourDouble)) (this is still going through string, but the parts are not separated via string manipulation) use bd.subtract(new BigDecimal(bd.intValue()) to determine the fraction"
6063704,1,0,7,java.math.BigDecimal,"How to get ""shortest"" BigDecimal that uniquely determines a given double."
6063704,1,0,7,java.math.BigDecimal,"Basically, I'm curious on how to get hold of new BigDecimal(Double.toString(d)) without going through the process of creating a string."
6065007,2,0,1,java.math.BigDecimal,Perhaps you are thinking of BigDecimal.valueOf(double) which does this.
6065582,1,0,0,java.math.BigDecimal,"?, Its just a simple power function Corrected this is the correct code  import java.math.BigDecimal; public class Problema6 { code. }"
6065643,2,1,3,java.math.BigDecimal,Switch to BigDecimal.pow(...) to avoid overflows
6075426,2,1,6,java.math.BigDecimal,"Use BigDecimal, int, or long instead  Using int : code."
6075426,2,1,6,java.math.BigDecimal,Using BigDecimal : code.
6089508,1,0,1,java.math.BigDecimal,How to use BigDecimal with JFormattedTextField.
6089508,1,0,1,java.math.BigDecimal,"I assign it a BigDecimal value using its setValue() method, and allow the user to modify that value using this textfield."
6089570,2,0,2,java.math.BigDecimal,JRealNumberField and JLocalizedRealNumberField are text fields for BigDecimal.
6098422,1,0,3,java.math.BigDecimal,"Can I have the ""Score"" column (it is a BigDecimal) hidden if all values are null, otherwise it should display?"
6105897,2,0,1,java.math.BigDecimal,"I'd just like to add that if you are looking for an alternative to double or float that doesn't entail loss of precision when converting between strings and numeric form, look at these:  The standard java.math.BigDecimal class represents an arbitrary precision scaled number; i.e. an arbitrary precision integer multiplied (scaled) by a fixed integer power of 10."
6105657,2,1,2,java.math.BigDecimal,"If you want to remove those issues, consider using something like BigDecimal to represent your numbers instead of primitive types like float or double."
6105657,2,1,2,java.math.BigDecimal,"If you need to display it as a decimal, use BigDecimal to perform the division."
6118922,1,0,17,java.math.BigDecimal,"I've been trying to convert a value of seconds (in a BigDecimal variable) to a string in an editText like ""1 hour 22 minutes 33 seconds"" or something of the kind."
6118983,2,0,42,java.math.BigDecimal,Is it necessary to use a BigDecimal?
6134583,2,1,0,java.math.BigDecimal,"It allows for standardization of data  types (like BigDecimal for financial amounts, like ArrayList for all lists), forcing interfaces (like Serializable or Cloneable)."
6166811,2,0,15,java.math.BigDecimal,The way around this is to do the rounding yourself or use BigDecimal which allows you to control the rounding.
6166770,2,1,18,java.math.BigDecimal,"If you're really interested in exact digits, you should use BigDecimal instead."
6167697,1,0,1,java.math.BigDecimal,How to convert java BigDecimal to normal byte array (not 2's complement).
6167724,2,1,4,java.math.BigDecimal,To get the bytes from a BigDecimal or BigInteger you can use the methods it provides.
6173488,2,1,8,java.math.BigDecimal,"For a number I'd use int (if you only have integer values), double or BigDecimal (if it's a monetary ammount or some other exact decimal number)."
6175993,1,0,3,java.math.BigDecimal,Trim More than two trailing Zeros in BigDecimal.
6175993,1,0,3,java.math.BigDecimal,What would be a good way to trim more than two trailing zeros for a BigDecimal So 1.2200 would print 1.22 and 1.0000 would print 1.00 Edit As well as to return 1.222200 as 1.2222 and 1.220000001 as 1.220000001 etc.
6176064,2,0,11,java.math.BigDecimal,"This will format any BigDecimal value with at least 2 digits after the decimal point and up to 10 digits after the decimal point, if it improves the precision."
6176064,2,0,11,java.math.BigDecimal,BigDecimal values with more than 10 digits after the decimal point will still be cut off: code.
6176064,2,0,11,java.math.BigDecimal,If you don't know the exact number of digits but want as few as possible (i.e. you want the smallest possible scale for your BigDecimal) then calling stripTrailingZeros() will do exactly what you want: code.
6176183,2,0,0,java.math.BigDecimal,This method will give you the result you want (monetary round): (what is String because it's better for BigDecimal see documentation) code.
6215602,2,1,2,java.math.BigDecimal,where #{bean.samplePoints} returns a List<BigDecimal[]> or something.
6219712,2,0,1,java.math.BigDecimal,"http://download.oracle.com/javase/1,5.0/docs/api/java/math/BigDecimal.html"
6219724,2,0,5,java.math.BigDecimal,"If you really need arbitrary precision, your best option is probably BigDecimal."
6219739,2,0,1,java.math.BigDecimal,You can use Java's BigDecimal.
6247168,1,0,3,java.math.BigDecimal,A better than BigDecimal type for prices in Java?
6247169,2,0,4,java.math.BigDecimal,So BigDecimal would seem to be the way to go.
6247169,2,0,4,java.math.BigDecimal,"(Back when BitInteger/BigDecimal were being thought of I pushed for a packed decimal format that would have been lighter weight, but I couldn't get any support for it.)"
6268236,2,1,2,java.math.BigDecimal,(It's definitely not new BigDecimal(5.5) anyhow.)
6270465,1,0,0,java.math.BigDecimal,"The thing is I´ve being struggling for the past two days to get BigDecimal values from the database, but it seems that mysql is giving me a lesson."
6270465,1,0,0,java.math.BigDecimal,If I call getObject() the value is returned as BigDecimal (know this cause I made it throw a ClassCastException) Now my program is pretty simple.
6320209,1,0,28,java.math.BigDecimal,Java:Why should we use BigDecimal instead of Double in the real world?
6320209,1,0,28,java.math.BigDecimal,"When dealing with real world monetary values, I am advised to use BigDecimal instead of Double.But I have not got a convincing explanation except, ""It is normally done that way""."
6321208,2,0,16,java.math.BigDecimal,"While BigDecimal can store more precision than double, this is usually not required."
6321208,2,0,16,java.math.BigDecimal,"You can achieve the same results with double in most cases, but unless you know the techniques required, BigDecimal is the way to go in these case."
6321208,2,0,16,java.math.BigDecimal,"Even though money is not going to be large enough to need the precision of BigDecimal in 99% of use cases, it is often considered best practice to use BigDecimal because the control of rounding is in the software which avoids the risk that the developer will make a mistake in handling rounding."
6320218,2,0,6,java.math.BigDecimal,Another way to get to grips with the approximated value is to call upon the services of BigDecimal.
6320218,2,0,6,java.math.BigDecimal,"Now, don't rest on your laurels thinking you can just jump ship and only use BigDecimal."
6320218,2,0,6,java.math.BigDecimal,BigDecimal has its own collection of traps documented here.
6320228,2,0,0,java.math.BigDecimal,"When BigDecimal is used, it can store a lot more data then Double, which makes it more accurate, and just an all around better choice for the real world."
6320230,2,0,1,java.math.BigDecimal,BigDecimal stores floating point numbers with unlimited precision.
12711279,2,0,0,java.math.BigDecimal,"This is simpler, and avoids the cumbersome syntax and slow performance of BigDecimal."
6324309,2,0,1,java.math.BigDecimal,The simple answer is to use BigDecimal.
6337848,2,0,6,java.math.BigDecimal,You may want to go for BigDecimal.
6337848,2,0,6,java.math.BigDecimal,"A BigDecimal consists of an arbitrary   precision integer unscaled value and a   32-bit integer scale.The BigDecimal class provides operations for arithmetic, scale    manipulation, rounding, comparison, hashing, and format conversion."
6337848,2,0,6,java.math.BigDecimal,The toString() method   provides a canonical representation of a BigDecimal.
6403034,1,0,2,java.math.BigDecimal,"In that part of applications, that I try to compare, used only simple math and operations with BigDecimal (multiply, sqrt, divide and so on)."
6419302,2,1,0,java.math.BigDecimal,The correct way to keep (not print) a result of prescribed precision is to use the java.math.BigDecimal class as follows.
6459370,2,0,2,java.math.BigDecimal,If you are working with financials data dont use float or double just use java.math.BigDecimal
6469387,1,0,1,java.math.BigDecimal,Order of Magnitude of BigDecimal.
6469387,1,0,1,java.math.BigDecimal,"I am trying to measure the accuracy of a computed result (as a double), compared to a BigDecimal with the known correct result to arbitrary precision."
6469387,1,0,1,java.math.BigDecimal,I figure this can be done like so: (order of magnitude of correct result) - (order of magnitude of difference) > x I am having trouble finding a simple way to compute the order of magnitude of a BigDecimal though.
6469820,2,1,2,java.math.BigDecimal,"So I suppose you need to convert your double computed result to a BigDecimal, subtract the precise result, then convert back to a double and take the logarithm in base 10."
6473820,1,0,0,java.math.BigDecimal,Dojo DataGrid choosing correct store for BigDecimal[][] object.
6473820,1,0,0,java.math.BigDecimal,I have a BigDecimal[][] object that I would like to use as the store.
6473820,1,0,0,java.math.BigDecimal,I could use the JsonRestStore but my grid only needs to be loaded initially and I would have to go back to my service class and format my current BigDecimal[][] object into some kind of List<SomeNewObject> object.
6516926,2,1,1,java.math.BigDecimal,Suppose your BigDecimal[][] looks like: code.
6476957,1,0,6,java.math.BigDecimal,Extending BigDecimal?
6476957,1,0,6,java.math.BigDecimal,I've a fair bit of code using BigDecimal Class and I hate the clumsiness of the interface.
6476957,1,0,6,java.math.BigDecimal,"If I extend BigDecimal however, I'd define a new type and thus I'd have to re-define all methods to wrap them with my object or I won't be able to use the results with the augmented methods."
6476999,2,0,4,java.math.BigDecimal,"Don't extend BigDecimal, use a wrapper class around it (like you have) or another framework like Commons Math."
6477002,2,0,0,java.math.BigDecimal,"If you create a class that extends another class (i.e. BigDecimal in your case), the child class still has all properties of the parent (super) class."
6477002,2,0,0,java.math.BigDecimal,"any UsableBigDecimal objects would still be instances of BigDecimal, since it's their superclass."
6477002,2,0,0,java.math.BigDecimal,"You would be able to use them as you would any BigDecimal object, your static utility methods included."
6477005,2,0,2,java.math.BigDecimal,"If you need to use most of the methods from BigDecimal API, plus your own additional methods, then I'd suggest you inherit your custom class from BigDecimal."
6477005,2,0,2,java.math.BigDecimal,"In this way, you do not need to define wrappers for the BigDecimal methods that already work fine for you."
6477005,2,0,2,java.math.BigDecimal,"This scenario is the one where your custom class is a BigDecimal, plus something more."
6477005,2,0,2,java.math.BigDecimal,"If you need just a few methods from BigDecimal API, plus your own additional methods, then I'd suggest you do not derive from BigDecimal."
6477005,2,0,2,java.math.BigDecimal,"Instead you use internally a BigDecimal, and you delegate to it some of the functionalities exposed by your custom API."
6477005,2,0,2,java.math.BigDecimal,"This scenario is the one where your custom class has a BigDecimal, but it's not a BigDecimal."
6477005,2,0,2,java.math.BigDecimal,"Then in order to wrap a BigDecimal method to return your custom type: With inhertance, you'd do something like the following: code."
6491000,2,0,2,java.math.BigDecimal,"You can use the java.math.BigDecimal class to get unlimited precision what the Javadocs call ""arbitrary precision"" decimal arithmetics."
6494863,2,0,7,java.math.BigDecimal,"If you're interested in decimal places and therefore precise decimal values, you should typically be using java.math.BigDecimal to start with."
6496156,1,0,1,java.math.BigDecimal,Advanced rounding options with BigDecimal.
6496156,1,0,1,java.math.BigDecimal,Is there a way to make BigDecimal round based on place and not significant figures?
6496156,1,0,1,java.math.BigDecimal,"That is, I need 0.5 to round to 1 and 0.4 to round to 0, but since they are the same number of significant figures, BigDecimal refuses to round either of them."
6534780,2,0,1,java.math.BigDecimal,You can use BigDecimal for this :)
6534784,2,0,0,java.math.BigDecimal,You can use BigDecimal which offers a configurable precision.
6543285,2,0,3,java.math.BigDecimal,Use a BigDecimal instead.
6544232,1,0,2,java.math.BigDecimal,How do I map a BigDecimal in Hibernate so I get back the same scale I put in?
6544232,1,0,2,java.math.BigDecimal,"In Java, new BigDecimal(""1.0"") != new BigDecimal(""1.00"") i.e., scale matters."
6544232,1,0,2,java.math.BigDecimal,"If I set the scale on a BigDecimal to a particular value, save the BigDecimal to the database via Hibernate and then re-inflate my object, I get back a BigDecimal with a different scale."
6544232,1,0,2,java.math.BigDecimal,"Does there exist a Hibernate UserType which maps BigDecimal ""properly"", or do I have to write my own?"
21617719,2,0,1,java.math.BigDecimal,"Just for informational sake, I can tell you that the creation of the BigDecimal coming back from the database is done by the proprietary JDBC driver's implementation of the 'getBigDecimal' method of the database-specific 'ResultSet' sub-class."
6554729,2,0,1,java.math.BigDecimal,"To retain a value of 2 decimal places, use the BigDecimal class as follows: code."
6555894,2,0,0,java.math.BigDecimal,"You have two choices: (a) don't use floating-point, as per dlev's answer, and specifically use BigDecimal; (b) set the required precision when doing output, e.g."
6563494,1,0,1,java.math.BigDecimal,will it fit in Double or must use BigDecimal ?
6563617,2,1,2,java.math.BigDecimal,"But double can't be used to represent any decimal value, whereas BigDecimal can."
6563617,2,1,2,java.math.BigDecimal,"If it's used to represent monetary amounts, definitely use BigDecimal."
6569158,2,0,0,java.math.BigDecimal,"If you use BigDecimal, you could actually truncate the numbers, instead of trying to use Float's (lack of) precision."
6603691,2,0,1,java.math.BigDecimal,"Look into classes that encapsulate large numbers, such as BigInteger and BigDecimal."
6603732,2,0,1,java.math.BigDecimal,"This leads you to decisions about whether to use Java's BigDecimal, BigInteger, etc."
6607168,2,0,5,java.math.BigDecimal,May I redirect you to BigDecimal?
6648152,1,0,5,java.math.BigDecimal,"My question is, do I have to change the field to TextField<String>, and convert to domain object's type (BigDecimal) manually?"
6648152,1,0,5,java.math.BigDecimal,Or is there some way to use TextField<BigDecimal> (which allows e.g.
6649438,2,1,12,java.math.BigDecimal,"We needed our app to support a scale of 4 decimal places, and our custom BigDecimal converter nicely solves that problem too."
6649216,1,0,1,java.math.BigDecimal,"Currently, I have BigDecimal values with 3 decimal places shown in a JTable."
6649295,2,1,0,java.math.BigDecimal,"If you make them the same, it works you don't need BigDecimal if you only want to display things."
6668026,1,0,1,java.math.BigDecimal,I wonder why does BigDecimal change this scale ?
6668153,2,0,6,java.math.BigDecimal,Please read the javadoc for BigDecimal: http://download.oracle.com/javase/6/docs/api/java/math/BigDecimal.html Internally all BigDecimals get converted to a some internal format.
6668153,2,0,6,java.math.BigDecimal,"You could use scaleByPowerOfTen(int n) with n=6 for example  Oh, and by the way never use new BigDecimal, use BigDecimal.valueOf instead."
6668263,2,0,0,java.math.BigDecimal,This way the BigDecimal.toString() works.
6668263,2,0,0,java.math.BigDecimal,BigDecimal provides ability to calculate high precision numbers.
6671334,2,0,1,java.math.BigDecimal,"Few notes:  binary search seems like an overkill in your scenario, however it is actually the easiest implementation without any explicit loops and any custom logic findRange() returns range index you fall into (number of ranges is equal to number of steps + 1) You should definitely use BigDecimal, I used double only to make an example simpler Real tests should be shorter and more descriptive"
6690805,2,0,3,java.math.BigDecimal,"I would suggest that you stop using two arrays - that instead you create a single array of type Item (or Product, or whatever) where an Item has a price (ideally BigDecimal rather than float) and a name (as a string)."
6693785,1,0,5,java.math.BigDecimal,Hi I'm traying formating BigDecimal value by using DecimalFormat.format() methods.
6693839,2,0,1,java.math.BigDecimal,If you dont want any formatting marks in the number you should just call toString on the BigDecimal Object.
6705673,2,1,1,java.math.BigDecimal,"Multidimensional   arrays, such as BigDecimal[][], are also supported."
6713673,1,0,6,java.math.BigDecimal,I guess I'll try the other solutions such as BigDecimal
6713718,2,1,6,java.math.BigDecimal,"If you really care about precision, you should use BigDecimal http://download.oracle.com/javase/1,5.0/docs/api/java/math/BigDecimal.html"
6713724,2,0,2,java.math.BigDecimal,"If you really need arbitrary precision, use BigDecimal."
6713730,2,0,1,java.math.BigDecimal,first of Float is the wrapper class for the primitive float and doubles have more precision  but if you only want to calculate down to the second digit (for monetary purposes for example) use an integer (as if you are using cents as unit) and add some scaling logic when you are multiplying/dividing or if you need arbitrary precision use BigDecimal
6713758,2,0,0,java.math.BigDecimal,"If precision is vital, you should use BigDecimal to make sure that the required precision remains."
6713840,2,0,1,java.math.BigDecimal,new BigDecimal(double) converts the exact value of double without any implied rounding.
6746892,2,0,0,java.math.BigDecimal,If you need 30 decimal places of precision in Java you need to use BigDecimal.
6745817,2,0,2,java.math.BigDecimal,"When you need industrial strength precision, you need BigDecimal"
6745832,2,0,9,java.math.BigDecimal,Your best bet would be to use BigDecimal and perform the arithmetic with a particular precision.
6754881,1,0,16,java.math.BigDecimal,Java double vs BigDecimal for latitude/longtitude.
6754901,2,0,6,java.math.BigDecimal,BigDecimal becomes more important once you start manipulating currency or need to have more control over precision.
6754906,2,0,4,java.math.BigDecimal,"If you're concerned about precision, you should probably go with BigDecimal for lots of reasons covered in this post."
6754939,2,0,3,java.math.BigDecimal,if you want to control nano-robots in their nano-travels using nano-GPS - go for BigDecimal.
6780037,2,1,7,java.math.BigDecimal,"For arbitrary precision arithmetic, take a look at BigInteger and BigDecimal."
6787142,1,0,38,java.math.BigDecimal,BigDecimal equals() versus compareTo().
6787142,1,0,38,java.math.BigDecimal,Question: What's the difference between compareTo() and equals() in BigDecimal that compareTo can determine that x is equal to y?
6787142,1,0,38,java.math.BigDecimal,PS: I see that BigDecimal has an inflate() method on equals() method.
6787166,2,1,61,java.math.BigDecimal,"The answer is in the JavaDoc of the equals() method:  Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method)."
6787166,2,1,61,java.math.BigDecimal,In other words: equals() checks if the BigDecimal objects are exactly the same in every aspect.
6787327,2,0,0,java.math.BigDecimal,I see that BigDecimal has an inflate() method on equals() method.
6787327,2,0,0,java.math.BigDecimal,If you don't need that BigInteger and the unscaled value fits into a long BigDecimal seems to try to save space as long as possible.
6791970,1,0,12,java.math.BigDecimal,How to get biggest BigDecimal value.
6791970,1,0,12,java.math.BigDecimal,How can I get the largest possible value of a BigDecimal variable can hold?
6791970,1,0,12,java.math.BigDecimal,"(Preferably programmatically, but hardcoding would be ok too) EDIT OK, just realized there is no such thing since BigDecimal is arbitrary precision."
6791970,1,0,12,java.math.BigDecimal,"So I ended up with this, which is sufficiently good for my purpose: BigDecimal my = BigDecimal.valueOf(Double.MAX_VALUE)"
6792114,2,0,6,java.math.BigDecimal,"Looking at the source BigDecimal stores it as a BigInteger with a radix, code."
6792114,2,0,6,java.math.BigDecimal,"So the Largest BigDecimal would be, code."
6792135,2,0,1,java.math.BigDecimal,BigDecimal.MAX_VALUE is large enough that you shouldn't need to check for it.
6826904,2,1,12,java.math.BigDecimal,"You should use java.lang.Math.round() for double and float types, or java.math.BigDecimal.round(MathContext) for BigDecimal types You might be better off using BigDecimal for this"
6829490,2,0,1,java.math.BigDecimal,Convert it into a BigDecimal liek this: code.
6842599,1,0,2,java.math.BigDecimal,Performance of BigDecimal.valueOf( double d ).
6842599,1,0,2,java.math.BigDecimal,It seemed to be running slower than I would expect and I found that the slow part was BigDecimal.valueOf( consumption ) and that is slow because of the Double.toString() call that is happening internally.
6842599,1,0,2,java.math.BigDecimal,Perhaps by avoiding the double -> BigDecimal conversion.
6842599,1,0,2,java.math.BigDecimal,I need to the result to be a BigDecimal but I don't mind how the random calculation is done prior to that.
6842740,2,1,7,java.math.BigDecimal,"Instead of calculating a double you want to round to two decimal places, you can create an int value which is shifted by two places i.e. where 1234 represents 12.34 and then set the scale when you create the BigDecimal."
6864522,2,1,12,java.math.BigDecimal,I would strongly recommend that you use BigDecimal instead when precise decimal values matter (as it sounds like they do here).
6864607,2,0,2,java.math.BigDecimal,"You should definitely heed other advice posted in answers here and use BigDecimal if you really want the output to match the input, since some floating-point values aren't what   you think they are when representing them in a computer."
6869231,2,0,5,java.math.BigDecimal,"If you're concerned about preserving decimal values exactly, you should use BigDecimal to start with - double is fundamentally inappropriate, as a binary floating point type."
6869231,2,0,5,java.math.BigDecimal,"If you need to distinguish between those two values, you should definitely be using BigDecimal."
6881840,2,0,0,java.math.BigDecimal,It's also not clear whether the encryption relies on the scale of the BigDecimal (i.e. where 1.0 and 1.00 are represented differently).
6882255,1,0,1,java.math.BigDecimal,implementing price of item using BigDecimal in java.
6882255,1,0,1,java.math.BigDecimal,"In a web application ,I want to model an ItemForSale which has a price field.I read elsewhere that float or double should not be used for currency fields due to rounding errors and BigDecimal is the proper type for this purpose.I created these classes code."
6882304,2,0,3,java.math.BigDecimal,"There is usually no need to get into the complexities, and speed issues, of BigDecimal."
6882303,2,1,3,java.math.BigDecimal,"If you're parsing user input, you should probably be using DecimalFormat instead of the BigDecimal constructor - that way it will use the appropriate cultural information."
6882303,2,1,3,java.math.BigDecimal,(Use setParseBigDecimal to make DecimalFormat parse to BigDecimal instead of double.)
6882303,2,1,3,java.math.BigDecimal,"Then instead of converting the BigDecimal values to doubles, use: code."
6902206,2,0,1,java.math.BigDecimal,See How to resolve a Java Rounding Double issue  To resolve it you can change to BigDecimal instead of double as mentioned in the accepted answer to the linked question.
6910994,2,0,0,java.math.BigDecimal,"Depending on the usage of your variables, you may want to use the BigDecimal class."
6942811,2,0,2,java.math.BigDecimal,See this article and Retain precision with Doubles in java for details For accurate floating point arithmetic use BigDecimal
6952382,2,1,6,java.math.BigDecimal,"If you seek accuracy, use java.math.BigDecimal object instead."
6952382,2,1,6,java.math.BigDecimal,Update: This is how I took your example and used BigDecimal to achieve your expected result: code.
6958612,1,0,0,java.math.BigDecimal,Error with BigDecimal calculation regarding User Input .
6958612,1,0,0,java.math.BigDecimal,I tried to use a for loop with the BigDecimal math class within the calculations etc.
6958612,1,0,0,java.math.BigDecimal,"Like I said, the 'red lines' that eclipse uses to show there is an error are only under the words, ""valueOf"" within my BigDecimal calculations."
6958642,2,0,2,java.math.BigDecimal,There's no method BigDecimal.valueOf(BigDecimal).
6958642,2,0,2,java.math.BigDecimal,itemPrice and itemQuantity are already BigDecimal values - you don't need any conversion: code.
6970907,2,0,2,java.math.BigDecimal,"Just look at the BigDecimal API: http://download.oracle.com/javase/1,5.0/docs/api/java/math/BigDecimal.html#equals(java.lang.Object)"
6979999,2,0,0,java.math.BigDecimal,Perhaps BigDecimal is an adequate way for you.
6979999,2,0,0,java.math.BigDecimal,"http://download.oracle.com/javase/1,5.0/docs/api/java/math/BigDecimal.html"
6980010,2,1,2,java.math.BigDecimal,"I'm pretty sure primitives won't get you there, but the BigDecimal class is as good as it gets (for everything except trigonometry)."
7008265,2,1,4,java.math.BigDecimal,"Note however, that a BigDecimal might be bigger than what fits into a double or long."
7011387,1,0,4,java.math.BigDecimal,Encoding BigDecimal with JSON-Lib for Java.
7011387,1,0,4,java.math.BigDecimal,My question is: What's the best way to encode BigDecimal values (values representing money) in that library?
7011387,1,0,4,java.math.BigDecimal,Is it just serializing BigDecimal objects as strings with my desired precision?
7011537,2,1,1,java.math.BigDecimal,"According to this message, JSON-Lib supports BigDecimal via the JSONUtils class."
7037739,2,0,0,java.math.BigDecimal,You will probably have to use a BigDecimal with a custom MathContext.
7037745,2,1,4,java.math.BigDecimal,"Note: double has limited accuracy and suffers from ""small remainder error"" issues, but using Math.round() will solve that problem nicely without having the hassle of dealing with BigDecimal (we aren't calculating inter-planetary rocket trajectories here)."
7038042,2,1,5,java.math.BigDecimal,"Note that Number also has BigDecimal and BigInteger as subclasses, which can represent values outside the range of double."
7076378,2,0,6,java.math.BigDecimal,"If you want more precision, use setParseBigDecimal and parse will return a BigDecimal."
7076378,2,0,6,java.math.BigDecimal,The double is rounded slightly before printing and the BigDecimal shows you the exact values the double represents.
7076242,2,0,5,java.math.BigDecimal,You can use BigDecimal.setParseBigDecimal to allow the number format to return a BigDecimal from the parse method.
7083663,2,1,10,java.math.BigDecimal,"EDIT: Now if you perform the result with decimal floating point arithmetic using BigDecimal, the value really is exactly 5.6, and there are no problems: code."
7089785,2,0,0,java.math.BigDecimal,Even for BigDecimal division you need to provide appropriate rounding.
7089785,2,0,0,java.math.BigDecimal,If you want to see the representation and rounding error use BigDecimal as it does an exact conversion from double.
7086995,2,0,2,java.math.BigDecimal,IF you're looking for an exact representation of the number try using BigDecimal instead of Double code.
7106331,2,0,0,java.math.BigDecimal,"If you need absolutely sure precision, you might want to use BigDecimal."
7106265,2,0,3,java.math.BigDecimal,Use BigDecimal instead.
7106270,2,0,0,java.math.BigDecimal,Use BigDecimal if you need arbitrary precision.
7106292,2,1,5,java.math.BigDecimal,"This can be revealed by creating a BigDecimal out of it, (which provides arbitrary precision) and print the BigDecimal: code."
7106292,2,1,5,java.math.BigDecimal,"If you're working with currencies, I strongly suggest you either  Let prices etc be represented by BigDecimal which allows you to store numbers as 0.1 accurately, or Let an int store the number of cents (as opposed to having a double store the number of dollars)."
7109561,2,0,2,java.math.BigDecimal,"If you're starting to hit the maximum values that can be represented by primitives in Java, then you may need to move to BigInteger and BigDecimal."
7109561,2,0,2,java.math.BigDecimal,Try playing around with the BigDecimal.toBigInteger() method coupled with the toString() methods on BigDecimal and BigInteger.
7118648,2,1,4,java.math.BigDecimal,"This is correct; the compiler has no way to verify that list.get(0) and list.get(1) are of the same type; one might be Object1<String, Integer> and the other Object1<BigDecimal, Double>."
7124475,2,1,4,java.math.BigDecimal,This works because BigDecimal.valueOf does some extra rounding based on how double would appear if you printed it.
7124475,2,1,4,java.math.BigDecimal,However I wouldn't use BigDecimal unless performance/simplicity is not an issue.
7156975,1,0,0,java.math.BigDecimal,JPAController getReference problem with BigDecimal.
7156975,1,0,0,java.math.BigDecimal,The Primary key is of BigDecimal type with 8 scale and 15 precision in both the tables.
7156975,1,0,0,java.math.BigDecimal,"Now my Question is When i call the create method i get the error in public  T getReference(Class entity Class, Object primary Key)  as BigDecimal with 3 scale and 5 Precision,if take 42.20112012 as reference key then i got error as,  code."
7157080,2,0,2,java.math.BigDecimal,"When you choose BigDecimals as your primary key, then you must use the exact representation of the BigDecimal to obtain a reference to an entity."
7157080,2,0,2,java.math.BigDecimal,"In simpler words, going by the definition of the equals() method of BigDecimal:  Compares this BigDecimal with the specified Object for equality."
7157080,2,0,2,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal   only if they are equal in value and scale (thus 2.0 is not equal to   2.00 when compared by this method)."
7188836,2,1,1,java.math.BigDecimal,It works with all type(including BigDecimal) of Primary/Reference Key.
7170102,2,0,0,java.math.BigDecimal,"And I want this precision to be as tight/precise as possible   You may choose BigDecimal, where you can specify, how precise you like to get, but of course you're somehow limited by RAM, by CPU-time, by the limits of the JVM."
7170519,1,0,0,java.math.BigDecimal,"The Object could be Integer, BigDecimal, String, or Date."
7170989,2,1,0,java.math.BigDecimal,"Since Integer, BigDecimal, Date, and String all implements Serializable, I ended up using Serializable in Java and BLOB in Oracle.., like so.. code."
7186204,1,0,19,java.math.BigDecimal,BigDecimal - to use new or valueOf.
7186204,1,0,19,java.math.BigDecimal,I came across two ways of getting BigDecimal object out of a double d. code.
7186204,1,0,19,java.math.BigDecimal,"In general (not just BigDecimal), what is recommended - new or valueOf?"
7186240,2,0,1,java.math.BigDecimal,"Basically valueOf(double val) just does this: return new BigDecimal(Double.toString(val)); Therefore -> yep, a new object will be created :)."
7186298,2,1,42,java.math.BigDecimal,"Those are two separate questions: ""What should I use for BigDecimal?"""
7186298,2,1,42,java.math.BigDecimal,"For BigDecimal: this is a bit tricky, because they don't do the same thing."
7186298,2,1,42,java.math.BigDecimal,BigDecimal.valueOf(double) will use the canonical String representation of the double value passed in to instantiate the BigDecimal object.
7186298,2,1,42,java.math.BigDecimal,In other words: The value of the BigDecimal object will be what you see when you do System.out.println(d).
7186298,2,1,42,java.math.BigDecimal,"If you use new BigDecimal(d) however, then the BigDecimal will try to represent the double value as accurately as possible."
7186298,2,1,42,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
7186298,2,1,42,java.math.BigDecimal,"In general, if the result is the same (i.e. not in the case of BigDecimal, but in most other cases), then valueOf() should be preferred: it can do caching of common values (as seen on Integer.valueOf()) and it can even change the caching behaviour without the caller having to be changed."
9713581,2,0,7,java.math.BigDecimal,"If you are using your BigDecimal objects to store currency values, then I strongly recommend that you do NOT involve any double values anywhere in their calculations."
7199890,1,0,2,java.math.BigDecimal,Storing monetary values as Doubles but using BigDecimal to calculate values.
7704727,2,1,2,java.math.BigDecimal,As long as every piece of your information pipeline uses BigDecimal.valueOf and  BigDecimal(double) is used absolutely nowhere then the implicit rounding of valueOf might prevent the worst.
7200907,2,0,1,java.math.BigDecimal,BigDecimal#toPlainString() will give the decimal part .
7201272,2,0,1,java.math.BigDecimal,As stated by amal you can simply use BigDecimal.toPlainString(): code.
7252499,2,0,0,java.math.BigDecimal,"If you want ""accurate"" math in Java, you should use the BigDecimal class, rather than either of the built-in floating point primitive types."
7252499,2,0,0,java.math.BigDecimal,"Please note that the recommended constructor for BigDecimal uses a String, not any of the numeric types."
7252538,2,0,1,java.math.BigDecimal,In such cases use BigDecimal.
13975620,2,0,4,java.math.BigDecimal,"Key Features:  Uses BigDecimal for calculation and result Single class implementation, very compact No dependencies to external libraries Precision and rounding mode can be set Supports variables Standard boolean and mathematical operators Standard basic mathematical and boolean functions Custom functions and operators can be added at runtime  Examples: code."
7274108,2,0,0,java.math.BigDecimal,"Nonetheless, the key here is to actually use BigDecimal."
7286681,1,0,11,java.math.BigDecimal,"I've researched BigDecimal and BigInteger, however I haven't found a way to create this division with them, is there any other way to do this division in Java without having precision errors??"
7289495,2,0,0,java.math.BigDecimal,"Use BigDecimal if you need exact numerical representation at the cost of not having hardware enabled performance, of course."
7297982,2,0,16,java.math.BigDecimal,"Also note that this will start failing for very large integers, as they can't be exactly represented in double anyway - you may want to consider using BigDecimal instead if you're dealing with a very wide range."
7326105,1,0,2,java.math.BigDecimal,Invoking a Java method from Ruby that takes a Java primitive double with a Ruby BigDecimal.
7326105,1,0,2,java.math.BigDecimal,I'm getting an error when attempting to call a method on a Java object from JRuby when the Java method's signature has a primitive double and the parameter I pass is a Ruby BigDecimal.
7342320,2,0,2,java.math.BigDecimal,"If you need   precise numerical computations without roundoff errors, use the   BigDecimal class, which is introduced later in this chapter."
7346447,2,0,1,java.math.BigDecimal,"If you want more accuracy, use double which is 64-bit and has up to 16 digits of accuracy (in fact, always use double or BigDecimal) code."
7346386,2,1,1,java.math.BigDecimal,BigDecimal's are really decimal numbers and not floating point numbers.
7392606,2,0,1,java.math.BigDecimal,"If you need a number, for instance to compute with, use a BigDecimal."
7392606,2,0,1,java.math.BigDecimal,EDIT How to use a BigDecimal.
15713559,2,0,0,java.math.BigDecimal,Always work with BigDecimal when you want to compare floats or doubles and always use the BigDecimal constructor with the String parameter!
7392552,2,0,3,java.math.BigDecimal,If you use BigDecimal instead (and many people do) it has rounding built in.
7408694,2,0,0,java.math.BigDecimal,"As others said, using BigDecimal or fixed-point integer computations (converting everything to cents) is probably best for currency; to learn more about floating point, you could start at The Floating-Point Guide- What Every Programmer Should Know About Floating-Point Arithmetic."
7408597,2,1,6,java.math.BigDecimal,I recommend using BigDecimal or doing every calculation in cents.
7419421,1,0,3,java.math.BigDecimal,Remove leading zero and delimiter char for BigDecimal.
7419421,1,0,3,java.math.BigDecimal,"These values treated by our code as BigDecimal,as far we operate with money."
7419421,1,0,3,java.math.BigDecimal,"Perhaps BigDecimal class has standard method something like trimLeadingZeroes(),but can't find any."
7535935,2,0,1,java.math.BigDecimal,You could use the string representation of value (a BigDecimal) and StringUtils.substringAfter to do this: code.
7419506,2,0,1,java.math.BigDecimal,Have you tried calling BigDecimal.unscaledValue?
7492264,2,0,1,java.math.BigDecimal,Conversion from BigDecimal to String:  code.
7422803,1,0,19,java.math.BigDecimal,"But using BigDecimal instead is not really an option, because I have some extensive computation with multiple points going on that still needs to be reasonably fast."
7423086,2,0,4,java.math.BigDecimal,"If you want truly arbitrary precision in decimal, look into this library: http://download.oracle.com/javase/1.4.2/docs/api/java/math/BigDecimal.html"
7452124,2,0,4,java.math.BigDecimal,Just use BigDecimal code.
7462550,2,0,1,java.math.BigDecimal,You can use BigDecimal class which can store large values for your calculations.
7471558,2,0,2,java.math.BigDecimal,"You should not use float/double or raw integers for monetary values, use BigDecimal instead: http://download.oracle.com/javase/1.4.2/docs/api/java/math/BigDecimal.html This makes it unnecessary to do that forced double->float cast and i hope the errors disappear."
7472501,2,0,0,java.math.BigDecimal,"For java calculations, you must use BigDecimal."
7701621,2,0,0,java.math.BigDecimal,"As another example, I recently did some currency work in Java where a CurrencyValue divided by a CurrencyValue gave a BigDecimal, i.e. an exchange rate; a CurrencyValue multipled or divided by a BigDecimal gave another CurrencyValue, etc."
7485128,2,0,1,java.math.BigDecimal,If you want to work with accurate values use java.math.BigDecimal instead of Float or Double (the API is a bit obscure).
7485133,2,1,3,java.math.BigDecimal,BigDecimal will allow you to define floating point values exactly.
7485137,2,0,3,java.math.BigDecimal,"It sounds like you might want Map<BigDecimal, Object> if you're performing operations which are logically ""accurate"" within decimal arithmetic."
7495442,2,0,5,java.math.BigDecimal,"In the second case we're dealing entirely with BigDecimal, and always multiplying - there's no reason for anything to go wrong."
7495442,2,0,5,java.math.BigDecimal,"In the first case you're converting the BigDecimal to a double, so your code is effectively code."
7495442,2,0,5,java.math.BigDecimal,"This has nothing to do with BigDecimal, and everything to do with double."
7495442,2,0,5,java.math.BigDecimal,You should almost never be converting between BigDecimal and double though - the kind of values which are appropriate for use in BigDecimal are almost always inappropriate to represent as double values.
7514800,2,0,1,java.math.BigDecimal,Specification does not say it supports Java collections:  The following list specifies all data types that are allowed as   scalars or as anydimensional arrays in open MBeans:  java.lang.Void  java.lang.Short java.lang.Boolean  java.lang.Integer java.lang.Byte  java.lang.Long java.lang.Character  java.lang.Float java.lang.String  java.lang.Double java.math.BigDecimal  java.math.BigInteger java.util.Date  javax.management.ObjectName javax.management.openmbean.CompositeData (interface) javax.management.openmbean.TabularData (interface)   You can use either arrays or TabularData.
7518810,2,0,0,java.math.BigDecimal,"For flexibility in rounding, consider using BigDecimal like below: code."
7525284,1,0,3,java.math.BigDecimal,BigDecimal Problem in java.
7525300,2,1,9,java.math.BigDecimal,"You've given the constructor ten digits after the decimal point, so even though all of them are zero, BigDecimal has decided to set its internal scale to 10."
7525300,2,1,9,java.math.BigDecimal,"As to equals, the Javadoc says:  Compares this BigDecimal with the specified Object for equality."
7525300,2,1,9,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal   only if they are equal in value and scale (thus 2.0 is not equal to   2.00 when compared by this method)."
7525300,2,1,9,java.math.BigDecimal,Don't directly compare BigDecimal to String as this won't work.
7525305,2,0,5,java.math.BigDecimal,BigDecimal.equals also includes scale (which is 10 in your case) and thus fails.
7525309,2,0,1,java.math.BigDecimal,"The BigDecimal uses a scale of 10 because you've given it ten digits after the decimal point, which answers your first point."
7525309,2,0,1,java.math.BigDecimal,"In the second, you're comparing a String with a BigDecimal."
7550337,1,0,19,java.math.BigDecimal,What type would you map BigDecimal in Java/Hibernate in MySQL?
7550337,1,0,19,java.math.BigDecimal,On the Java side this means using BigDecimal but when using Hibernate/JPA and MySQL 5 what would be the appropriate MySQL data type to make that column?
7550509,2,1,24,java.math.BigDecimal,The recommended Java mapping for the DECIMAL and NUMERIC  types is   java.math.BigDecimal.
7550509,2,1,24,java.math.BigDecimal,"The java.math.BigDecimal  type provides math   operations to allow BigDecimal types  to be added, subtracted,   multiplied, and divided with other  BigDecimal types, with integer   types, and with floating point types."
7557755,1,0,0,java.math.BigDecimal,"Suppose that I have a JPA-annotated class called MyData with a primary identifier field (BigDecimal type called ""primaryID""), and two Boolean fields called ""fieldA"" and ""fieldB""."
7564450,2,0,1,java.math.BigDecimal,When you perform a calculation you have to use BigDecimal or round the result or transform the calculation to minimise error.
7562990,2,1,5,java.math.BigDecimal,"You should use BigDecimal, in this case the remainder method for precise arithmetic involving decimals."
7567136,1,0,2,java.math.BigDecimal,"for BigDecimal, Point, and so on I decided to make this interface generic."
7572309,1,0,3,java.math.BigDecimal,Any neat way to limit significant figures with BigDecimal.
7572309,1,0,3,java.math.BigDecimal,I want to round a Java BigDecimal to a certain number of significant digits (NOT decimal places) eg to 4 digits: 12.3456 => 12.35 123.456 => 123.5 123456 => 123500 etc.
7572309,1,0,3,java.math.BigDecimal,"The basic problem is how to find the order of magnitude of the BigDecimal, so I can then decide how many place to use after the decimal point."
7572519,2,0,0,java.math.BigDecimal,"Since BigDecimal is basically a string, perhaps this: code."
7572524,2,1,7,java.math.BigDecimal,"No String conversion is necessary, it is based purely on BigDecimal arithmetic and therefore as efficient as possible, you can choose the RoundingMode and it is small."
7587831,2,0,0,java.math.BigDecimal,You should have said that you would add the numbers in each thread as BigDecimal objects.
7587831,2,0,0,java.math.BigDecimal,"When there are 10 objects in the queue, dump the queue and iterate through each BigDecimal, adding each number."
7599404,2,0,1,java.math.BigDecimal,"It could be BigDecimal or Long or ... Alternatively, cant you just call the primary key getter method on the object - I'd have hoped it would be set by that point."
7618812,1,0,3,java.math.BigDecimal,"So here's it: assuming we follow the ""best practice"" of using BigDecimal for financial calculations, how can one handle stuff (computations) which throw an exception?"
7618840,2,1,6,java.math.BigDecimal,The answer is to use one of the BigDecimal.divide() methods which specify a RoundingMode.
7636544,2,0,2,java.math.BigDecimal,"The MyClass.exchangeEuroToDollar(BigDecimal) method overrides the exchangeEuroToDollar(BigDecimal) implementation that's contained within the ExchangeToDollar class in Converter.jar, meaning that when you call the method on an instance of MyClass, your implementation will be executed."
7638100,1,0,0,java.math.BigDecimal,BigDecimal - material decimal places.
7638100,1,0,0,java.math.BigDecimal,I have a BigDecimal value and I want to know if the number of decimal places it has is outside a boundary.
7638100,1,0,0,java.math.BigDecimal,If BigDecimal is 123.456 and my decimal places boundary is 2 then   this would be an error However 123.450 with a boundary of 2 is ok as I consider the 0 to be immaterial for this test.
7638100,1,0,0,java.math.BigDecimal,I am a bit unsure about BigDecimal with it's scale/unscaled implementation.
7638116,2,1,4,java.math.BigDecimal,BigDecimal has stripTrailingZeros().
7638116,2,1,4,java.math.BigDecimal,"OR you could use BigDecimal.setScale(2, RoundingMode.UNNECESSARY) which will throw an Exception if there are non-zeros."
15371737,2,0,0,java.math.BigDecimal,"Without the addScalar's, I would get a java.lang.IllegalArgumentException: argument type mismatch because Hibernate was turning Oracle's Number type into a BigDecimal but notifyStateId and parentId are Long types on MyState."
7674391,1,0,3,java.math.BigDecimal,There is a PMD rule saying one should avoid to instantiate BigInteger or BigDecimal if there is a predefined constant.
7676565,2,1,5,java.math.BigDecimal,"In java if you want accurate calculations for large numbers with fractions, you should use java.math.BigDecimal class."
7676587,2,0,0,java.math.BigDecimal,"As others have said, though, use BigDecimal if you're worried about size or accuracy."
7676636,2,0,0,java.math.BigDecimal,"If you want to represent the number differently and it is not an integer, you can try BigDecimal (or BigInteger for legitimate integers too big for a long)."
7712768,2,1,5,java.math.BigDecimal,"If you want to use MySQL's DECIMAL, try Java's java.math.BigDecimal instead of java.lang.Float."
7721439,2,0,14,java.math.BigDecimal,"If you are just wanting to check if a number fits into a long value or an int value, you could try using it through BigDecimal."
25903634,2,0,3,java.math.BigDecimal,"If, for whatever reason, you don't want to use a BigDecimal you can cast your double to an int to truncate it."
7747511,2,0,5,java.math.BigDecimal,"If you need decimal places, use a BigDecimal, which has a setScale() method for truncation, or use DecimalFormat to get a String."
7749207,2,1,2,java.math.BigDecimal,"To ensure accurate math, try using the java.math.BigDecimal type."
7751113,2,1,3,java.math.BigDecimal,"This can probably be simplified a lot better... Of course you can go with BigDecimal, but IMO that's smashing an ant with a sledgehammer."
7751160,2,0,5,java.math.BigDecimal,"If you need decimals, your output format should be BigDecimal or String."
7755417,1,0,1,java.math.BigDecimal,Hibernate - BigDecimal Mapping Precision.
21617881,2,0,2,java.math.BigDecimal,I can tell you that the creation of the BigDecimal value coming back from the database is done by the proprietary JDBC driver's implementation of the getBigDecimal method of the database-specific ResultSet sub-class.
21617881,2,0,2,java.math.BigDecimal,"It seems that some implementations of the getBigDecimal method will either use the precision/scale defined in the database schema, or will try to optimise the BigDecimal returned by only defining the minimum precision/scale required to hold the value retrieved."
7815426,2,1,3,java.math.BigDecimal,Try the BigDecimal class.
7815426,2,1,3,java.math.BigDecimal,"http://download.oracle.com/javase/1,5.0/docs/api/java/math/BigDecimal.html"
7819553,1,0,3,java.math.BigDecimal,It is showing an error message that   The method divide(BigDecimal) in the type BigDecimal is not applicable for the arguments (int)  Can anyone help me to do the division?
7819810,2,0,0,java.math.BigDecimal,The thing about BigDecimal and BigInteger is that they mostly operate with instances of these classes and not with primitive types.
7833012,2,1,4,java.math.BigDecimal,"Otherwise, if you really have your result as string, always, then the getAsX methods can be implemented via methods like Integer.parseInt(str), new BigDecimal(str) and new Date(Long.parseLong(str)) (or using a DateFormat)."
7847301,1,0,6,java.math.BigDecimal,BigDecimal optimal scale for encoding.
7847301,1,0,6,java.math.BigDecimal,I need to encode a BigDecimal compactly into a ByteBuffer to replace my current (rubbish) encoding scheme (writing the BigDecimal as a UTF-8 encoded String prefixed with a byte denoting the String length).
7847301,1,0,6,java.math.BigDecimal,Given that a BigDecimal is effectively an integer value (in the mathematical sense) and an associated scale I am planning to write the scale as a single byte followed by a VLQ encoded integer.
7847301,1,0,6,java.math.BigDecimal,How can I determine the optimal scale for a given BigDecimal?
7847301,1,0,6,java.math.BigDecimal,"In other words, how I can determine the minimum possible scale I set assign a BigDecimal without having to perform any rounding?"
7847356,2,1,7,java.math.BigDecimal,BigDecimal#stripTrailingZeros seems to be doing this.
7855423,2,0,1,java.math.BigDecimal,BigDecimal does that.
7854202,1,0,6,java.math.BigDecimal,"BigInteger works well for calculating permutations and combinations, and BigDecimal seems like it might be a good candidate for the non-integer values, but is there something more suited to dealing with percentages already?"
7854313,2,1,5,java.math.BigDecimal,Otherwise I think BigDecimal is your best choice.
7855410,2,0,2,java.math.BigDecimal,"Options include a DecimalFormat to ""fix"" the formatting or BigDecimal to represent exact values."
7867785,2,0,6,java.math.BigDecimal,BigInteger and BigDecimal are the classes you're looking for.
7925059,2,0,1,java.math.BigDecimal,You might want to consider switching to the BigDecimal class.
7931840,2,1,1,java.math.BigDecimal,"So as it turns out, the returned type for an ""int"" from a sql.rows() is a BigDecimal for the key."
7931840,2,1,1,java.math.BigDecimal,I converted my string type of employee ID to a BigDecimal and it worked.
7936313,1,0,0,java.math.BigDecimal,Am I using the BigDecimal class correctly?
7936313,1,0,0,java.math.BigDecimal,"After getting ridiculous double errors, it seemed using BigDecimal was the way to go."
7936313,1,0,0,java.math.BigDecimal,"Here's the code:  http://pastebin.com/rpbNJnHH I've never had to use BigDecimal before, so I was hoping someone here could give it a look over and make sure there weren't any stupid mistakes."
7936313,1,0,0,java.math.BigDecimal,So I switched to BigDecimal.
7937664,2,0,1,java.math.BigDecimal,"Rather than using double or BigDecimal, I would use int values because this is the type you need at the end of the day and unless your screen has more than 2 billion pixels across or down, you don't need long, double or BigDecimal."
7955999,1,0,4,java.math.BigDecimal,"For instance, if my input was 1, 2.0, 3 (and 2 empty inputs for the last two elements, they are not mandatory), I am receiving the following array [1, ""2.0"", 3, """", """"], where 1 and 3 are of type BigDecimal, and 2.0 and the last 2 members are empty strings."
7955999,1,0,4,java.math.BigDecimal,BigDecimal cannot be cast to Double; it is obvious that the string cast attempts will also fail.
7964772,1,0,2,java.math.BigDecimal,"How to convert number value representing eg percents, currency to string and back to BigDecimal by using DecimalFormat."
7964772,1,0,2,java.math.BigDecimal,"Hi I'd like know how to format BigDecimal representing numbers,percents,moneys,integers to String in Locales and from String back to BigDecimal."
7965227,2,1,6,java.math.BigDecimal,"While 10 digits should be preservable with no problems, if you're interested in the actual digits used, you should probably be using BigDecimal instead."
7978385,2,0,2,java.math.BigDecimal,You need to switch to either floating point numbers (Double.parseDouble()) or to BigDecimal (new BigDecimal()).
7980769,2,1,0,java.math.BigDecimal,"The Basic annotation can be applied to a   persistent property or instance variable of any of the following   types: Java primitive types, wrappers of the primitive types,   java.lang.String, java.math.BigInteger, java.math.BigDecimal,   java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time,   java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, and   any other type that implements Serializable."
7997959,2,0,1,java.math.BigDecimal,I would probably get rid of the BigDecimal objects and store the rates (and the ceilings) as CONSTANTS (FINAL variables).
7998555,2,0,1,java.math.BigDecimal,Conversion to BigDecimal is left as an exercise for the reader.
8002603,1,0,25,java.math.BigDecimal,"BigDecimal, the type of obj is Integer as it should be."
8010700,2,0,1,java.math.BigDecimal,"Depending if you have to marshal and unmarshall doubles, the solution might be as simple as overriding the mapping to something such as a BigDecimal at the global level (with the understanding that although doubles and decimals are totally different things, you seem to want a decimal representation), or to use a datatype converter (the link above gives you examples for all these options)."
8010288,1,0,1,java.math.BigDecimal,BigDecimal locale specific parsing - inconsistency between Wicket's BigDecimalConverter and java.math.BigDecimal.
8010288,1,0,1,java.math.BigDecimal,"When it comes to parsing numbers with decimal separators from string, Wicket's BigDecimalConverter behaves differently than BigDecimal's (String val) constructor."
8010288,1,0,1,java.math.BigDecimal,Why doesn't BigDecimalConverter behave the same way as BigDecimal in this case?
8010889,2,1,6,java.math.BigDecimal,"The BigDecimal class implements its own validation algorithm on the input, which is throwing the NumberFormatException."
8037824,2,1,1,java.math.BigDecimal,The JasperReports version 3.7.1 (supported by DynamicJasper version 3.1.9) supports only this classes for text field's expression:   java.lang.Boolean java.lang.Byte java.util.Date java.sql.Timestamp java.sql.Time java.lang.Double java.lang.Float java.lang.Integer java.lang.Long java.lang.Short java.math.BigDecimal java.lang.Number java.lang.String  You can make sure this fact looking at source code of this method from net.sf.jasperreports.engine.design.JRVerifier class: code.
8035640,2,0,0,java.math.BigDecimal,In order to confirm this you can change the float into double or use BigDecimal.
8035657,2,0,2,java.math.BigDecimal,You'll likely find you need to perform the calculations using the BigDecimal class.
8046850,2,1,10,java.math.BigDecimal,"If exact decimal values are important to you, you should consider using BigDecimal instead."
8050281,1,0,0,java.math.BigDecimal,Is BigDecimal not understood by the driver or make the driver do something wrong?
8054255,2,0,0,java.math.BigDecimal,If you want exact calculations use BigDecimal although you can't use operators then.
8064878,1,0,6,java.math.BigDecimal,I've carefully studied Jonik's entry about customizing BigDecimal formatting in Wicket.
8073912,1,0,5,java.math.BigDecimal,"Why do we need to convert the double into a string, before we can convert it into a BigDecimal?"
8073912,1,0,5,java.math.BigDecimal,"I was wondering, when creating the BigDecimal why did they chose to convert the double to a string (using the Double.toString) instead of simply using the double itself?"
8073985,2,0,1,java.math.BigDecimal,It seems to me that the key is in this statement:  BigDecimal(double val)              Translates a double into a BigDecimal which is the exact decimal representation of the double's binary floating-point value.
8073985,2,0,1,java.math.BigDecimal,versus  BigDecimal(String val)              Translates the string representation of a BigDecimal into a BigDecimal.
8073985,2,0,1,java.math.BigDecimal,"By going to String first, you just see the double as a BigDecimal, but if construct directly from a double, you're working with the bit-level representation, and I'm willing to bet you'd get a subtly different answer."
8073992,2,1,7,java.math.BigDecimal,It's because the result of BigDecimal(double) constructor is unpredictable as mentioned in javadoc.
8073992,2,1,7,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625 The String constructor, on the other hand, is perfectly predictable:   writing new BigDecimal(""0.1"") creates a BigDecimal which is exactly   equal to 0.1, as one would expect."
8074262,2,0,1,java.math.BigDecimal,So we must be aware of our requirement to choose java.math.BigDecimal.valueOf(double val) or java.math.BigDecimal.BigDecimal(double val).
8073939,2,0,1,java.math.BigDecimal,Use the static method BigDecimal.valueOf(double val): To use in your code: code.
8073972,2,0,4,java.math.BigDecimal,"From the documentation here for the constructor BigDecimal(String val) :  Note: For values other than float and double NaN and ±Infinity, this   constructor is compatible with the values returned by   Float.toString(float) and Double.toString(double)."
8073972,2,0,4,java.math.BigDecimal,"This is generally   the preferred way to convert a float or double into a BigDecimal, as   it doesn't suffer from the unpredictability of the BigDecimal(double)   constructor."
8081897,2,0,4,java.math.BigDecimal,"Instead of using doubles for decimal arithemetic, please use  java.math.BigDecimal."
8091083,1,0,4,java.math.BigDecimal,"On the other hand, sometimes we require that the calculations be done very precisely (and there are use cases for in between, where we would implement our own way of doing multiplication/division/addition/subtraction/power etc that is more precise that float * float (or double * double, I am aware that float is a bad choice), but faster than BigDecimal.multiply(BigDecimal)... or even something like apfloat rather than BigDecimal)."
8091083,1,0,4,java.math.BigDecimal,EDITED to clarify the situation with content from a comment below: The problem is that BigDecimal is significantly slower than double * double etc.
8091210,2,1,5,java.math.BigDecimal,"IMHO, there is a very rarely a good reason to use float, using double or BigDecimal is usually better."
8093681,2,1,6,java.math.BigDecimal,Its best to use double or BigDecimal instead of float unless you have a very good reason.
8100764,2,0,2,java.math.BigDecimal,What you should do instead is to take a closer look at BigDecimal: code.
8101039,2,0,3,java.math.BigDecimal,"( If you want   perfection, use int, long, BigInteger or BigDecimal. )"""
8105040,2,0,1,java.math.BigDecimal,"You should use java.math.BigDecimal, and you should also Google for a page entitled ""What every computer scientist should know about floating point""."
8104019,2,1,10,java.math.BigDecimal,"You should really be using java.math.BigDecimal to avoid any precision issues, and always use a BigDecimal(String) constructor."
8104830,2,0,1,java.math.BigDecimal,"Don't use float or double to do financial calculations, use BigDecimal."
8104830,2,0,1,java.math.BigDecimal,"Since dealing with BigDecimal is a little cumbersome, I wrote a BdHelper class, to shorten the code necessary for certain operations/conversions."
8104841,2,0,0,java.math.BigDecimal,Go With BigDecimal.
8104841,2,0,0,java.math.BigDecimal,Here's a good start: Make cents with BigDecimal - JavaWorld.
8104855,2,1,0,java.math.BigDecimal,"There's a great article on using float, double, BigDecimal etc for doing calculation here http://firstclassthoughts.co.uk/java/traps/java_double_traps.html Bottom line is that there is no perfect solution."
8110838,2,1,1,java.math.BigDecimal,(what might also be of interest: BigDecimal#toString())
8148737,2,0,1,java.math.BigDecimal,BigDecimal is the best data type to use for currency.
8148737,2,0,1,java.math.BigDecimal,"There are a whole lot of containers for currency, but they all use BigDecimal as the underlying data type."
8148737,2,0,1,java.math.BigDecimal,"You won't go wrong with BigDecimal, probably using BigDecimal.ROUND_HALF_EVEN rounding."
8148739,2,0,1,java.math.BigDecimal,"You should use BigDecimal  to represent monetary values .It allows you to use a variety of rounding modes, and in financial applications, the rounding mode is often a hard requirement that may even be mandated by law."
8148769,2,0,3,java.math.BigDecimal,"BigDecimal can be used, good explanation of why to not use Float or Double can be seen here: Why not use Double or Float to represent currency?"
8148773,2,1,46,java.math.BigDecimal,BigDecimal is the best type for representing currency decimal values.
8151294,2,0,1,java.math.BigDecimal,"I like using Tiny Types which would wrap either a double, BigDecimal, or int as previous answers have suggested."
8161110,2,1,14,java.math.BigDecimal,"If you need to work with large numbers but require precision, you'll have to use something like BigDecimal: code."
8181689,2,1,0,java.math.BigDecimal,BigDecimal handles this by always knowing the precision.
8181212,2,0,7,java.math.BigDecimal,"If you really care about the exact decimal digits, you should be using BigDecimal instead (or a scaled integer)."
8183084,2,0,3,java.math.BigDecimal,"You should use BigDecimal, which is a decimal-based representation."
8194949,2,0,2,java.math.BigDecimal,maybe BigDecimal is worth a look at... http://download.oracle.com/javase/1.4.2/docs/api/java/math/BigDecimal.html you can secify the round mode in the divide-operation
8202946,1,0,3,java.math.BigDecimal,BigDecimal symbols/parenthesis.
8202946,1,0,3,java.math.BigDecimal,I'm trying force BigDecimal to use symbols (Ex.
8202946,1,0,3,java.math.BigDecimal,Can you guys tell me if there's a way to use symbols on BigDecimal without converting it to Double or something?
8202946,1,0,3,java.math.BigDecimal,"I've tried recording it lots of times, and spent almost 6 hours trying to figure out where I'm getting wrong with the BigDecimal."
8209003,2,0,1,java.math.BigDecimal,Are you sure you need the accuracy BigDecimal provides.
8209003,2,0,1,java.math.BigDecimal,"If you need more than 15 digits of accuracy, you need BigDecimal."
8202952,2,0,4,java.math.BigDecimal,You have no choice but to use those methods on BigDecimal.
13653472,2,0,2,java.math.BigDecimal,"Change the body of main from list(""1"", 2, new BigDecimal(""3.5"")); to  JavaLanguagePuzzle3.<Object>list(""1"", 2, new BigDecimal(""3.5"")); Reason: the <> syntax specifies which version of the generic method you want."
8208922,1,0,19,java.math.BigDecimal,I have read on java site to use BigDecimal for currencies.
8209030,2,0,28,java.math.BigDecimal,"That said, BigDecimal is the correct type to use in Java because it can preserve any amount of precision plus it lets you chose the rounding mode most suitable for your case."
8209046,2,0,8,java.math.BigDecimal,Most of the time BigDecimal is the only valid choice for currencies.
8253739,1,0,10,java.math.BigDecimal,Can i use BigDecimal as an id type in hibernate hbm?
8253739,1,0,10,java.math.BigDecimal,but java.math.BigDecimal can accommodate these many precisions.
8253739,1,0,10,java.math.BigDecimal,but the problem is can i use BigDecimal in hbm as below?
8253825,2,0,1,java.math.BigDecimal,"Double is not the right type for very precision floating point calculations, if you want exact results you have to use BigDecimal."
8253854,2,1,9,java.math.BigDecimal,"You wont get 0.6 :-) To solve this, use BigDecimal (preferred) or manipulating the double by first multiplying it something like 10000, then rounding it and then dividing it again (less clean)."
8261327,1,0,0,java.math.BigDecimal,Difference of BigDecimal as int?
8261341,2,1,2,java.math.BigDecimal,You can use BigDecimal.unscaledValue().
8263072,1,0,0,java.math.BigDecimal,Receiving a null BigDecimal from JAX-WS when client input is an invalid String.
8263072,1,0,0,java.math.BigDecimal,"I'm developing a webservice using a WSDL (contract-first) that defines one of it's fields as a decimal type, which JAXB converts to a BigDecimal when generating client code."
8263072,1,0,0,java.math.BigDecimal,"But when I'm testing with SoapUI, if I send an invalid String for this field (like ""xxxx"") I receive a null BigDecimal at server side."
8263072,1,0,0,java.math.BigDecimal,"The API might be getting a NumberFormatException, maybe from BigDecimal's Constructor, and just sending a null value to avoid throwing an exception before even reaches server-side."
8836733,2,1,0,java.math.BigDecimal,We also have a web service which expects a BigDecimal eg: 2.56.
8293129,1,0,2,java.math.BigDecimal,i have 2 classes under java hibernate project currency class with variable (exponent) with (BigDecimal) DataType & customer class with variable (balance) with (BigDecimal) DataType i want to set scale of balance as exponent example: code.
8293129,1,0,2,java.math.BigDecimal,what's i mean i want to put the customer balance scale as the exponent of his currency Note: i try BigDecimal.setScale() but this method required constant integer field  dataType where exponent is BigDecimal and variable
8293330,2,0,1,java.math.BigDecimal,You should extract the integer-value from the exponent-BigDecimal and use that as parameter to setScale.
8293340,2,1,1,java.math.BigDecimal,BigDecimal#setScale(...) should work: code.
8293341,2,0,0,java.math.BigDecimal,You can call intValue() on BigDecimal to get the desired result.
8293607,2,0,0,java.math.BigDecimal,You can use BigDecimal.intValue() to get the exponent as the datatype required.
8293607,2,0,0,java.math.BigDecimal,But BigDecimal is a very strange choice of datatype for the exponent value.
8300120,1,0,1,java.math.BigDecimal,"BigDecimal's user type with BigDecimal attributes), without having to annotate each attribute with @Type?"
9268591,2,0,2,java.math.BigDecimal,That's assuming you want a BigDecimal with a value of zero for blank columns - if you want it to be null instead then use code.
8321923,2,1,5,java.math.BigDecimal,Here's a simple example which deliberately parses to BigDecimal rather than to float or double - binary floating point is inappropriate for currency values.
8347551,2,0,0,java.math.BigDecimal,"java.math.BigDecimal has a stripTrailingZeros() method, which will achieve what you're looking for."
8348837,1,0,2,java.math.BigDecimal,"If it were Java SE, I'd use BigDecimal, but it is not present in the MIDP/CLDC API."
8348837,1,0,2,java.math.BigDecimal,"For instance, can the BigInteger and BigDecimal classes be ported to J2ME (CLDC1.1)?"
8348837,1,0,2,java.math.BigDecimal,I've read on other question someone trying to port JavaSE's BigDecimal with bouncycastle's BigInteger.
8354246,2,1,1,java.math.BigDecimal,I successfully ported JavaSE's BigDecimal.
8354246,2,1,1,java.math.BigDecimal,"My goal was just to achieve arbitrary-precision and convert from String to BigDecimal, I didn't really need anything else."
8354246,2,1,1,java.math.BigDecimal,The BlackBerry library contains a BigDecimal port.
8354246,2,1,1,java.math.BigDecimal,UPDATE: I finally used PayPal's BigDecimal port contained in their Mobility Payment Library for BlackBerry.
8354246,2,1,1,java.math.BigDecimal,I've made a considerable amount of unit tests on it and I can say that it is consistent with the behavior of JavaSE's BigDecimal.
8356205,1,0,1,java.math.BigDecimal,"Moreover, I am not sure if it would play nicely with BigDecimal et.al., and what cases would I have to test?"
8356688,2,0,2,java.math.BigDecimal,The comparison gets a little tricky because BigDecimal and BigInteger also extend Number.
8356688,2,0,2,java.math.BigDecimal,"Thus, if you ask for for the double value or long value of these you may risk erroneous comparisons since BigDecimal or BigInteger will be forced to truncate their value."
8356688,2,0,2,java.math.BigDecimal,The safest thing to do would be to convert the Number to a String and then give this String to the BigDecimal class to parse.
8356688,2,0,2,java.math.BigDecimal,If you're sure you will never get an instance of BigInteger or BigDecimal whose value exceeds the maximum positive or maximum negative value of a double then it should be safe to use Number.doubleValue to get a number to compare to.
8356688,2,0,2,java.math.BigDecimal,"As such new BigDecimal(""0.1"") is not equal to 0.1d or 0.1f."
8356688,2,0,2,java.math.BigDecimal,This is because floats and doubles cannot represent many base 10 fractions accurately (whereas BigDecimal can).
8356688,2,0,2,java.math.BigDecimal,So getting a double value from a BigDecimal may end up giving you erroneous comparisons.
8370290,1,0,6,java.math.BigDecimal,"So in short, either way, I would need to increase the precision of BigDecimal depending on what the nth digit is."
8370290,1,0,6,java.math.BigDecimal,How would I go about increasing the precision of BigDecimal to nth digit?
8370290,1,0,6,java.math.BigDecimal,and this is a question about how I can use BigDecimal to implement my ideas of generating PI.
8371223,2,0,2,java.math.BigDecimal,You need to use MathContext to increase the precision of the BigDecimal e.g.
8370324,2,1,4,java.math.BigDecimal,BigDecimal has arbitrary precision.
8370324,2,1,4,java.math.BigDecimal,"setScale() allows you to create BigDecimal objects with as much precision as you want and most of the arithmetic methods will automatically increase precision as required, but of course the more precision, the slower all calculations will be."
8370324,2,1,4,java.math.BigDecimal,"The most difficult part of implementing Ramanujan's formula will ironically be the sqrt(2) in the constant factor, because there is not built-in sqrt() for BigDecimal, so you'll have to write your own."
8387375,2,0,0,java.math.BigDecimal,BigDecimal offers many rounding options.
8400032,1,0,2,java.math.BigDecimal,Can we use double to store monetary fields and use BigDecimal for arithmetic.
8400032,1,0,2,java.math.BigDecimal,"I know the problem with double/float, and it's recommended to use BigDecimal instead of double/float to represent monetary fields."
8400032,1,0,2,java.math.BigDecimal,"Then my question is: It's acceptable to use double/float to represent monetary fields in Java class, but use BigDecimal to take care of the arithmetic (i.e. convert double/float to BigDecimal before any arithmetic) and equal-checking?"
8400130,2,1,5,java.math.BigDecimal,Then you convert them to safe BigDecimal and multiple them.
8400130,2,1,5,java.math.BigDecimal,"x and y are accurate, as well as the multiplication using BigDecimal."
8497607,2,0,1,java.math.BigDecimal,I would also recommend that you use nothing but BigDecimal for ALL arithmetic that may involve currency.
8497607,2,0,1,java.math.BigDecimal,Make sure that you always use the String constructor of BigDecimal.
8497607,2,0,1,java.math.BigDecimal,Only BigDecimal stores the number you require EXACTLY as you want it.
8497607,2,0,1,java.math.BigDecimal,And remember that BigDecimal is immutable.
8497607,2,0,1,java.math.BigDecimal,but the resulting output will be:  Amount is now: 123.45  That's because you need to assign the result to a new (or the same) BigDecimal variable.
8400083,2,0,2,java.math.BigDecimal,Are you sure that using BigDecimal type will be a real bottleneck?
8400613,2,0,2,java.math.BigDecimal,"If you have to deal with hyper-inflationary currencies (a bad idea in any case) but for some reason still need to account for every cent, use BigDecimal."
8400613,2,0,2,java.math.BigDecimal,"If you use double or long or BigDecimal, you must round the result."
8400613,2,0,2,java.math.BigDecimal,How you do this varies with each data type and BigDecimal is the least error prone as you are requires to specify what rounding and the precision for different operations.
8400102,2,0,0,java.math.BigDecimal,"Even if you do your use BigDecimal and preserve precision during calculations, you are still storing the end product as a float/double."
8422838,2,0,2,java.math.BigDecimal,Try using a BigInteger or a BigDecimal.
8422840,2,0,3,java.math.BigDecimal,"For very large integers you may want to use the BigInteger class (or BigDecimal), as the values may exceed the limits of Integer."
8427017,2,0,0,java.math.BigDecimal,Are you asking how to create the BigDecimal (or BigInteger) with a larger number?
8427027,2,0,0,java.math.BigDecimal,BigDecimal will take a long in the constructor.
8427027,2,0,0,java.math.BigDecimal,new BigDecimal(2147483648L) should work.
8426998,2,0,0,java.math.BigDecimal,"num1 = new BigDecimal(2147483648l); num2 = new BigDecimal(2147483649l); BigDecimal constructor supports long/double as parameter, use one of these."
8427007,2,0,1,java.math.BigDecimal,"When you construct your BigDecimal, you are doing it with an integer."
8427007,2,0,1,java.math.BigDecimal,"In Java, integers can only hold 2^31, so when you construct your BigDecimal that way, that's all it will allow."
8435822,2,1,1,java.math.BigDecimal,"There are a variety of ways that you could store it; the simplest being using an int, float, double, or if you are feeling extra precise, BigDecimal."
8455406,2,1,2,java.math.BigDecimal,BigDecimal can help in achieving this.
8461808,2,0,3,java.math.BigDecimal,"Give groovy a try, it has stuff that Java should have had all along and it interoperates with Java with no impedance mismatch (an ints and int, a BigDecimal is a BigDecimal, I can get all all my Jars, the list goes on and on)."
8491941,2,0,3,java.math.BigDecimal,"Instead, use BigInteger or BigDecimal for your calculation."
8506097,2,0,3,java.math.BigDecimal,"If you want accurate floating point computations, do not use the float or double types, but rather make use of the BigDecimal class."
8506654,1,0,2,java.math.BigDecimal,"Imagine we need to achieve arbitrary precision in a certain project and we don't have a BigDecimal class (because it is not available in the API, e.g."
8506720,2,0,0,java.math.BigDecimal,"But, then again, like @TomaszNurkiewicz mentioned, this is exactly what BigDecimal does."
8511322,2,0,4,java.math.BigDecimal,If you need arbitrary precision you should be using BigDecimal instead.
8511388,2,0,1,java.math.BigDecimal,You should use BigDecimal to get correct result.
8517919,1,0,1,java.math.BigDecimal,-Oracle 11g -Oracle thin driver When a column is defined as NUMBER the getObject method on ResultSet will return a BigDecimal type.
8518023,2,1,2,java.math.BigDecimal,"Here the document says the SQL data types DEC, DECIMAL, NUMBER, NUMERIC are mapped into java.math.BigDecimal."
8524123,2,1,6,java.math.BigDecimal,Then a friend asked what I was doing and said that OP be better of using BigDecimal and I went into facepalm mode..
8524162,2,0,4,java.math.BigDecimal,Use BigDecimal: code.
8529867,1,0,1,java.math.BigDecimal,JSTL: Absolute value of a BigDecimal (Proper way...).
8529867,1,0,1,java.math.BigDecimal,Pardon me for the brain fart tonight but for some reason... this is the best solution I can come up with right now on getting the ABS of a BigDecimal with JSTL right now... No math tricks outside of ABS too.
8529944,2,0,1,java.math.BigDecimal,"Assuming that you're using some sort of MVC framework, or at least have a servlet feeding the data to your JSP, I'd suggest building your list of BigDecimals in the controller / servlet as absolute values - use BigDecimal.abs() - so that you don't have to muck up the JSP with this kind of stuff."
8529970,2,1,1,java.math.BigDecimal,Use BigDecimal.abs() on the server side; don't do this kind of work in the JSP.
8534260,1,0,3,java.math.BigDecimal,BigDecimal scale and calculations.
8534260,1,0,3,java.math.BigDecimal,I use BigDecimal to do calculations.
8534260,1,0,3,java.math.BigDecimal,"When using .divide method of BigDecimal a scale and rounding is required, so now I do it like this: code."
8534260,1,0,3,java.math.BigDecimal,But I'm not sure if this is the correct way of doing calculations with BigDecimal and I have doubts about this...
8534298,2,0,1,java.math.BigDecimal,You can find on JavaPractices some examples with BigDecimal.
8534300,2,1,2,java.math.BigDecimal,"BTW: if you need less than 15 significant digits, this is the accuracy of using a double and you might not need to use BigDecimal."
8539053,1,0,2,java.math.BigDecimal,The actual objects are String and BigDecimal 99% of the time.
8539110,2,0,2,java.math.BigDecimal,Since both String and BigDecimal are Comparables: code.
8540221,2,0,0,java.math.BigDecimal,You might take a look at the documentation of BigDecimal.equals.
8546739,2,0,1,java.math.BigDecimal,"If having enough precision for really really large numbers is important to you, you may also want to look into classes such as BigDecimal or BigInteger."
8562848,2,0,0,java.math.BigDecimal,Why not use BigDecimal code.
8561433,1,0,1,java.math.BigDecimal,BigDecimal.divide(...) - appropriate scale for quotients with non-terminating expansions.
8561433,1,0,1,java.math.BigDecimal,I'm using BigDecimal for some floating-point math.
8561433,1,0,1,java.math.BigDecimal,If you divide 5 by 4.2 you'll get an exception (as the result has a non-terminating expansion which cannot be represented by a BigDecimal) i.e. code.
8563173,2,1,2,java.math.BigDecimal,"From the javadocs of the BigDecimal class:  If zero or positive, the scale is the number of digits to the right of the decimal point."
8563173,2,1,2,java.math.BigDecimal,The value of the number represented by the BigDecimal is therefore (unscaledValue × 10-scale).
8561795,2,1,53,java.math.BigDecimal,"The method exists for many types: Integer, Long, BigDecimal and others and the documentation is always the same: Under some circumstances (which aren't defined), the method can return the same result."
8561795,2,1,53,java.math.BigDecimal,"For BigDecimal, the cache currently works for values from 0 to 10."
8567596,1,0,8,java.math.BigDecimal,How to make updating BigDecimal within ConcurrentHashMap thread safe.
8567596,1,0,8,java.math.BigDecimal,I was using AtomicInteger to hold integer sums before and I was wondering if there are something like that for BigDecimal.
8567817,2,1,8,java.math.BigDecimal,You can use synchronized like the others suggested but if want a minimally blocking solution you can try AtomicReference as a store for the BigDecimal code.
8567817,2,1,8,java.math.BigDecimal,Now any time after the for loop you invoke newSum.get() it will have the BigDecimal object that has been added to.
8629365,1,0,3,java.math.BigDecimal,How to keep the for-loop counter at 0; BigDecimal; etc.
8629365,1,0,3,java.math.BigDecimal,"I understand that using doubles is not advisable for anything related to money and BigDecimal is recommended (alongwith NumberFormat, maybe)."
8629365,1,0,3,java.math.BigDecimal,"Can I replace my current doubles with BigDecimal with minimal problems, or do I have to replace the whole code?"
8629365,1,0,3,java.math.BigDecimal,I also do not understand how to implement BigDecimal that easily so I would appreciate layman examples on that (especially on whether I can add/subtract/multiply/divide BigDecimal with ints etc).
8629405,2,1,2,java.math.BigDecimal,"Working in investment banks and trading firms for many years, and I haven't seen anyone use BigDecimal for money."
8629405,2,1,2,java.math.BigDecimal,"Its not a major rewrite, and at a minimum you should know how to use both double and BigDecimal handling rounding correctly."
8629475,1,0,2,java.math.BigDecimal,How to replace doubles with BigDecimal for monies in java.
8629475,1,0,2,java.math.BigDecimal,I know it is not advisable to use doubles for monetary values so I am wondering how I can replace my existing code that has doubles with BigDecimal.
8629475,1,0,2,java.math.BigDecimal,I am wondering how BigDecimal can be multiplied/divided/added/subtracted with an int or a double or if that isn't even a possiblity.
8629475,1,0,2,java.math.BigDecimal,"There are other topics covering BigDecimal usage but they don't cover my specific question, however, I apologize if I have overlooked a post where it has already been answered."
8631745,2,1,3,java.math.BigDecimal,"An alternative to BigDecimal might be to do all calculations in cents, using longs, and just insert the decimal point right at the end."
8634426,2,0,5,java.math.BigDecimal,You may change to BigDecimal to get rid of such effects.
8636228,1,0,10,java.math.BigDecimal,BigDecimal notation eclipse plugin or nice external tool.
8636228,1,0,10,java.math.BigDecimal,"I need to make a lot of operations using BigDecimal, and I found having to express    code."
8672062,2,1,1,java.math.BigDecimal,You exactly want something to preprocess your BigDecimal expressions to produce legal Java.
8672062,2,1,1,java.math.BigDecimal,"A tool that reads the Java source text, finds such expressions, and converts them to BigDecimal in the text."
8639788,2,0,3,java.math.BigDecimal,"To represent bigger numbers, you'll need to use BigDecimal or BigInteger."
8644195,2,0,5,java.math.BigDecimal,"Try this, make a object of BigDecimal code."
8655583,1,0,2,java.math.BigDecimal,"I have an EditText which should work as follows (Android 2.3.3): The user enters for instance 10,40 (which is 10 Euro and 40 Cents in EU currency) - I want to then take that String input and convert it to a BigDecimal (or Number etc...) for instance, for further internal computation."
8655583,1,0,2,java.math.BigDecimal,"The same should work if the user enters 10.40 (which - in the case of US Dollar would amount to 10 Dollars and 40 Cents), then take that String input and convert it to a BigDecimal (or Number etc...) for instance."
8658771,2,0,0,java.math.BigDecimal,Since you are dealing with money ( as evident from your variable names ) use BigDecimal instead.
8658826,2,0,2,java.math.BigDecimal,"IMO, the suggestions to use a BigDecimal are overkill."
8661840,2,1,3,java.math.BigDecimal,"This is how spec infers R: first there is constraint R :> BigDecimal, where :> means is a supertype of."
8661840,2,1,3,java.math.BigDecimal,The inference rules then choose R=BigDecimal since it's the most specific type satisfying the constraint.
8661840,2,1,3,java.math.BigDecimal,"Now, since T:>R, T:>BigDecimal, one would think this should yield T=BigDecimal too."
8663381,2,0,2,java.math.BigDecimal,Use BigInteger or BigDecimal.
8663383,2,0,4,java.math.BigDecimal,You have to use either BigDecimal or BigInteger.
8665601,1,0,3,java.math.BigDecimal,How to set a custom BigDecimal converter to a TextField in Wicket 1.5?
8668672,2,0,0,java.math.BigDecimal,(NB: the type must not be IConverter<C> or IConverter<BigDecimal>.)
8668699,2,0,0,java.math.BigDecimal,"Long IDs I represent with BigDecimal or BigInteger anyway, and only other long numbers I used is UNIDs for searializable interface which is final and long."
8669879,2,0,1,java.math.BigDecimal,"If Number is a BigDecimal, there is no += operator."
8671583,2,0,1,java.math.BigDecimal,Turns out the only fully reliable way to compare two numbers of unknown type at runtime is to convert both to strings and both to BigDecimal and then to use the method compareTo (and not equals).
8782061,2,0,1,java.math.BigDecimal,"You can also optionally add support for such classes like java.math.BigDecimal, java.util.Date, java.sql.Timestamp."
8708281,1,0,2,java.math.BigDecimal,Is it BigDecimal?
8708281,1,0,2,java.math.BigDecimal,My code is very complex so I want to make sure BigDecimal is the right way to go before I rework the other stuff.
8708464,2,0,2,java.math.BigDecimal,"For instance, √2 would be new SquareRoot(2), and its fields would be an long or double (2) and probably also a transient cached result (as a BigDecimal)."
8708337,2,0,1,java.math.BigDecimal,"Yes, BigDecimal is the way to go."
8709073,1,0,0,java.math.BigDecimal,Type casting for BigDecimal.
8709073,1,0,0,java.math.BigDecimal,Now how do I type cast or modify my BigDecimal to read that value?
8709210,2,0,1,java.math.BigDecimal,"First, change the ArrayList amountStr from within the new BigDecimal(--); and reference a single String from within the ArrayList."
8709218,2,1,1,java.math.BigDecimal,You can't type cast a String to a BigDecimal or vice versa.
8709316,2,0,0,java.math.BigDecimal,what i understand is you want to convert the list elements into BigDecimal Array.
8710450,1,0,3,java.math.BigDecimal,Have tried this way of converting double value to string but have have eliminated this tecinique as there is some positve rounding added when Double converted to BigDecimal.
8710450,1,0,3,java.math.BigDecimal,This can be eliminated by rounding set while scaling to BigDecimal.ROUND_CEILING.
8712976,2,1,3,java.math.BigDecimal,"Unrelated to the JSON library you use, you should not use the BigDecimal constructor taking a double parameter, since that uses the exact decimal representation of the double's binary floating-point value Instead, use the static valueOf method since that uses the string value of the double and thus rounds correctly."
8712976,2,1,3,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the same result as converting the double to a String using the Double.toString(double) method and then using the BigDecimal(String) constructor."
8716032,2,0,0,java.math.BigDecimal,"If you do go the route of allowing only one number to be entered at a time, look at JFormattedTextField paired with a DecimalFormat Also, from a mathematical point of view, if you are keeping track of an indefinite amount of numbers, you should consider using BigDecimal."
8736394,2,0,4,java.math.BigDecimal,"I suggest you try type BigDecimal, which can hold values of any size."
8736394,2,0,4,java.math.BigDecimal,"new BigDecimal(""94605284000000000000000"")  should work."
8754703,2,0,1,java.math.BigDecimal,"Documentation of BigDecimal states:  add(BigDecimal augend)              Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale())."
8754567,2,1,6,java.math.BigDecimal,"As per the documentation of BigDecimal:  Immutable, arbitrary-precision signed decimal numbers."
8754567,2,1,6,java.math.BigDecimal,"A BigDecimal   consists of an arbitrary precision integer unscaled value and a   non-negative 32-bit integer scale, which represents the number of   digits to the right of the decimal point."
8754567,2,1,6,java.math.BigDecimal,The number represented by   the BigDecimal is (unscaledValue/10scale).
8754567,2,1,6,java.math.BigDecimal,"BigDecimal provides   operations for basic arithmetic, scale manipulation, comparison,   hashing, and format conversion."
8754424,2,0,3,java.math.BigDecimal,You can use BigDecimal for this purpose.
8754424,2,0,3,java.math.BigDecimal,BigDecimal helps you to aware this problem.
8754424,2,0,3,java.math.BigDecimal,Here is code sample with BigDecimal: code.
8754424,2,0,3,java.math.BigDecimal,By this link you can find many examples with usage of BigDecimal class.
8754427,2,0,2,java.math.BigDecimal,"But, BigDecimal could be what you are looking for."
8757133,2,0,0,java.math.BigDecimal,Another option is to use BigDecimal: code.
10821895,2,0,0,java.math.BigDecimal,"If you choose instead specify the textFieldExpression class as being ""java.lang.Number"", it will use the pattern when you pass a BigDecimal in."
8761142,2,0,7,java.math.BigDecimal,"If you need arbitrarily good precision, use the java.math.BigDecimal class."
8762605,1,0,5,java.math.BigDecimal,"I dont know how to handle new BigDecimal(""0E30"")."
8762605,1,0,5,java.math.BigDecimal,Its value is 0 but it doesn't compare to BigDecimal.ZERO.
8762650,2,1,7,java.math.BigDecimal,From the docs (emphasis is mine):  Compares this BigDecimal with the specified Object for equality.
8762650,2,1,7,java.math.BigDecimal,"BigDecimal is one of the cases where equals() is inconsistent with compareTo():  Note: care should be exercised if BigDecimals are to be used as keys   in a SortedMap or elements in a SortedSet, as BigDecimal's natural   ordering is inconsistent with equals."
8765555,1,0,10,java.math.BigDecimal,Testing if a BigDecimal value is zero in a JSP EL Expression.
8765555,1,0,10,java.math.BigDecimal,"That is, it returns true when someBigDecimal is new BigDecimal(""0""), but false when someBigDecimal is new BigDecimal(""0.00"")."
8765555,1,0,10,java.math.BigDecimal,"This results from the JSP 2.0, 2.1, and 2.2 specifications, which state: For <, >, <=, >=:  If A or B is BigDecimal, coerce both A and B to BigDecimal and   use the return value of A.compareTo(B)."
8765555,1,0,10,java.math.BigDecimal,"For ==, !=:  If A or B is BigDecimal, coerce both A and B to BigDecimal and then:  If operator is ==, return A.equals(B) If operator is !=, return !A.equals(B)   This means the == and != operators result in a call to the .equals() method, which compares not only the values, but also the scale of the BigDecimals."
8769245,2,1,3,java.math.BigDecimal,This will avoid any loss of precision but assumes that someBigDecimal is always of type BigDecimal.
8769245,2,1,3,java.math.BigDecimal,The core of the problem is that this Java code evaluates to false because ZERO has a scale of 0 and the new BigDecimal has a non-zero scale: code.
8803761,2,0,1,java.math.BigDecimal,But when it comes to precision you might should consider using a different datatype like BigDecimal.
8825331,2,1,4,java.math.BigDecimal,You can also use BigDecimal if you want to get really heavyweight: code.
8836085,1,0,2,java.math.BigDecimal,"So, in a table, some cells contain rates in a TextField<BigDecimal> where user can enter a value with any precision, but which shows the value with 4 decimal points."
8836085,1,0,2,java.math.BigDecimal,This is done with a custom BigDecimal converter (as documented in this answer).
8836085,1,0,2,java.math.BigDecimal,"Having the field, the domain object & the exact BigDecimal value at hand as in above code (executed on every update of the table), what could I do to replace the value visible (editable) in UI?"
8838708,1,0,0,java.math.BigDecimal,Hashcode of BigDecimal derivative.
8838708,1,0,0,java.math.BigDecimal,"BTW, BigDecimal didn't work out of the box for me, because 12.34 @ 2 precision was 12 ..."
27385137,2,0,0,java.math.BigDecimal,"If you have a minimum or valid scale for the values, then you can set the BigDecimal scale prior to taking the hashCode(), and you will get the same result."
27385137,2,0,0,java.math.BigDecimal,Per the BigDecimal documentation:  Scaling/rounding operations (setScale and round) ... increase or   decrease the precision of the stored number with minimal effect on its   value.
8850441,1,0,8,java.math.BigDecimal,adding 2 BigDecimal values.
8850441,1,0,8,java.math.BigDecimal,"Ok, I would like to add 2 BigDecimal values."
8850470,2,1,23,java.math.BigDecimal,BigDecimal is immutable.
8850493,2,0,3,java.math.BigDecimal,Every operation of BigDecimal returns a new BigDecimal but not change the current instance.
8871182,1,0,3,java.math.BigDecimal,"If it is anything that subclass java.lang.Number (such as Integer, or BigDecimal) I need to take a special course of action."
8887428,2,0,9,java.math.BigDecimal,"This Account object would have a value property, of type BigDecimal."
8890542,2,0,3,java.math.BigDecimal,To prevent rounding errors you could convert them to BigDecimal code.
8890575,2,0,3,java.math.BigDecimal,There is no fix for this ... apart from using something like BigDecimal to represent your numbers.
8891318,1,0,3,java.math.BigDecimal,BigDecimal Error.
8891318,1,0,3,java.math.BigDecimal,"NOTE: In database, I have values as 125.23, 458.45, 665.99 (all two decimals) When I display k, I get value as  k = 6034.299999999992 Hence I introduced BigDecimal and changed code to below code."
8891360,2,0,0,java.math.BigDecimal,"You need to have k as BigDecimal too, instead of double."
8891363,2,1,7,java.math.BigDecimal,Stick to BigDecimal everywhere: code.
8891372,2,0,2,java.math.BigDecimal,Use BigDecimal.ROUND_HALF_UP (or .._DOWN or .._EVEN).
8891372,2,0,2,java.math.BigDecimal,Alternatively you can use BigDecimal also for the calculations.
8891372,2,0,2,java.math.BigDecimal,"Just remember to use the BigDecimal(String) constructor, or obtain the BigDecimal directly from the result set."
8891373,2,0,6,java.math.BigDecimal,"BigDecimal uses decimal arithmetic, so this is more in line to what we use."
8907745,2,1,9,java.math.BigDecimal,"If you want to represent 9999999999999999 exactly, you need to use BigDecimal."
8911683,2,1,54,java.math.BigDecimal,"EDIT If you want to preserve the number of decimals when they are zero (I guess it is just for displaying to the user) you just have to change the function type from float to BigDecimal, like this: code."
8917813,2,1,3,java.math.BigDecimal,All currency calculations should be done with BigDecimal.
8917835,2,0,3,java.math.BigDecimal,"Also, if you're doing calculations with currency, you should take a look at BigDecimal to avoid weird rounding errors later down the road."
8922971,2,1,2,java.math.BigDecimal,"If you're interested in decimal values rather than just the magnitude, you should consider using BigDecimal instead of double."
8923036,2,0,1,java.math.BigDecimal,"Even if you use BigDecimal you can avoid representation error, but sooner or later you will have to know how to deal with precision."
8958778,2,0,0,java.math.BigDecimal,use float if you wish but look at this: Java:Why should we use BigDecimal instead of Double in the real world?
8960030,2,0,0,java.math.BigDecimal,"Since every possible byte, short, char, int, float, double can be represented as a double its is much more efficient (as its a primitive instead of any object) and simpler to use double instead of Number  You would need specific types if you need long accurately or BigDecimal or BigInteger."
8958004,2,0,1,java.math.BigDecimal,"You will notice that Number does have doubleValue, intValue, etc.... or alternatively, you can convert to BigDecimal, and use the arithmetic methods defined on that class (not +,-, etc, but add, multiply, etc....)."
8958004,2,0,1,java.math.BigDecimal,"This method will be more accurate (if you need the best accuracy, use BigDecimal) since floats and doubles only represent a discrete set of numeric values."
8967328,2,0,1,java.math.BigDecimal,You need to use BigDecimal.
8983832,2,0,7,java.math.BigDecimal,We used a BigDecimal number passing an integer as argument to the constructor.
8989230,1,0,1,java.math.BigDecimal,Hibernate is mapping BigDecimal incorrectly.
8989230,1,0,1,java.math.BigDecimal,"I have two @Entitys, both with a BigDecimal field as follows: in one module: code."
9023136,1,0,21,java.math.BigDecimal,How do I convert a string number value with a dollar sign to BigDecimal in java?
9023136,1,0,21,java.math.BigDecimal,"However, I want to convert this String value to a BigDecimal value, but it has a dollar sign in the string."
9023286,2,1,40,java.math.BigDecimal,The BigDecimal Constructor take a valid numerical string.
9029419,2,1,4,java.math.BigDecimal,"As you hinted in the question, you need to use BigDecimal."
9029462,2,0,0,java.math.BigDecimal,"Looks like you had the right idea about using BigDecimal, this works like it should; code."
9055063,2,0,0,java.math.BigDecimal,"So whe converted from bynary format to decimal string, it result something like ""0.2000000001"" what displayed with E. To solve this problem you can use BigDecimal class what contains number in decimal format, so no E problem - it can easy rounded to any decimal point by setScale method."
15102239,2,0,0,java.math.BigDecimal,"I highly recommend that you use BigDecimal values for ALL currency values, and do not even involve doubles in the instantiation."
9069690,2,0,4,java.math.BigDecimal,"There's no way to store BigInteger or BigDecimal inside a double field, so addition is just not definable on (double ⨯ Number)."
9069765,1,0,3,java.math.BigDecimal,"As per the JAXB docs, a BigDecimal is generated as an xsd decimal type."
9069765,1,0,3,java.math.BigDecimal,So I guess the question becomes how to create custom bindings that would allow me to parse scientific notation and store the data in BigDecimal?
9076489,2,0,0,java.math.BigDecimal,You can also combine this with BigDecimal ;)
9076357,2,0,6,java.math.BigDecimal,Use BigDecimal instead of float.
9076357,2,0,6,java.math.BigDecimal,"For that, you will need to use the   java.math.BigDecimal class instead."
9076357,2,0,6,java.math.BigDecimal,Numbers and Strings covers   BigDecimal and other useful classes provided by the Java platform.
9076696,2,0,1,java.math.BigDecimal,"If you really need to, use BigDecimal, but its pretty rare to find a real world situation where double or long would not do the job."
9106715,2,0,0,java.math.BigDecimal,Use BigDecimal.
9108494,1,0,0,java.math.BigDecimal,ContentValue not accepting BigDecimal.
9108494,1,0,0,java.math.BigDecimal,where MonthlyBudget is BigDecimal variable.
9108615,2,1,1,java.math.BigDecimal,"The ContentValues documentation lists all the overloads of put - and none of them takes a BigDecimal, so I'm not surprised it's failing."
9108615,2,1,1,java.math.BigDecimal,"Just multiply your BigDecimal by 100, take the integer result as a long and then put the long into your ContentValues."
9108615,2,1,1,java.math.BigDecimal,"When you extract it later, create a BigDecimal from the long and divide it by 100."
9108615,2,1,1,java.math.BigDecimal,"You could store the string representation, and pass that string to the BigDecimal constructor when you fetch it."
9116707,2,1,4,java.math.BigDecimal,"If each time factorial method finds a result, saves it in a map [Pair -> BigDecimal], you can query this cache at the beginning of the method."
9117921,2,1,7,java.math.BigDecimal,"Basically, you should normally use float and double for ""natural"" values such as height and weight, where magnitude is important but there's really no such thing as a precise value - and use BigDecimal for ""artificial"" values where you can certainly have exactly $1.10 for example."
9127820,2,0,1,java.math.BigDecimal,You can use BigDecimal to see what the actual values are.
9124084,2,0,0,java.math.BigDecimal,"In Java, you are expected to use BigDecimal."
9125488,2,0,2,java.math.BigDecimal,"If you want exact, you should use BigDecimal."
9128243,2,0,2,java.math.BigDecimal,"If you want a more readable number (1.01 instead of 1.01000000000587732, for example), you can use DecimalFormat (http://docs.oracle.com/javase/6/docs/api/java/text/DecimalFormat.html) or BigDecimal: code."
9149614,2,1,4,java.math.BigDecimal,Use BigDecimal throughout - otherwise you may well find you get unexpected results due to the way binary floating point works.
9154293,1,0,7,java.math.BigDecimal,How to drop insignificant zeros when converting a BigDecimal to a String in Java?
9154293,1,0,7,java.math.BigDecimal,"java.math.BigDecimal.toString() can return something like ""0.888200000""."
9154301,2,1,10,java.math.BigDecimal,Use stripTrailingZeros():  Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation.
9154301,2,1,10,java.math.BigDecimal,See http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html
9159433,2,0,4,java.math.BigDecimal,"Use BigDecimal class in Java to get arbitrary precision, but I'm afraid you'll have to implement long arithmetics yourself in JavaScript (unless you find a good library you can use.)"
9159462,2,0,3,java.math.BigDecimal,This looks like a floating point arithmetic problem to me - consider using BigDecimal rather than double in your java code.
9169183,2,0,1,java.math.BigDecimal,You might want to consider using java.math.BigDecimal where you have explicit ways to control scale and rounding rules.
9169271,2,1,2,java.math.BigDecimal,"I think new BigDecimal(double).toString() will give you all of the incorrect digits, since BigDecimal represents a number with a precisely specified precision."
9169271,2,1,2,java.math.BigDecimal,new BigDecimal(double).toString will return the exact IEEE-754 value being stored.
9187696,2,1,8,java.math.BigDecimal,Store the BigDecimal as a String.
9187696,2,1,8,java.math.BigDecimal,Then when you pull it from the database you can create a new BigDecimal.
9188887,1,0,1,java.math.BigDecimal,BigDecimal Class Java.
9188887,1,0,1,java.math.BigDecimal,I'm trying to write a program for school using the BigDecimal class.
9188887,1,0,1,java.math.BigDecimal,The book isn't clear on how to code the BigDecimal class and I'm using Eclipse so any time I make a change I get an error which is confusing.
9194616,2,0,1,java.math.BigDecimal,"Regardless, you should be using BigDecimal instead of Double (as @Jagger mentioned in the OP comments)."
9194616,2,0,1,java.math.BigDecimal,"However, you're probably better off creating your own Price class and maintaining the BigDecimal internally since this will give you better control over how the value is used.."
9194659,2,0,1,java.math.BigDecimal,"Perhaps an abstract base class which is NOT a subclass of BigDecimal but uses a private value of BigDecimal (no subclassing, but delegation pattern) That you create the final class with implements all money functions, assertions and   safeguards."
9201642,2,1,6,java.math.BigDecimal,"I'm not locked into using a Double versus a BigDecimal on the insides, so long as my methods continue to return Doubles (for instance)."
9212792,2,1,3,java.math.BigDecimal,If you need such precision use BigDecimal.
9212907,2,0,3,java.math.BigDecimal,You should use BigDecimal.
9221996,1,0,1,java.math.BigDecimal,I am required to use the BigDecimal class but cannot figure out how to make the output in currency or percent.
9221996,1,0,1,java.math.BigDecimal,I am not exactly sure what questions to ask but I am going to post both codes the BigDecimal class code and the other which displays the output the way I need it but is not using BigDecimal.
9222339,2,1,0,java.math.BigDecimal,BigDecimal have the method doubleValue() that you can use in NumberFormat.
9246833,2,0,0,java.math.BigDecimal,You should use BigDecimal or change to using the lowest commmon denominator (e.g.
9251211,2,0,4,java.math.BigDecimal,Other approaches include:  Use BigDecimal to store values to an exact decimal precision.
9258313,1,0,1,java.math.BigDecimal,conversion BigDecimal Java to c#-like Decimal.
9258313,1,0,1,java.math.BigDecimal,"In Java BigDecimal class contains values as A*pow(10,B) where A is 2's complement which non-fix bit length  and B is 32bit integer."
9258313,1,0,1,java.math.BigDecimal,And i want to convert Java BigDecimal to Something like c# Decimal in JAVA.
9397542,2,0,0,java.math.BigDecimal,I needed to write a BigDecimal to/from .Net Decimal converter.
9258727,2,1,2,java.math.BigDecimal,"I don't know what representations are available to Java's BigDecimal - whether there is a pragmatic byte[] version, or a string version."
9259078,1,0,2,java.math.BigDecimal,It looks like BigDecimal.setScale truncates to the scale+1 decimal position and then rounds based on that decimal only.
9278408,2,0,0,java.math.BigDecimal,The resulting BigDecimal can then be rounded to the scale needed.
9259820,1,0,5,java.math.BigDecimal,BigDecimal.movePointRight() hangs with very large numbers.
9259820,1,0,5,java.math.BigDecimal,"For the present purposes, the first method just creates a very large BigDecimal."
9262785,2,1,3,java.math.BigDecimal,"In your case, using x.multiply(BigDecimal.TEN) will probably work much better."
9264624,2,0,1,java.math.BigDecimal,Use BigDecimal if you expect perfect accuracy.
9272860,1,0,0,java.math.BigDecimal,"EDIT: Another change to the coding, this time using all BigDecimal objects and equals in the for loops, but I'm still getting long decimals."
9273644,2,1,3,java.math.BigDecimal,because a BigDecimal is immutable - each operation on them just creates a new one.
9272887,2,0,0,java.math.BigDecimal,Use BigDecimal instead of double.
9273700,1,0,2,java.math.BigDecimal,"What I got from this link is there are OpenType,ArrayType, CompositeType, SimpleType and TabularType these deals with only      java.lang.Void, java.lang.Boolean, java.lang.Character, java.lang.Byte, java.lang.Short, java.lang.Integer, java.lang.Long, java.lang.Float, java.lang.Double, java.lang.String, java.math.BigDecimal, java.math.BigInteger, java.util.Date, javax.management.ObjectName,  CompositeData.class.getName(),  TabularData.class.getName()   these objects."
9287360,2,0,2,java.math.BigDecimal,"You get some syntactic sugar for string concatenation, and that's it--anything else you add had better be a primitive or mappable object wrapper for the same (e.g., I'm looking at you, BigDecimal, no +)."
9292044,1,0,0,java.math.BigDecimal,BigDecimal.pow() of negative number.
9292110,2,1,2,java.math.BigDecimal,"Note that 5% intrest over one years makes 1000 become 1050 and not 5000 so for 5%: 1.05^n and for negative [-5%]: 0.95^n You can use BigDecimal to do it, since the numebrs are not integers."
9326895,2,0,4,java.math.BigDecimal,0.0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1.0 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2.0 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3.0 3.1 3.2 3.3 3.4 3.5 3.6 3.7 3.8 3.9 4.0 4.1 4.2 4.3 4.4 4.5 4.6 4.7 4.8 4.9 5.0 5.1 5.2 5.3 5.4 5.5 5.6 5.7 5.8 5.9 6.0 6.1 6.2 6.3 6.4 6.5 6.6 6.7 6.8 6.9 7.0 7.1 7.2 7.3 7.4 7.5 7.6 7.7 7.8 7.9 8.0 8.1 8.2 8.3 8.4 8.5 8.6 8.7 8.8 8.9 9.0 9.1 9.2 9.3 9.4 9.5 9.6 9.7 9.8 9.9 10.0  You can see the exact representation of 0.1f using BigDecimal.
9326895,2,0,4,java.math.BigDecimal,"If performance and readability of code is not an issue, use BigDecimal instead."
9326521,2,1,5,java.math.BigDecimal,Check out BigDecimal for exact decimal handling.
9329957,2,0,1,java.math.BigDecimal,"So, as its explained in more details from coderanch and in this blog post, I recommend you to change to BigDecimal."
9329957,2,0,1,java.math.BigDecimal,EDIT: I've found another post about same problem in stackoverflow Double vs. BigDecimal?
9330752,2,1,2,java.math.BigDecimal,"If you sum a field defined as a BigDecimal, you'll get a BigDecimal."
9336957,2,0,4,java.math.BigDecimal,Option 4: BigDecimal of Java.
9364482,2,1,7,java.math.BigDecimal,"When you need to convert to the 410.44 format for display, you can use the BigDecimal class, passing it the scale to use (2 in this case) which is the number of digits to shift the decimal point by."
9370278,1,0,2,java.math.BigDecimal,How to convert BigDecimal to the exponential form?
9370278,1,0,2,java.math.BigDecimal,How to convert BigDecimal object to a String representation that uses the exponential form?
9396976,2,0,3,java.math.BigDecimal,For this use BigDecimal.
9396981,2,0,4,java.math.BigDecimal,Int stays int no matter how hard you try ;-) Try BigDecimal instead.
9404354,1,0,3,java.math.BigDecimal,BigDecimal with 2 fraction after decimal point?
9404354,1,0,3,java.math.BigDecimal,I'd like to have a BigDecimal formatted with 2 decimals after the decimal point.
9404354,1,0,3,java.math.BigDecimal,"Based on some boolean checks, I sometimes return a BigDecimal.ZERO; In this case, the JSF page just displays ""0"", although I set <f:convertNumber minFractionDigits=""2"" maxFractionDigits=""2""/>."
9404548,2,1,7,java.math.BigDecimal,there are 2 ways of doing this you can use the built in BigDecimal function code.
9404865,1,0,1,java.math.BigDecimal,BigDecimal rendering the decimal point according to locale?
9404865,1,0,1,java.math.BigDecimal,"related to another issue I found out that: if I want to display BigDecimal.ZERO in JSF with 2 fraction digits, then I have to hardcode the rounding in my backing bean."
9404865,1,0,1,java.math.BigDecimal,"This is a real mess, does someone know how to enforce a pattern when displaying a BigDecimal in JSF (not a String!"
9413964,2,0,0,java.math.BigDecimal,"If you're dealing with decimal numbers, there's BigDecimal, which can precisely represent what you've shown (it just can't precisely represent other things, like 1 / 3)."
9413969,2,1,6,java.math.BigDecimal,"(Or a BigDecimal and double at the end, but this is overly complicated) code."
9414025,2,0,2,java.math.BigDecimal,Try using java.math.BigDecimal class.
9430840,1,0,3,java.math.BigDecimal,Can someone confirm: BigDecimal not rendered with pattern.
9430840,1,0,3,java.math.BigDecimal,"I'm having trouble rendering a BigDecimal.ZERO, can someone confirm this does not work for you too??"
9432240,2,0,3,java.math.BigDecimal,Did you take a look at the BigDecimal class??
9432268,2,0,2,java.math.BigDecimal,Use BigDecimal for anything decimal related in Java.
9436758,1,0,2,java.math.BigDecimal,BigDecimal.intValue() returns Unexpected Number.
9436758,1,0,2,java.math.BigDecimal,I'm running into a strange java bug using the intValue() from the BigDecimal class.
25133698,2,0,0,java.math.BigDecimal,I don't know why you need the int value of a BigDecimal but the class BigDecimal contains lots of methods to fit your request.
25133698,2,0,0,java.math.BigDecimal,I would work with BigDecimal itself.
25133698,2,0,0,java.math.BigDecimal,Sooner or later; Converting the BigDecimal type to other primitive types will end up with an error.
9436911,2,0,1,java.math.BigDecimal,You should really read Java API before blaming it:  Converts this BigDecimal to an int.
9436911,2,0,1,java.math.BigDecimal,"This conversion is analogous to   the narrowing primitive conversion from double to short as defined in   section 5.1.3 of The Java™ Language Specification: any fractional part   of this BigDecimal will be discarded, and if the resulting   ""BigInteger"" is too big to fit in an int, only the low-order 32 bits   are returned."
9436911,2,0,1,java.math.BigDecimal,Note that this conversion can lose information about the   overall magnitude and precision of this BigDecimal value as well as   return a result with the opposite sign.
9465019,1,0,3,java.math.BigDecimal,"I'm working with DecimalFormat, I want to be able to read and write decimals with as much precision as given (I'm converting to BigDecimal)."
9467565,2,1,2,java.math.BigDecimal,"If A or B is BigDecimal, coerce both A and B to BigDecimal and then:    If operator is == or eq, return A.equals(B) If operator is != or ne, return !A.equals(B)  If A or B is Float or Double coerce both A and B to Double, apply operator If A or B is BigInteger, coerce both A and B to BigInteger and then:    If operator is == or eq, return A.equals(B) If operator is != or ne, return !A.equals(B)  If A or B is Byte, Short, Character, Integer, or Long coerce both A and B to Long, apply operator If A or B is Boolean coerce both A and B to Boolean, apply operator If A or B is an enum, coerce both A and B to enum, apply operator If A or B is String coerce both A and B to String, compare lexically Otherwise if an error occurs while calling A.equals(B), error Otherwise, apply operator to result of A.equals(B)   The char/Character is in EL thus coerced and evaluated as Long."
9482889,1,0,12,java.math.BigDecimal,Set specific precision of a BigDecimal.
9482889,1,0,12,java.math.BigDecimal,I have an XSD that requires me to use a BigDecimal for a lat/lon.
9482889,1,0,12,java.math.BigDecimal,"I currently have the lat/lon as doubles, and convert them to BigDecimal, but I am only required to use about 12 places of precision."
21307990,2,0,0,java.math.BigDecimal,This way you can set specific precision of a BigDecimal.
20365270,2,0,11,java.math.BigDecimal,BigDecimal distinguishes between scale and precision.
20365270,2,0,11,java.math.BigDecimal,"(In Clojure, The M designates a BigDecimal literal."
20365270,2,0,11,java.math.BigDecimal,"Back on track... You can try using a BigDecimal constructor, but it does not set the precision any higher than the number of digits you specify: code."
20365270,2,0,11,java.math.BigDecimal,Why doesn't BigDecimal already provide this?
9484163,1,0,3,java.math.BigDecimal,This message should validate that an input is of type number / BigDecimal: code.
9484848,2,1,5,java.math.BigDecimal,"If you input something that's not a number in the text field that's mapped to a BigDecimal in the backing bean, JSF will try to convert that into a BigDecimal and it will fail, of course."
9484848,2,1,5,java.math.BigDecimal,"First you need to create a custom converter for a number (in this case, BigDecimal): code."
9485514,1,0,2,java.math.BigDecimal,Convert input of BigDecimal locale dependent?
9485514,1,0,2,java.math.BigDecimal,I'm trying save a values' input field to a BigDecimal.
9489073,2,1,3,java.math.BigDecimal,"The outputText doesn't have a converter, so will merely call toString() on its value binding (the BigDecimal.)"
9489073,2,1,3,java.math.BigDecimal,"The rules for EL type coercion are documented in JSR 245:  Coerce A to Number type N  If A is Number, coerce quietly to type N using the following algorithm:    If N is BigDecimal,    If A is a BigInteger, return new BigDecimal(A) Otherwise, return new BigDecimal(A.doubleValue())     If you want to use the user's browser locale to interpret number formats, remove the locale attribute."
9516644,2,0,1,java.math.BigDecimal,"Note that this class uses BigDecimal for representing the balance, since it is not recommended to use floating point numbers for it."
9521479,2,0,2,java.math.BigDecimal,"I recommend you generate the initial numbers ('Number entered') as a stacj of characters, and perform all math with BigDecimal."
9526088,2,0,1,java.math.BigDecimal,"This is so interesting, because the obvious, double instead of BigDecimal, is not the case."
9525723,2,0,1,java.math.BigDecimal,It returns a Double unless the setParseBigDecimal(true) has been called but you'd get a cast error if you tried to cast a Double to a BigDecimal.
9525723,2,0,1,java.math.BigDecimal,Is suspect that somewhere you are going from a String to a double or float which is truncating the precision of the BigDecimal.
9525723,2,0,1,java.math.BigDecimal,Make sure that you are using the String constructor for BigDecimal: code.
9525723,2,0,1,java.math.BigDecimal,This does a character-by-character processing of the string to create the BigDecimal without a loss in precision.
9525723,2,0,1,java.math.BigDecimal,If you provide more details (like many comments have asked) and show the code that is actually creating the BigDecimal than I'll edit my answer to provide more information.
9526381,2,0,3,java.math.BigDecimal,"See: http://en.wikipedia.org/wiki/Parity_(mathematics) BigDecimal handles decimals, which are not even numbers http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html If you must, you can convert the big decimal to the nearest possible Integer: code."
9526475,2,0,3,java.math.BigDecimal,"This method avoids losing any precision or incurring any overflow as can happen when converting a BigDecimal to an int, long or double."
9536450,2,1,3,java.math.BigDecimal,Use BigDecimal or store your amounts of money in cents and use long.
9536450,2,1,3,java.math.BigDecimal,0.1) Use BigDecimal instead.
9560977,2,1,3,java.math.BigDecimal,shouldn't this be either BigDecimal or a fixed point integer to avoid floating point inaccuracy?)
9561921,1,0,0,java.math.BigDecimal,"and the rules (rule section): http://i1145.photobucket.com/albums/o518/kxtg2431/rule.png The code generated was this.getId() == (new BigDecimal(""1"")).negate() which produced compile error."
9586729,1,0,0,java.math.BigDecimal,"I have a private arraylist with classes that include two longs, a float and a BigDecimal."
9600536,2,0,2,java.math.BigDecimal,Only long can represent this value without error (plus BigInteger and BigDecimal) All other data types have different errors.
9600396,2,1,7,java.math.BigDecimal,"Look at those and it's obvious why the third decimal place is 5 for f and 4 for d. If you want to preserve decimal digits, you should be considering using BigDecimal."
9602502,2,1,4,java.math.BigDecimal,"If you need floating-point numbers with arbitrary precision, use BigDecimal instead of double."
9639267,2,0,2,java.math.BigDecimal,"Unless you really need to use primatives, BigDecimal should handle that for you."
9639573,2,1,1,java.math.BigDecimal,"If you can use BigDecimal, that could work - but I don't think that qualifies as a Java primitive type."
9648125,2,0,1,java.math.BigDecimal,"Otherwise I would use double with appropriate rounding, or BigDecimal."
9655901,2,0,1,java.math.BigDecimal,Consider using BigDecimal if exactness is required.
9655908,2,1,2,java.math.BigDecimal,BigDecimal could be what you want.
9655930,2,0,0,java.math.BigDecimal,They need to be handled as either floating point (float or double) or as BigDecimal.
9667361,2,1,4,java.math.BigDecimal,The solution is to either use BigDecimal or round your result.
9667361,2,1,4,java.math.BigDecimal,If you use BigDecimal it will show the exact values you really have.
9667361,2,1,4,java.math.BigDecimal,"i.e. you can see that 0.1 and 0.3 results in the same value as 0.4, whereas 0.3 - 0.1 doesn't result in the same value as 0.2  BTW to round the answer without using BigDecimal you can use code."
9667419,2,0,4,java.math.BigDecimal,If you're desperate for precision use BigDecimal.
9670362,1,0,0,java.math.BigDecimal,BigDecimal/Boolean/String)  This is what I'm thinking as a solution: code.
9679785,2,0,0,java.math.BigDecimal,Does it not create the hbm-file correctly if you just use the BigDecimal-Type in your method??
9686675,2,0,1,java.math.BigDecimal,"EDIT: Michael posted a better description of your problem, but still you should take a look at BigDecimal."
9713309,1,0,3,java.math.BigDecimal,how to convert percentage String to BigDecimal?
9713309,1,0,3,java.math.BigDecimal,"In java, how to convert percentage String to BigDecimal ?"
9730289,2,0,3,java.math.BigDecimal,That is then converted to the BigDecimal.
9730289,2,0,3,java.math.BigDecimal,I solved this by using decimalFormat() to retain the number of significant digits I wanted and using that string in the new BigDecimal() conversion.
9725221,2,1,1,java.math.BigDecimal,Try using java.math.BigDecimal
9726727,2,0,1,java.math.BigDecimal,This could also come in to play with storing the result as a double instead of a BigDecimal).
9726727,2,0,1,java.math.BigDecimal,"For more information on BigDecimal, check the API."
9741117,2,1,1,java.math.BigDecimal,":  Float instead of float Double instead of double BigDecimal  Primitives can't take the value null, they always default to 0 instead."
9759975,1,0,4,java.math.BigDecimal,Comparing BigDecimal and int in Java.
9759975,1,0,4,java.math.BigDecimal,Which one is the best way of comparing a BigDecimal and an int in Java : coverting the BigDecimal to int or converting int to BigDecimal ?
9760002,2,1,5,java.math.BigDecimal,"If you expect the BigDecimal value to be really big (i.e. outside the range of int values, which is -231 to 231-1) and/or to contain decimal digits, or simply want to play safe, you should convert the int to BigDecimal to avoid overflow / truncation errors."
9760007,2,0,0,java.math.BigDecimal,"One reason not to convert int to BigDecimal is the fact that you would be creating a new object, therefore you are really throwing garbage on your heap to perform equality."
9760012,2,0,1,java.math.BigDecimal,You want to convert the int to a BigDecimal.
9760012,2,0,1,java.math.BigDecimal,This is because you won't always be able to convert a BigDecimal to an int; you'll lose any information after the decimal point and the value of the BigDecimal might be outside the range of an int.
9760013,2,0,0,java.math.BigDecimal,"As BigDecimal extends the range of int you will have to convert the int into BigDecimal to be sure they can be compared, anyhow."
9770401,1,0,2,java.math.BigDecimal,EL expression: passing null as value of BigDecimal field.
9770401,1,0,2,java.math.BigDecimal,I have class with BigDecimal property.
9770401,1,0,2,java.math.BigDecimal,"When I bind to it EL expression and passing null - valueExpression.set(context, null), new value of property becomes to be BigDecimal.ZERO."
9770401,1,0,2,java.math.BigDecimal,Is there any way to pass null to BigDecimal field without converting it to zero?
9770836,1,0,0,java.math.BigDecimal,"For some reason, Eclipselink gives a BigDecimal for each value in the map, instead of Boolean."
9770836,1,0,0,java.math.BigDecimal,"and got the same result (BigDecimal instead of Boolean) EDIT2: We are using Eclipselink 2.3.0, also tried with 2.3.2 with same result."
9783901,2,0,3,java.math.BigDecimal,It gives you more control over the final scale of the returned BigDecimal.
9795364,1,0,8,java.math.BigDecimal,Java BigDecimal precision problems.
9795364,1,0,8,java.math.BigDecimal,Or even though I use BigDecimal code.
9796649,2,0,5,java.math.BigDecimal,"First never, never use the double constructor of BigDecimal."
9796649,2,0,5,java.math.BigDecimal,It may be the right thing in a few situations but mostly it isn't If you can control your input use the BigDecimal String constructor as was already proposed.
9795429,2,0,3,java.math.BigDecimal,"The constructor BigDecimal(double) will make a BigDecimal corresponding to the exact floating-point representation of 0.1, which is not exactly equal to 0.1."
9795747,2,1,20,java.math.BigDecimal,"The new BigDecimal(double) constructor gets all the imprecision of the double, so by the time you've said 0.1, you've already introduced the rounding error."
9796203,1,0,2,java.math.BigDecimal,Formatting a BigDecimal in Apache Velocity.
9796203,1,0,2,java.math.BigDecimal,"However, some are of type BigDecimal and they don't seem to be formatted at all."
9796203,1,0,2,java.math.BigDecimal,Is there a convenient way to format a BigDecimal with Velocity as a currency?
9821759,2,1,1,java.math.BigDecimal,Use BigDecimal to avoid this.
9862219,1,0,0,java.math.BigDecimal,NullPointerException when adding to BigDecimal.
9862219,1,0,0,java.math.BigDecimal,"I am working with money values, so I have used BigDecimal."
9862277,2,0,0,java.math.BigDecimal,"If you would have a look at API you would see that : add(BigDecimal augend)  Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale())."
9877215,1,0,2,java.math.BigDecimal,Round BigDecimal to the nearest integral value.
9877215,1,0,2,java.math.BigDecimal,How would I CORRECTLY round a BigDecimal to the nearest whole value?
9889352,2,0,2,java.math.BigDecimal,Look around a bit for a nice one (see also Javascript BigDecimal library?
9891473,2,0,2,java.math.BigDecimal,"Instead, use BigDecimal."
9895751,1,0,0,java.math.BigDecimal,"it means for example if the category field in ad is ""estate"" then the fields in 'ad' should be String header,String description BigDecimal price, String location, short bedrooms and if the category is ""Baby Sitting!!"""
9895751,1,0,0,java.math.BigDecimal,"the fields should be String header , short hours , BigDecimal fee."
9900388,2,0,3,java.math.BigDecimal,you can use BigDecimal to convert a byte[] to a big integer.
9906190,2,0,2,java.math.BigDecimal,You might want to use BigDecimal if you want the exact number [or at least control the error].
9906201,2,0,1,java.math.BigDecimal,Use BigDecimal to perform floating point calculations with precision.
9906207,2,0,7,java.math.BigDecimal,"If you want values with an exact number of decimal digits, you should use a type which stores values in a decimal-centric manner, such as BigDecimal."
9906210,2,0,1,java.math.BigDecimal,"To reveal exactly what number a value, such as 9.99 represents you could let BigDecimal print the value."
9906468,2,1,4,java.math.BigDecimal,Look up the BigDecimal class.
9911064,2,0,1,java.math.BigDecimal,You might want to use BigDecimal to get exactly a decimal number [but you will again encounter rounding errors when you try to get 1/3].
9911070,2,1,10,java.math.BigDecimal,"If you care about precise decimal arithmetic, use BigDecimal."
9911134,2,0,1,java.math.BigDecimal,"As suggested earlier, if you need completely exact values then use BigDecimal which stores its values differently."
9924615,2,1,2,java.math.BigDecimal,"Well one way to get more precision is to use the BigDecimal class, which can (in theory) give you in the region of 2 BILLION decimal digits of precision."
9932239,1,0,2,java.math.BigDecimal,java BigDecimal arithmaticException invalid operation.
9932295,2,1,3,java.math.BigDecimal,"If you are raising things to negative exponents, you must specify a MathContext in BigDecimal.pow(int, MathContext) so it knows how much precision to use -- otherwise, BigDecimal will try to compute it to infinite precision, which is not possible for some values."
9934188,2,0,0,java.math.BigDecimal,"To multiply a BigDecimal by a power of 10 it's probably clearer to the reader (and more efficient, too) to use movePointLeft and movePointRight: Instead of tempValue.multiply(ten.pow(exponent)) you would use tempValue.movePointRight(exponent)."
9942012,1,0,0,java.math.BigDecimal,"Difference between BigDecimal.ONE and new BigDecimal(""1"")."
9942027,2,0,10,java.math.BigDecimal,"As BigDecimal is immutable, you can reuse an existing instance freely - so it makes sense to refer to a ""pre-canned"" object where you know what the value will be."
9956509,2,0,4,java.math.BigDecimal,"If you need arbitrarily precise arithmetic in Java, consider using BigInteger and BigDecimal."
9958355,1,0,5,java.math.BigDecimal,Is it dangerous converting from float to BigDecimal then back?
9958355,1,0,5,java.math.BigDecimal,"Anyway, my current plan for generation is to convert float values to BigDecimal, do the necessary arithmatic, then convert back to float."
9958355,1,0,5,java.math.BigDecimal,"I want to convert to BigDecimal, so I can avoid rounding issues."
9959288,1,0,6,java.math.BigDecimal,BigDecimal and Money.
9959288,1,0,6,java.math.BigDecimal,"I've researched and found that when dealing with currency, the best way to go about doing calculations is by the BigDecimal class."
9959288,1,0,6,java.math.BigDecimal,"Question:  Since I want to use the BigDecimal class in my calculations, should I change all my methods that make calculations involving doubles to a BigDecimal?"
9959401,2,0,1,java.math.BigDecimal,"Yes, BigDecimal is certainly the correct way (floating point almost never)."
9959401,2,0,1,java.math.BigDecimal,"So to make the ugly BigDecimal interface even uglier, you probably need some help functions (multiplyRounded?"
9965829,1,0,0,java.math.BigDecimal,"I know I could use BigDecimal, but it map to varchar(255) on PostgreSQL."
9987212,2,0,2,java.math.BigDecimal,"For that, I suggest that you use BigDecimal instead."
9987212,2,0,2,java.math.BigDecimal,It has a method divide that takes another BigDecimal and a MathContext.
9987212,2,0,2,java.math.BigDecimal,"If all you need is rounding toward zero, you can also use BigDecimal.divideToIntegralValue."
9992006,1,0,17,java.math.BigDecimal,Equals operator for zeros (BigDecimal / Double) in Java.
9992006,1,0,17,java.math.BigDecimal,"BigDecimal.ZERO.equals(BigDecimal.valueOf(0.0)) returns false, while BigDecimal.ZERO.equals(BigDecimal.valueOf(0)) returns true."
9992193,2,0,0,java.math.BigDecimal,BigDecimal will compare the scale length in the equals operation.
9992290,2,0,0,java.math.BigDecimal,"For performance considerations BigDecimal, BigInteger caches small values  0 to 15 in case of BigDecimal (without fractions) BigDecimal.ZERO  will be    new BigDecimal(BigInteger.ZERO, 0,  0, 1) & valueOf method typically picks up from cache for 0 to 15 :)"
9992044,2,1,30,java.math.BigDecimal,BigDecimal 'equals' compares the value and the scale.
9992051,2,0,4,java.math.BigDecimal,"BigDecimal.ZERO has the value of ""0"", so its scale is 0."
9992051,2,0,4,java.math.BigDecimal,"If you want to compare values, use BigDecimal.compareTo: code."
10023446,2,0,3,java.math.BigDecimal,Its only when you convert to BigDecimal or perform an arithmetic operation that you will see this representation error.
25858065,2,0,0,java.math.BigDecimal,"It has been a very long time, but for the sake of completeness, the easiest fix, it to change your JPA Entity to defined min and max as java.math.BigDecimal."
25858065,2,0,0,java.math.BigDecimal,The java.math.BigInteger and java.math.BigDecimal types provide direct conversion of SQL Numeric and Number data types.
10030507,1,0,0,java.math.BigDecimal,Format a BigDecimal so that 100 shows up as 100 instead of 1.0E+2.
10030507,1,0,0,java.math.BigDecimal,I am outputing a BigDecimal using EL expression as follows: #{beanActions.overallScore}.
10032911,1,0,3,java.math.BigDecimal,Why does the division of two BigDecimal numbers in Java throws the ArithmeticException?
10032911,1,0,3,java.math.BigDecimal,An attempt to divide two BigDecimal numbers in Java throws the java.lang.ArithmeticException.
10032968,2,1,6,java.math.BigDecimal,From the BigDecimal#divide(BigDecimal) documentation:  ...if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown.
10032978,2,0,1,java.math.BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown."
10033794,2,1,14,java.math.BigDecimal,You will need either BigInteger or BigDecimal: code.
10038749,1,0,21,java.math.BigDecimal,"Java, extract just the fractional part of a BigDecimal?"
10038749,1,0,21,java.math.BigDecimal,"In Java, I'm working with the BigDecimal class and part of my code requires me to extract the fractional part from it."
10038749,1,0,21,java.math.BigDecimal,BigDecimal does not appear to have any built in methods to help me get the number after the decimal point of a BigDecimal.
10038770,2,1,34,java.math.BigDecimal,I would try bd.remainder(BigDecimal.ONE)
10051344,2,0,2,java.math.BigDecimal,"you are looking either for the class BigDecimal or if you just need integers, than BigInteger."
10053258,2,0,0,java.math.BigDecimal,You can use BigDecimal; For example: code.
10053258,2,0,0,java.math.BigDecimal,or without BigDecimal objects: code.
10060158,1,0,6,java.math.BigDecimal,Set all BigDecimal operations to a certain precision?
10060158,1,0,6,java.math.BigDecimal,"Currently, I find it a massive nuisance to have to specify the accuracy at every instantiation or mathematical operation of a BigDecimal."
10060158,1,0,6,java.math.BigDecimal,Is there a way to set a 'global accuracy' for all BigDecimal calculations?
10060380,2,0,2,java.math.BigDecimal,Is there a way to set a 'global accuracy' for all BigDecimal calculations?
10060380,2,0,2,java.math.BigDecimal,"(Extending BigDecimal would work too, and that is arguable neater than a wrapper class.)"
10060380,2,0,2,java.math.BigDecimal,"You said this in a comment:  I really don't want to write my own Decimal module, I just want to understand why BigDecimal is being so uncooperative."
10060380,2,0,2,java.math.BigDecimal,"However ...) As with all complicated utility classes, the design of BigDecimal is a compromise that is designed to meet the requirements of a wide range of use-cases."
10060380,2,0,2,java.math.BigDecimal,with a global MathContext controlling everything or a MathContext attached to each BigDecimal) then that would introduce all sorts of other complexities; e.g.
10060201,2,1,5,java.math.BigDecimal,"(Almost) Original Not as simple, but you can create a MathContext and pass it to all your BigDecimal constructors and the methods performing operations."
10060201,2,1,5,java.math.BigDecimal,"Revised Alternatively, you can extend BigDecimal and override any operations you want to use by supplying the right MathContext, and using the rounding version of divide: code."
10060205,2,0,3,java.math.BigDecimal,You could create a class that extends BigDecimal and sets the precision automatically for you.
10060208,2,0,0,java.math.BigDecimal,"In this case you don't have to override all operation of BigDecimal (in extending case), just ones you use."
10060208,2,0,0,java.math.BigDecimal,It gives you control over all instances and doesn't force to follow BigDecimal contract.
10080084,1,0,9,java.math.BigDecimal,How to convert Double.POSITIVE_INFINITY to BigDecimal?
10080084,1,0,9,java.math.BigDecimal,"I tried BigDecimal.valueOf(Double.POSITIVE_INFINITY), but kept getting NumberFormatException Thanks"
10080106,2,0,14,java.math.BigDecimal,You cannot represent infinity in BigDecimal.
10080137,2,1,13,java.math.BigDecimal,This behavior corresponds to the documented way the valueOf method is supposed to work:  Parameters: val - double to convert to a BigDecimal.
10080137,2,1,13,java.math.BigDecimal,Returns: a BigDecimal whose value is equal to or approximately equal to the value of val.
22686168,2,0,0,java.math.BigDecimal,You cannot simply derive a child class from BigDecimal to support NaN and Infinite.
22686168,2,0,0,java.math.BigDecimal,"BigDecimal has a number of constructors, e.g."
22686168,2,0,0,java.math.BigDecimal,BigDecimal(double val).
22686168,2,0,0,java.math.BigDecimal,"If you extends BigDecimal to MyBigDecimal, I think you also need a similar constructor  which is MyBigDecimal(double val)."
22686168,2,0,0,java.math.BigDecimal,"More unfortunately, BigDecimal is a read only class, i.e. you have no way to reset its value using a function like setValue(...)."
22686168,2,0,0,java.math.BigDecimal,So you can never assign NaN or infinite to a BigDecimal extended class.
22686168,2,0,0,java.math.BigDecimal,It is pretty strange that Oracle hasn't supported BigDecimal NaN or infinite in JAVA 7.
22686168,2,0,0,java.math.BigDecimal,But I believe BigDecimal will finally support these values.
22686168,2,0,0,java.math.BigDecimal,I would suggest don't touch NaN or infinite when you use BigDecimal at this moment.
22686168,2,0,0,java.math.BigDecimal,"Otherwise after NaN and infinite are supported, user defined MyBigDecimal could conflict with the new BigDecimal interfaces and inevitably causes pretty much overhead coding"
10107000,2,0,1,java.math.BigDecimal,Using BigDecimal.divide(...) instead of double would prevent trimming but would be evern slower.
10137540,2,0,1,java.math.BigDecimal,If you need to restrict the number of fraction digits internally use BigDecimal where you can set the scale and thus define the number of fraction digits it represents.
10138868,2,0,0,java.math.BigDecimal,"If you want decimal places you have to use a decimal radix, either a BigDecimal or the result of DecimalFormat.format()."
10202770,2,0,2,java.math.BigDecimal,"If you need arbitrary precision, use BigDecimal."
10202770,2,0,2,java.math.BigDecimal,"If you need BigDecimal, then it's more complicated and you probably need to do things involving instanceof."
10249646,1,0,1,java.math.BigDecimal,"Map<String, SortedMap<LocalDate, BigDecimal>> graphData contains the data for all series, where key of the map is the series name."
10269045,1,0,22,java.math.BigDecimal,"Format a BigDecimal as String with max 2 decimal digits, removing 0 on decimal part."
10269045,1,0,22,java.math.BigDecimal,I have a BigDecimal number and i consider only 2 decimal places of it so i truncate it using: code.
10457320,2,1,28,java.math.BigDecimal,"I used DecimalFormat for formatting the BigDecimal instead of formatting the String, seems no problems with it."
10271802,2,1,3,java.math.BigDecimal,BigDecimal allows handling of significant figures correctly.
10271885,2,0,0,java.math.BigDecimal,"I believe this is closely related to the following question: Format double values using a maximum of five total digits, rounding decimal digits if necessary There's an answer in the question I linked to which uses MathContext and BigDecimal (like maybeWeCouldStealAVan's answer)."
10295192,2,0,0,java.math.BigDecimal,"As you are using BigDecimal, you probably have a same sound database design already, but that superfluous (?)"
10297980,2,0,0,java.math.BigDecimal,"If you need more range, you'll have to resort to something like a bignum library, such as BigDecimal."
10298029,2,0,0,java.math.BigDecimal,BigDecimal is better for your requirement.
10313578,2,1,1,java.math.BigDecimal,"If you want to be sure to never have this kind of things, you're maybe looking for BigDecimal : http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html Basic rules :  don't use equality tests when dealing with floating point numbers (you must test gaps) round numbers you're displaying (usually using DecimalFormat) don't use floating point numbers for financial applications the float is generally the way to go for scientific or industrial operations, as long as you understand IEEE754"
10313643,2,0,1,java.math.BigDecimal,Or you can use BigDecimal which takes care of this issue for you.
10319112,1,0,2,java.math.BigDecimal,Error with BigDecimal.
10319156,2,0,5,java.math.BigDecimal,The problem is that the result of the division is a non-terminating decimal number which can't be fully represented in a BigDecimal as is (as that would require an unlimited amount of memory).
10319156,2,0,5,java.math.BigDecimal,"Thus you need to restrict the number of its decimal digits using the two- (or three-) parameter version of BigDecimal.divide, e.g."
10326656,1,0,8,java.math.BigDecimal,Java provides the BigInteger and BigDecimal classes (and scala provides a nice thin wrapper around them).
10332604,2,0,0,java.math.BigDecimal,Check java.math.BigDecimal.round(MathContext).
10346274,1,0,0,java.math.BigDecimal,Spring MVC 3 hibernate 3.5 BigDecimal JPA annonciation.
10346274,1,0,0,java.math.BigDecimal,Actually i work on java web application using spring mvc 3 and hibernate 3.5 and extjs for the user interface; my probleme is that when my model class have BigDecimal attribute like this one  code.
10383392,1,0,6,java.math.BigDecimal,Extract number decimal in BigDecimal.
10383392,1,0,6,java.math.BigDecimal,How to extract a number after the decimal point using BigDecimal ?
10383392,1,0,6,java.math.BigDecimal,BigDecimal d = BigDecimal.valueOf(1548.5649);  result : extract only : 5649
10383460,2,0,5,java.math.BigDecimal,Try BigDecimal.remainder: code.
10383503,2,0,0,java.math.BigDecimal,"The easiest way is probably to transform the BigDecimal into a String, and take a substring: code."
10384581,1,0,1,java.math.BigDecimal,Retrieve number after point in BigDecimal number without RoundingMode.
10384581,1,0,1,java.math.BigDecimal,how to keep only 3 value after point in BigDecimal ?
10384695,2,0,0,java.math.BigDecimal,BigDecimal isn't intended to be used with such limitations.
10386596,1,0,2,java.math.BigDecimal,I might be totally something else that is causing the problem because I read about BigDecimal and tried to use it to no avail.
10411414,1,0,7,java.math.BigDecimal,"I don't actually care about rounding mode in this case, because these double values are gained from a BigDecimal with the given scale, so their number of decimal places is always lesser or equal than the number of decimal places I want to print."
10413773,2,1,16,java.math.BigDecimal,"To represent currencies in Java, you should be using BigDecimal."
10413645,1,0,2,java.math.BigDecimal,Converting String to BigDecimal in GWT.
10413645,1,0,2,java.math.BigDecimal,How can one convert that String to a BigDecimal?
10425061,2,1,9,java.math.BigDecimal,To get the BigDecimal value entered you can just go:  BigDecimal value = myTextBox.getValue(); Your BigDecimalBox.java: code.
10416314,2,0,0,java.math.BigDecimal,Guys implement in following way because it is suggested to do calculations with BigDecimal and BigInteger.
10425202,2,0,0,java.math.BigDecimal,You should use BigDecimal or Decimal.
10430449,2,1,2,java.math.BigDecimal,"A (more expensive, but also more logical) alternative is to use a BigDecimal."
21845694,2,0,4,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal class instead."
21845694,2,0,4,java.math.BigDecimal,Numbers and Strings covers BigDecimal and other useful classes provided by the Java platform.
10436980,2,0,1,java.math.BigDecimal,Perhaps the BigDecimal class is something for you.
10445218,2,0,2,java.math.BigDecimal,I've also experimented with BigDecimal: code.
10457248,2,0,5,java.math.BigDecimal,"(For completeness, using a BigDecimal with a ROUND_FLOOR rounding mode is also an option.)"
10481208,2,1,11,java.math.BigDecimal,Use BigDecimal instead.
10481221,2,0,1,java.math.BigDecimal,Use BigDecimal instead.
10481241,2,0,1,java.math.BigDecimal,BigDecimal will help you.Below example might be helpful for you code.
10489948,2,0,0,java.math.BigDecimal,You should use the double primitive type or BigDecimal for arbitrary precision.
10495662,2,0,5,java.math.BigDecimal,BigDecimal would be a more natural representation.
10520218,2,1,3,java.math.BigDecimal,Create a Report Group with the following group expression: $V{GroupCount} == new BigDecimal(0) ?
10519135,2,0,0,java.math.BigDecimal,For rounding use BigDecimal code.
10520608,1,0,5,java.math.BigDecimal,"I have been reading this thread which suggests that I could use BigDecimal, however am unable to get this to work - is this the best approach or should I try something else ?"
10531444,1,0,0,java.math.BigDecimal,Possible Duplicate: Generating random BigDecimal value from given range   How to create a lot of values BigDecimal randomly between 0 and 1 ?
10540422,2,0,4,java.math.BigDecimal,"I think you are looking for BigDecimal, which lets you control the granularity, as you want, for example with its round() method."
10541946,2,0,1,java.math.BigDecimal,Use a BigDecimal for precise floating point calculations.
10541950,2,0,0,java.math.BigDecimal,Use BigDecimal for such precise allocations.
10541956,2,1,4,java.math.BigDecimal,What you need to use for exact percision is the BigDecimal object: code.
10551479,2,0,2,java.math.BigDecimal,I'd also change int to BigDecimal otherwise you can't speak about a real price format.
12687977,2,0,7,java.math.BigDecimal,"If you need both speed and precision, I've developed a fast DoubleFormatUtil class at xmlgraphics-commons: http://xmlgraphics.apache.org/commons/changes.html#version_1.5rc1 You can see the code there: http://svn.apache.org/viewvc/xmlgraphics/commons/trunk/src/java/org/apache/xmlgraphics/util/DoubleFormatUtil.java?view=markup It's faster than both DecimalFormat/BigDecimal, as fast as Double.toString, it's precise, it's well tested."
10553833,2,0,0,java.math.BigDecimal,"I haven't benchmarked this, but how about using BigDecimal?"
10553910,1,0,0,java.math.BigDecimal,Extend BigDecimal number.
10553910,1,0,0,java.math.BigDecimal,"finaly i want to generate number : 0.0025004 and this number is generated by: add n position after d then my number was : 0.0025000 and finaly add 0.000004 to my number 4 is r. I know there are a several ways to do, but i want to avoid loop  and use a maximum fonctinnality of BigDecimal"
10557540,2,0,2,java.math.BigDecimal,JRealNumberField and JLocalizedRealNumberField are text fields for BigDecimal.
10575685,2,0,0,java.math.BigDecimal,"If you need to handle longer strings of numbers, both BigInteger and BigDecimal sport constructors that accept Strings."
10583187,2,0,1,java.math.BigDecimal,"I would also suggest using BigDecimal class that will allways yield correct result, for longs and doubles cant represent all decimal numbers in their ranges."
10597527,1,0,2,java.math.BigDecimal,How do I concatenate two numbers in BigDecimal?
10597527,1,0,2,java.math.BigDecimal,Is there an instruction with BigDecimal to make it directly ?
10597582,2,1,7,java.math.BigDecimal,"Use the fact that BigDecimal can parse stings, and that strings are easy to concatenate."
10597594,2,0,1,java.math.BigDecimal,"You could either:  convert them to strings, concatenate them and then return a new BigDecimal object divide a and b by 1000 and them add them to d"
10602087,1,0,1,java.math.BigDecimal,"Update: Thanks for help, Guys do you know any way to make floor rounding on BigDecimal object without calling doubleValue method?"
10602139,2,0,2,java.math.BigDecimal,Use BigDecimal...
10603336,1,0,1,java.math.BigDecimal,BigDecimal floor rounding goes wrong.
10603336,1,0,1,java.math.BigDecimal,"It seems that even using BigDecimal I can't get correct value for multiplying -0.07 by 200, is there anything that I can do to get exactly -14.0?"
10603397,2,0,3,java.math.BigDecimal,"-0.07 cannot be represented exactly as a double, so the literal value passed to the BigDecimal constructor ends up being slightly different than -0.07."
10603397,2,0,3,java.math.BigDecimal,"BigDecimal just takes that approximate value and runs with it, producing the results you're seeing."
10603401,2,0,4,java.math.BigDecimal,The problem is that new BigDecimal(-0.07); uses a double literal to initialize the BigDecimal - so the error still happens.
10603401,2,0,4,java.math.BigDecimal,Use the BigDecimal constructor that takes a String instead.
10603413,2,0,2,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
10603413,2,0,2,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which is exactly equal to 0.1, as one would expect."
10603651,1,0,10,java.math.BigDecimal,"What causes ""Non-terminating decimal expansion"" exception from BigDecimal.divide?"
10603707,2,0,1,java.math.BigDecimal,You are getting this error because of the division:  The BigDecimal by default always tries to return the exact result of an operation.
10603707,2,0,1,java.math.BigDecimal,See also: Java docs on BigDecimal.
10603737,2,0,2,java.math.BigDecimal,"By default, BigDecimal attempts to return the exact value of the given division expression."
10631411,2,1,1,java.math.BigDecimal,I would implement your current algorithim using BigDecimal first.
10631411,2,1,1,java.math.BigDecimal,When this works to your satisfaction you can look at replacing the functionality BigDecimal provides (assuming you want to write your own)
10631844,2,0,6,java.math.BigDecimal,setScale() of BigDecimal will do it for you on server side code.
10632906,1,0,1,java.math.BigDecimal,Is BigDecimal from Java or decimal from C# suitable?
10635687,1,0,0,java.math.BigDecimal,"Using BigDecimal, how can I convert 2.00 to 2, 1.1230 to 1.123 etc?"
10635723,2,1,3,java.math.BigDecimal,"For the first part, BigDecimal.stripTrailingZeros() I'm not at all sure what you mean about the second part, though."
10636754,1,0,3,java.math.BigDecimal,I want to use BigDecimal's String constructor while reading an input file.
10636780,2,1,6,java.math.BigDecimal,The BigDecimal constructor - like Double.parseDouble etc - always uses '.'
10637232,1,0,6,java.math.BigDecimal,How can I divide properly using BigDecimal.
10637555,1,0,3,java.math.BigDecimal,I am using JAXB (through a mess of JaxWS and CXF) and attempting to marshal the BigDecimal type into a string (number) and int (exponent) because we now have a front end which can't interpret BigDecimal thanks to locale issues.
10637555,1,0,3,java.math.BigDecimal,"What I'm trying is to use an XmlAdapter to convert BigDecimal into my own type, BigDecimalUnScaled."
10637594,1,0,1,java.math.BigDecimal,"Assume I start with BigDecimal, then convert it do a double and then back to decimal."
10638057,2,0,0,java.math.BigDecimal,Create BigDecimal based on Integer or on String: code.
10649481,2,1,1,java.math.BigDecimal,"For example, it's not in BigInteger, AtomicInteger, AtomicLong, BigDecimal."
10653071,1,0,1,java.math.BigDecimal,Diplay 0.20 instead 0.2 in BigDecimal.
10653071,1,0,1,java.math.BigDecimal,I have juste one question :)  BigDecimal val = BigDecimal.valueOf(0.20);           System.out.println(a);  i want to store in val a value 0.20 and not 0.2.
10653090,2,0,5,java.math.BigDecimal,"You then ask it to format your BigDecimal, and it will give you the string."
10653747,1,0,2,java.math.BigDecimal,Format of BigDecimal number.
10653805,2,0,0,java.math.BigDecimal,Once you store 0.2 or 0.20 in a BigDecimal they are indistinguishable from each other
10653807,2,0,5,java.math.BigDecimal,BigDecimal remembers the trailing zeros - with some significant side-effect: code.
10653817,2,1,1,java.math.BigDecimal,You could use the String constructor of BigDecimal.
10653817,2,1,1,java.math.BigDecimal,See http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#BigDecimal(java.lang.String)
10653873,2,0,2,java.math.BigDecimal,You're passing a double to BigDecimal.valueOf().
10653873,2,0,2,java.math.BigDecimal,"Pass it a String, and the result will be different, because the scale of the BigDecimal will be deduced from the number of decimals in the String: code."
10654761,1,0,1,java.math.BigDecimal,Extend scale of BigDecimal number.
10654761,1,0,1,java.math.BigDecimal,I have a BigDecimal number and i want to add 0 in some case.
10654761,1,0,1,java.math.BigDecimal,when i change scale of a BigDecimal it return me only a subNumber of my BigDecimal number example :  BigDecimal c = new   BigDecimal(0.1721112427968000094313954596298853517869092775632121988466426373478102735617940027951431710952381083564411002004385868111);           System.out.println(c.setScale(120));  it return : code.
10654761,1,0,1,java.math.BigDecimal,how to return a same number with 0 at last of my BigDecimal number ?
10654847,2,1,2,java.math.BigDecimal,You are losing precision because your argument to BigDecimal is being truncated to a double.
10655254,1,0,7,java.math.BigDecimal,How BigDecimal is implemented?
10655254,1,0,7,java.math.BigDecimal,I was reading BigDecimal Class but I was not able to find any information how BigDecimal class stores values in computer memory.
22797688,2,0,3,java.math.BigDecimal,"In addition, BigDecimal has int primitives to represent the scale and precision, scale indicating the number of significant digits right of the decimal point, and precision indicating the number of significant digits total in the number."
23729589,2,0,3,java.math.BigDecimal,The unscaled value of the BigDecimal is stored in a BigInteger.
10657385,1,0,0,java.math.BigDecimal,I have a data object that is holding a meny BigDecimal object as well as String and other type of object in my data object class.
10657385,1,0,0,java.math.BigDecimal,what is the best way to do some common operation on the BigDecimal field like intrest rate  code.
10657568,2,1,2,java.math.BigDecimal,If I had to do that to all BigDecimal fields I would consider extend the BigDecimal and code the treatment on the constructor.
10659073,2,1,5,java.math.BigDecimal,"One way is to use BigDecimal, which has a stripTrailingZeros() method."
10659073,2,1,5,java.math.BigDecimal,"If you don't want to do all your math in BigDecimals, then you can get a string representation of rounded result with %g (which gives you a chance to control the precision), make a BigDecimal out of it, and print the result: code."
10682510,2,0,0,java.math.BigDecimal,OR BigDecimal class for exact digits after decimal.
10685941,2,0,2,java.math.BigDecimal,"You should check out the BigDecimal class, which provides functionality like ROUND_HALF_DOWN, etc, for precision."
10708452,1,0,2,java.math.BigDecimal,Measure double vs BigDecimal.
10708452,1,0,2,java.math.BigDecimal,I wrote simple benchmark that test performance of multyplying doubles vs BigDecimal.
10708452,1,0,2,java.math.BigDecimal,- The same for creating new BigDecimal objects inside a test.
10709005,2,0,1,java.math.BigDecimal,"Not as much, as the relation BigDecimal:double, but well --- (i386-32, client mode, JRE-1.6, linux, oracle, 2Ghz Centrino single core)."
10715240,1,0,0,java.math.BigDecimal,How do I store percent value in MySQL using BigDecimal?
10717842,1,0,3,java.math.BigDecimal,"where:  a, b and c are local BigDecimal variables."
10728169,1,0,2,java.math.BigDecimal,Using setScale in BigDecimal.
10728169,1,0,2,java.math.BigDecimal,"Can anyone helpme out with BigDecimal, I'm a newbie in it I want to round of 24.33 to 25.00 I just need to perform ceiling operation so I did something like this code."
10728251,2,1,1,java.math.BigDecimal,"Also remember BigDecimals are Immutable, and so all operations return a new BigDecimal representing the result of the operation."
10734230,1,0,17,java.math.BigDecimal,Rounding necessary with BigDecimal numbers.
10734230,1,0,17,java.math.BigDecimal,I want to set scale of two BigDecimal numbers a and b .
10734366,2,1,18,java.math.BigDecimal,You have two BigDecimal numbers both of which require over a 1000 decimal places.
10734437,2,0,2,java.math.BigDecimal,"Before reading my answer, you may want to read again javadoc for BigDecimal.setScale, I believe you may have misunderstood the meaning of setScale."
10734437,2,0,2,java.math.BigDecimal,"BigDecimal is represented as (unscaledValue × 10-scale), where unscaledValue is an arbitatrily long integer and scale is a 32-bit integer."
10786616,2,1,8,java.math.BigDecimal,"If you wanted 2.97, you should have used BigDecimal."
10786619,2,0,1,java.math.BigDecimal,If you need indefinite precision you should try using BigDecimal instead of double.
32002569,2,0,0,java.math.BigDecimal,"This solution take into account:  Handle overflow Do not allocate memory like Java8 stream  Do not use slow BigDecimal  It works coorectly for List, because any list contains less that 2^31 int, and it is possible to use long as accumulator."
31313673,2,0,0,java.math.BigDecimal,Here a version which uses BigDecimal instead of double: code.
10795569,1,0,1,java.math.BigDecimal,How to add $ symbol to BigDecimal types.
10795569,1,0,1,java.math.BigDecimal,While setting those values I have to set a value of type BigDecimal and in response I need to get a $ symbol before this value.
10808186,1,0,2,java.math.BigDecimal,I am not sure if BigDecimal will help me in this.
10808218,2,0,0,java.math.BigDecimal,"If you want decimmal places you must use a decimal radix, i.e. BigDecimal, or DecimalFormat."
10808221,2,0,3,java.math.BigDecimal,"If you really want high accuracy on decimal places, you may be better using BigDecimal instead."
10808291,2,1,1,java.math.BigDecimal,If you did want to use BigDecimal: code.
10808291,2,1,1,java.math.BigDecimal,"You may lose accuracy when converting from BigDecimal to float, so if accuracy is a must, do not convert; keep the value as a BigDecimal."
10817403,2,1,11,java.math.BigDecimal,"Depending on the type of your data, you could use BigInteger or BigDecimal."
10819389,1,0,3,java.math.BigDecimal,I need to validate something about several Wicket input fields of type TextField<BigDecimal> (namely that the sum of percentages is 100).
10819623,2,0,2,java.math.BigDecimal,"However, there are three somewhat ugly casts in the above method, and one of those (Component -> TextField<BigDecimal>) produces an ""unchecked cast"" warning."
10833762,2,0,0,java.math.BigDecimal,"As an example consider BigDecimal class, in this class the methods equals and compareTo are not consistent between each other: The equals documentation says:  public boolean equals(Object x) Compares this BigDecimal with the specified Object for equality."
10833762,2,0,0,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal   only if they are equal in value and scale (thus 2.0 is not equal to   2.00 when compared by this method)."
10849780,2,0,2,java.math.BigDecimal,"However, my first thought reading the title was that a BigDecimal would be a valid representation."
10849780,2,0,2,java.math.BigDecimal,"That said, if you want to convert to decimal then it's presumably because there are floating ponit/rounding issues with the value of d, which will still be present in the BigDecimal representation as it's being constructed based on d. The best approach to get around this is to use BigDecimals from the get-go, using their String constructor - so there won't be any instances of floating-point rounding."
10857023,1,0,0,java.math.BigDecimal,Getting java.lang.IllegalStateException: Could not execute method of the activity after adding BigDecimal varibles.
10857023,1,0,0,java.math.BigDecimal,All- My project (calculating tips) worked fine until I added some BigDecimal variables to help with rounding.
10858891,1,0,0,java.math.BigDecimal,Convert BigDecimal to a type that can be shown in a ViewText field.
10858891,1,0,0,java.math.BigDecimal,I have heard that BigDecimal is a good way to do this but it was very difficult to get the variables to a type where they could become BigDecimal variables (View->String->Float->BigDecimal) and then to get them to a type where they could be outputted (BigDecimal->?).
10858891,1,0,0,java.math.BigDecimal,because I can't go from BigDecimal to String.
10882549,1,0,2,java.math.BigDecimal,"BigDecimal in JSTL, divide by int or double returns integer."
10882549,1,0,2,java.math.BigDecimal,Where amount is BigDecimal in Java and totalInstallments is int.
10882999,2,0,3,java.math.BigDecimal,You would use the divide() method on the BigDecimal.
10882999,2,0,3,java.math.BigDecimal,"That said, if you do want to do this in the view you have to define a JSTL function in a tag library and create a static version of divide which accepts the BigDecimal and the int you are diving by."
10883308,1,0,1,java.math.BigDecimal,How to handle rounding errors in Java's BigDecimal.
10883308,1,0,1,java.math.BigDecimal,I'm working with open source project (axil) that implements a scripting engine inside of java applications and I've hit a major stumbling block while trying to utilize BigDecimal's rounding.
10883308,1,0,1,java.math.BigDecimal,"It seems that BigDecimal is converting my input to scientific notation and then applying my passed in precision to the coefficient of the SN representation of the number, rather than to its non-SN representation."
10883308,1,0,1,java.math.BigDecimal,"For example: new BigDecimal(""-232454.5324"").round(new MathContext(2, RoundingMode.HALF_UP)).toString() produces a result of -2.3E+5."
10886534,2,0,1,java.math.BigDecimal,BigDecimal's logic is correct here.
10883502,2,1,5,java.math.BigDecimal,"Also note that setScale returns a new BigDecimal instance, it doesn't change the scale of the current instance."
10891659,2,0,0,java.math.BigDecimal,u can try this code Convert ur BigDecimal value like this so that its decimal value will be upto 2 places code.
10899429,1,0,7,java.math.BigDecimal,How do I validate precision and scale with BigDecimal?
10899809,2,1,15,java.math.BigDecimal,"The BigDecimal class has three methods which could be of interest for this:  precision(), which returns the number of digits for the unscaled value (for instance, for the number 123.45, the precision returned is 5) scale(), which returns the number of digits after the decimal separator when positive (scale() can be negative, in this case, the unscaled value of the number is multiplied by ten to the power of the negation of the scale."
10899809,2,1,15,java.math.BigDecimal,"For example, a scale of -3 means the unscaled value is multiplied by 1000), stripTrailingZeros(), which returns a BigDecimal with all trailing zeros removed from the representation."
10899809,2,1,15,java.math.BigDecimal,"For instance, to compute the precision and scale for a given BigDecimal b, we can write something like that: code."
10913495,1,0,6,java.math.BigDecimal,"Earlier myString was declared as BigDecimal, but then comparison operator ?= was not working."
10913920,1,0,4,java.math.BigDecimal,"Incidentally, I tried doing the calculation using BigDecimal and got the same result as I did using a double."
10914148,2,1,6,java.math.BigDecimal,"Finally, if you use a BigDecimal, you get the correct answer: code."
10914226,2,0,1,java.math.BigDecimal,"If neither of those is sufficient, you have to use BigDecimal."
10928137,2,0,0,java.math.BigDecimal,Use BigDecimal that is available in Java.
10928127,2,0,4,java.math.BigDecimal,"If you need absolute precision, use BigDecimal."
10931883,1,0,1,java.math.BigDecimal,I want to create a custom PMD rule that eliminates instantiation of BigDecimal objects (ie.
10931883,1,0,1,java.math.BigDecimal,new BigDecimal(value) ).
10931883,1,0,1,java.math.BigDecimal,I need to enforce the BigDecimal.valueof(value) implementation.
10932130,2,1,3,java.math.BigDecimal,But make sure not to forbid the usage of all the BigDecimal constructors.
10932130,2,1,3,java.math.BigDecimal,"There are only three BigDecimal.valueOf methods, and the ones taking a long as arguments are the only ones which should be preferred over calling a constructor."
10932130,2,1,3,java.math.BigDecimal,"The one taking a double just calls the constructor anyway, and constructing BigDecimal with double values should be discouraged anyway."
10937876,2,0,0,java.math.BigDecimal,Another class that can be used to guess the correct number of digits to display is BigDecimal.
10937876,2,0,0,java.math.BigDecimal,"For floats, you first have to figure out how to convert from float to BigDecimal without changing the precision: How to convert from float to bigDecimal in java?"
10950914,1,0,47,java.math.BigDecimal,How to check if BigDecimal variable = 0 in java?
10951168,2,0,1,java.math.BigDecimal,"Alternatively, I think it is worth mentioning that the behavior of equals and compareTo methods in the class BigDecimal are not consistent with each other."
10950967,2,1,105,java.math.BigDecimal,Use the BigDecimal constant BigDecimal.ZERO: code.
10950967,2,1,105,java.math.BigDecimal,This avoids constructing a new BigDecimal for zero every call.
10950967,2,1,105,java.math.BigDecimal,"FYI, BigDecimal has constants BigDecimal.ONE and BigDecimal.TEN too."
10950967,2,1,105,java.math.BigDecimal,The method BigDecimal.equals() takes scale into consideration: code.
10950967,2,1,105,java.math.BigDecimal,"However, BigDecimal.compareTo() doesn't consider scale when comparing: code."
10963860,2,1,2,java.math.BigDecimal,If you want the same representation then use BigDecimal code.
10977681,2,0,0,java.math.BigDecimal,I would recommend you take a look at the BigDecimal Class.
10977689,2,0,2,java.math.BigDecimal,"If you're dealing with financial calculations, you might prefer BigDecimal to float or double."
10978999,2,0,2,java.math.BigDecimal,Have a look at the API for the BigDecimal class.
10978999,2,0,2,java.math.BigDecimal,"You will find methods with names like add(BigDecimal), one for each elementary operator."
10983096,1,0,0,java.math.BigDecimal,add BigDecimal in order to have a running total.
10983096,1,0,0,java.math.BigDecimal,I would like to pick your brians about BigDecimal..
11002968,2,1,1,java.math.BigDecimal,"You can have String, Integer, Date and BigDecimal types."
10998569,2,0,2,java.math.BigDecimal,"Never use ""=="" to compare Integer objects (or Float, Double, Short, Character, Byte, Long, BigDecimal...) for equality."
10998624,1,0,4,java.math.BigDecimal,Can we use .contains(BigDecimal.ZERO) when reading a list in JAVA?
10998624,1,0,4,java.math.BigDecimal,Can we use .contains(BigDecimal.ZERO) when reading a list in JAVA ??
10998748,2,1,9,java.math.BigDecimal,"The problem occurs because the scale, the number of digits to the right of the decimal point, of BigDecimal.ZERO is set to 0, while the scale of zeroDollarValue is 4."
10998748,2,1,9,java.math.BigDecimal,"The equals method of BigDecimal compares both the scale and the value - if either are different, it returns false."
11017472,2,0,1,java.math.BigDecimal,I'd try using BigDecimal for arbitrary precision.
11017426,2,1,6,java.math.BigDecimal,"Eg: 1/4 can be stored as 2^-2, but 1/3 will be stored as 2^-2 + 2^-3+ 2^-4 +2^-5..., so 1/3 is an example of a value that is not exactly precise If you want a precise value, use the BigDecimal class: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html"
11017430,2,0,5,java.math.BigDecimal,You need to use BigDecimal for better precision.
11017433,2,0,4,java.math.BigDecimal,Use the BigDecimal class.
11029110,2,0,1,java.math.BigDecimal,By using a BigDecimal with the ROUND_DOWN rounding mode.
11039174,1,0,1,java.math.BigDecimal,Optimally format a BigDecimal according to a maximum character limit.
11039174,1,0,1,java.math.BigDecimal,"I would like to convert a BigDecimal value to a string that it is no longer than a certain number of characters, switching to scientific notation if necessary."
11039174,1,0,1,java.math.BigDecimal,"In other words, how can I write the formatDecimal(BigDecimal number, int maxChars) function that would pass the following tests: code."
11062104,2,1,0,java.math.BigDecimal,"With 18 chars, I'll get sufficient precision in spite of the leading zeros, until BigDecimal.toString() switches to scientific notation at 10^-6."
11050568,2,1,3,java.math.BigDecimal,He suggests that if you need to work with big numbers that you use the BigDecimal class
11069730,2,0,0,java.math.BigDecimal,Java's BigDecimal http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html class has all the functions you may need for this purpose.
11069757,2,0,0,java.math.BigDecimal,"Unless you need the precision of BigDecimal, you can do this: code."
11074796,2,0,0,java.math.BigDecimal,"So assuming you get your answer as a double (or float), you should use BigDecimal's setScale method."
11074796,2,0,0,java.math.BigDecimal,"Also, if you want to limit the decimal places that your user can choose to the number visible when you print the double as a string, pass String.valueOf(answer) to BigDecimal's constructor."
11072354,2,0,0,java.math.BigDecimal,Try looking at the BigDecimal Class.
11095069,2,0,4,java.math.BigDecimal,You need to use BigDecimal.
11096481,1,0,0,java.math.BigDecimal,Eg - 345.4 it should return 5 Since the value is formatted so it omits 0 from the value 345.40 It should be written using BigDecimal
11096608,2,1,2,java.math.BigDecimal,"Once you have you BigDecimal, you can convert it to a plain string using toPlainString() method."
11096608,2,1,2,java.math.BigDecimal,"Thus, the length() method of the String class gives you the length of your BigDecimal."
11104037,2,1,4,java.math.BigDecimal,precision and scale settings are only applicable to exact numeric types (i.e. BigDecimal in Java and decimal in MySQL).
11104037,2,1,4,java.math.BigDecimal,Also note that if you change type of this field to BigDecimal you should initialize it with precise values as well.
11618134,2,0,1,java.math.BigDecimal,For correct rounding I recommend using BigDecimal setScale() method.
18892735,2,0,4,java.math.BigDecimal,"Then in the serialiser you can convert to a BigDecimal, and play with the scale etc."
11129821,2,1,1,java.math.BigDecimal,"Since yours appears to be small-scale, you should be fine, however, BigDecimal is much easier to use for purposes like these."
11129821,2,1,1,java.math.BigDecimal,How to use BigDecimal: clicky.
11148594,2,0,0,java.math.BigDecimal,via DecimalFormat or BigDecimal.
11495701,2,0,0,java.math.BigDecimal,Usage:  BigDecimal x = getBigRandom(y); every y will give you approximately 50 digits.
11165025,1,0,1,java.math.BigDecimal,"The BigDecimal class does a better job, e.g."
11174454,1,0,7,java.math.BigDecimal,BigDecimal in Java.
11174454,1,0,7,java.math.BigDecimal,I am thinking of using BigDecimal to compare two currency values rounded to 2 digits.
11174463,2,0,10,java.math.BigDecimal,"First off, BigDecimal is immutable."
11174463,2,0,10,java.math.BigDecimal,Next you must improve your accuracy of the second BigDecimal since it is being derived from a double -- not a very accurate entity.
11175995,2,1,4,java.math.BigDecimal,For precision use BigDecimal: code.
11176045,2,0,0,java.math.BigDecimal,"In Java, you could use BigDecimal."
11191820,1,0,3,java.math.BigDecimal,Testing with percentages and BigDecimal.
11191820,1,0,3,java.math.BigDecimal,"The problem I'm having is that as I am building some unit tests, I am trying to confirm that the resulting BigDecimal is .1 but when try equals(new BigDecimal(.1)) this fails because of double accuracy issues."
11191880,2,0,3,java.math.BigDecimal,You could use the string constructor of BigDecimal (docu): code.
11191888,2,1,7,java.math.BigDecimal,"When using BigDecimal, you should make ""number equality"" tests using the compareTo method instead of the equals method: code."
11200778,1,0,3,java.math.BigDecimal,Implementation classes are split by 'id' field type: String or BigDecimal.
11231554,2,1,4,java.math.BigDecimal,"I would read the all as a double, or a BigDecimal."
11239753,1,0,1,java.math.BigDecimal,"After I get all the info, for each variant, I need to transform the price map, from Map<PAXType, BigDecimal> to Map<OccupancyType, BigDecimal>, where OccupancyType is another enum."
11239841,2,0,3,java.math.BigDecimal,"First encapsulate Map<PAXType, BigDecimal> into e.g."
11240940,2,1,8,java.math.BigDecimal,"In addition to Tomasz's answer suggesting encapsulating Map<PAXType, BigDecimal> in class PriceByType (note that if PAXType is an enum, you should use EnumMap) I think you should consider using Guava's Table as substitution for Map<Integer, Map<Integer, PriceByType>>."
11241155,1,0,0,java.math.BigDecimal,Rounding BigDecimal with the setScale() method: unexpected result.
11244402,1,0,14,java.math.BigDecimal,"I recently learnt about the benefits of EnumMap in Java and would like to replace the existing ImmutableMap<OccupancyType, BigDecimal> to EnumMap."
11247239,1,0,5,java.math.BigDecimal,BigDecimal value is always zero when transfered with Spring remoting via Hessian.
11247239,1,0,5,java.math.BigDecimal,"When I call a remote method that returns a BigDecimal value via Spring's Hessian functionality, it always returns zero."
12000556,2,0,1,java.math.BigDecimal,The Serializer only transfers the BigDecimal to String representation: public class BigDecimalSerializer extends AbstractSerializer { code. }
12000556,2,0,1,java.math.BigDecimal,"This implementation works for us, not only for BigDecimal but for joda DateTime too."
12000556,2,0,1,java.math.BigDecimal,In our case we have had a combined problem with BigDecimal and DateTime.
11903965,2,1,4,java.math.BigDecimal,You could use HessianServlet.setSerializerFactory() to set your own SerializerFactory and return the com.caucho.hessian.io.BigDecimalDeserializer as Deserializer for BigDecimal.
11254521,1,0,1,java.math.BigDecimal,Java Collection sort BigDecimal.
11254521,1,0,1,java.math.BigDecimal,I'm trying to sort an ArrayList by BigDecimal and coming up against a brickwall.
11254521,1,0,1,java.math.BigDecimal,"In my java class I am getting an error with my compareTo method saying:  Type mismatch: cannot convert from int to BigDecimal  I must have missed something along the way, what is it?"
11279778,2,0,1,java.math.BigDecimal,"By the way, instead of double better to use BigDecimal for floating point calculations."
11279778,2,0,1,java.math.BigDecimal,"And be careful because BigDecimal class is immutable (not fully, but this is another question) and returns new instance when you try to change it's state."
13996258,2,0,1,java.math.BigDecimal,"System.out.println(removeTrailingZeros(1234.23432400000));   return: 1234.23432    but must return: 1234.234324    private static String removeTrailingZeros(double myDouble) {     return (new BigDecimal(Double.toString(myDouble))).toPlainString().replaceAll(""[0]*$"", """").replaceAll("".$"", """");   }  This method is working wrong too  System.out.println(removeTrailingZeros(472.304000));   returns 472.30  instead of 472.304 System.out.println(removeTrailingZeros(472304000));   returns 47230  instead of 472304000   The  #stripTrailingZeroes() or toPlainString() of the BigDecimal are good method, but nor alone."
13996258,2,0,1,java.math.BigDecimal,"//----------------BigDecimal.toPlainString-------------  System.out.println((new BigDecimal(Double.toString(4724))).toPlainString()); System.out.println((new BigDecimal(Double.toString(472304000))).toPlainString());    returns: 4724.0  (this is not fine - we don't want '.0') 472304000 (This is fine)  //----------------BigDecimal.stripTrailingZeros------------- System.out.println((new BigDecimal(Double.toString(4724)).stripTrailingZeros())); System.out.println((new BigDecimal(Double.toString(472304000d)).stripTrailingZeros()));  returns: 4724.0  (This is fine) 4.72304E+8 (This is not fine - we want 472304000)  The perfect resolution of the currect subject ""Remove trailing zeros from double"" is using   .stripTrailingZeros().toPlainString()  For example : //---------BigDecimal.stripTrailingZeros.toPlainString----------------- System.out.println(new BigDecimal(Double.toString(472.304000)).stripTrailingZeros().toPlainString()); System.out.println((new BigDecimal(Double.toString(4724)).stripTrailingZeros().toPlainString())); System.out.println((new BigDecimal(Double.toString(472304000d)).stripTrailingZeros().toPlainString()));  Result is: 472.304   (correct) 4724      (correct) 472304000 (correct)"
11284983,2,1,9,java.math.BigDecimal,"If you are willing to switch to BigDecimal, there is a #stripTrailingZeroes() method that accomplishes this."
11285482,2,0,1,java.math.BigDecimal,Use BigDecimal to get rid of floating point problem code.
11285639,1,0,0,java.math.BigDecimal,Should i switch BigDecimal or Double is approriate type.
11285639,1,0,0,java.math.BigDecimal,"As I fas as I know, BigDecimal is used when arbitrary precision required, when deal with prices for example."
11285639,1,0,0,java.math.BigDecimal,Consider simple API updatePrice(Double d) Should i persist double as is or BigDecimal.valueOf(d) is preferable ?
11294472,2,1,1,java.math.BigDecimal,If you want precision use BigDecimal for arbitrary decimal points.
11294472,2,1,1,java.math.BigDecimal,"But the comment of @Aprillion is right: if you do a Java calculation containing doubles then you lose precision, even if the persistence data type is in BigDecimal format."
11294472,2,1,1,java.math.BigDecimal,So use BigDecimal just if you want to ensure proper decimal precision from/to that field.
11319450,2,0,6,java.math.BigDecimal,BigDecimal.
11319451,2,0,1,java.math.BigDecimal,"If that is an issue, use BigDecimal: code."
11540939,2,0,14,java.math.BigDecimal,A BigDecimal is now printed in the right way.
11336185,2,0,0,java.math.BigDecimal,"If you're unsure of what type it will return for a tuple or projection, take advantage of the class hierarchy, since Long, Integer, Short, Double, Float, BigInteger and BigDecimal all extend the Number class."
11347417,1,0,2,java.math.BigDecimal,The generated hibernate mapping has mapped those columns in the entity class as java.math.BigDecimal.
11347417,1,0,2,java.math.BigDecimal,"These are currency values, and BigDecimal seems to be the preferred way of storing and calculating those values in Java."
11369465,2,0,1,java.math.BigDecimal,"Despite its name, <f:convertNumber/> will not convert BigDecimal... if you check the Javadoc for javax.faces.convert.NumberConverter, it tells that it will produce either a Long (for integral numbers) or a Double."
11361507,2,0,2,java.math.BigDecimal,"According JPA 2.0 following types are supported:  The persistent fields or properties of an entity may be of the   following types: Java primitive types; java.lang.String; other Java   serializable types (including wrappers of the primitive types,   java.math.BigInteger,java.math.BigDecimal,java.util.Date,   java.util.Calendar[5], java.sql.Date, java.sql.Time,   java.sql.Timestamp, byte[], Byte[], char[], Character[], and   user-defined types that implement the Serializable interface); enums;   entity types; collections of entity types; embeddable classes (see   Section2.5); collections of basic and embeddable types (see Section   2.6)."
11368496,1,0,4,java.math.BigDecimal,Java BigDecimal bugs with String constructor to rounding with ROUND_HALF_UP.
11368496,1,0,4,java.math.BigDecimal,"I'm implementing grade rounding with the BigDecimal class, and I'm seeing a possible bug."
11368496,1,0,4,java.math.BigDecimal,Is the Java spec for BigDecimal different for double and String constructors?
11368543,2,1,7,java.math.BigDecimal,Don't use the double constructor here; when it matters enough to use BigDecimal you need to stay out of floating-point land.
11371907,2,0,0,java.math.BigDecimal,"Use new BigDecimal(""0.35""), which is exact, because of the decimal radix."
11389781,2,0,1,java.math.BigDecimal,"If the date matches, you can use Java CSV to extract the cost, translate it to a numerical value (since you are dealing with cost, I would recommend the BigDecimal class since it does not have rounding issues as opposed to float or double) and do whatever mathematical operation you need."
11411718,2,1,2,java.math.BigDecimal,"I would have two subclasses, one for integers which uses a Long and another which uses a Double or BigDecimal."
11413146,2,0,4,java.math.BigDecimal,Or use BigDecimal and scale.
11442655,2,0,1,java.math.BigDecimal,You can take a look at the source for BigDecimal to see an example.
11446416,2,0,1,java.math.BigDecimal,BigDecimal can be used to display the actual representation of a float or double.
11445890,2,0,1,java.math.BigDecimal,Use BigDecimal.Round: http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#round(java.math.MathContext Like this: code.
11445902,2,0,2,java.math.BigDecimal,What you need is the BigDecimal class.
11445902,2,0,2,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
11447062,2,0,0,java.math.BigDecimal,"If you want your code to work, use the BigDecimal class, but given the input number, don't expect your program to finish execution any time soon."
11447556,2,0,1,java.math.BigDecimal,Try double or BigDecimal.
11447617,2,0,1,java.math.BigDecimal,"Using something like BigDecimal would probably be a safer option here, especially if you'll be performing any arithmetic on your value."
11449202,2,1,5,java.math.BigDecimal,"If you absolutely must inline your double value in your SQL string instead of using bind values, try using BigDecimal to serialise your double, instead: code."
11449202,2,1,5,java.math.BigDecimal,"Since you seem to be operating on monetary values, you should change all your doubles to BigDecimal anyway, as BigDecimal is Java's best match for SQL's DECIMAL data type"
11495565,1,0,5,java.math.BigDecimal,How to extract fractional digits of double/BigDecimal.
11503840,2,0,0,java.math.BigDecimal,If you use BigDecimal as below : code.
11505461,1,0,2,java.math.BigDecimal,I am trying to parse and store currency amounts as BigDecimal values.
11520528,1,0,1,java.math.BigDecimal,"Today while I was reading some documentation regarding the BigDecimal class, I've stumbled upon an fundamental property, the BigDecimal class is Immutable."
11520528,1,0,1,java.math.BigDecimal,Considering that I want to extend the BigDecimal with my class: code.
11520635,2,0,1,java.math.BigDecimal,MyBigDecimal extends BigDecimal  You can do it BigDecimal is not final.
11520646,2,1,7,java.math.BigDecimal,BigDecimal is a good example of what should not be done when creating an immutable class (it can be extended which can cause issues as you mentioned in your question).
11520665,2,0,2,java.math.BigDecimal,"It should also be final (as BigDecimal should be), to prevent any other class to extend it and thus make it mutable by adding mutable fields."
11520676,2,0,3,java.math.BigDecimal,The BigDecimal is a value class.
11523192,2,0,1,java.math.BigDecimal,You can take a look at the BigDecimal class which should do what you need.
11536463,2,0,4,java.math.BigDecimal,How do I get the entire number when the input is 1.23456789012345E+256  That is the entire number as a BigDecimal.
11536463,2,0,4,java.math.BigDecimal,1.23456789012345E+256 == 12345678901234500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000    Why are you using BigDecimal?
11557839,1,0,3,java.math.BigDecimal,Float and BigDecimal precision difference.
11557898,2,0,0,java.math.BigDecimal,BigDecimal.valueOf(double) can correct for the representation error in double but not that in float IMHO don't use float unless you have a very reason to do so.
11561714,2,0,0,java.math.BigDecimal,BigDecimal is accurate because it uses a different representation.
11561714,2,0,0,java.math.BigDecimal,"For instance, the value 3.1  would be represented in a BigDecimal as 31,precision=1 For this reason, BigDecimal doesn't suffer from the same rounding issues a float and double."
11561714,2,0,0,java.math.BigDecimal,"However, when you use a float/double value to initialize a BigDecimal, the same rounding error makes it's way into the BigDecimal instance."
11557877,2,1,3,java.math.BigDecimal,If you want to define a 3.1 exactly using BigDecimal use the String constructor: code.
11589228,1,0,1,java.math.BigDecimal,I need to do calculations on units of time represented in whole and/or tenths of an hour and wonder if BigDecimal is the appropriate datatype for it.
11589228,1,0,1,java.math.BigDecimal,From what I gather BigDecimal would be appropriate for currency calculations so am I thinking the same is true in cases where I have to deal with 1.5 + 0.6 type of simple math.
11652602,2,1,1,java.math.BigDecimal,If you are performing decimal calculations then BigDecimal is a good class to use to avoid any kind of rounding errors.
11652602,2,1,1,java.math.BigDecimal,If performance is not an issue then I would say that BigDecimal will serve your purpose.
11625064,2,0,6,java.math.BigDecimal,"""0.00"", ""0"", ""+0"" It uses BigDecimal to avoid oddities in binary floating point representations (e.g."
11626193,2,1,5,java.math.BigDecimal,"As pointed out in the comments, if your code is more than an exercise, you should use BigDecimal for monetary amounts to avoid rounding issues (doubles are not exact)."
11648623,1,0,0,java.math.BigDecimal,Add precision by one to the BigDecimal number?
11648623,1,0,0,java.math.BigDecimal,I have  a number of BigDecimal type : 100 code.
11648855,2,1,4,java.math.BigDecimal,"This can be simplified, as @PeterLawrey suggests, to just add BigDecimal.ONE.scaleByPowerOfTen(-scale)."
11668830,1,0,2,java.math.BigDecimal,I tried using BigDecimal and DecimalFormat but I couldn't solve it.
11668848,2,0,5,java.math.BigDecimal,Have a look at the BigDecimal class (or the BigInteger class if you're not interested in decimal places.).
11668922,2,0,0,java.math.BigDecimal,Using BigDecimal code.
11689252,2,0,0,java.math.BigDecimal,"Please, check BigDecimal if you want 1000-digit precission(or more)."
11699954,2,0,0,java.math.BigDecimal,For controlling of precision I would recommend to use BigDecimal.
11700077,2,0,2,java.math.BigDecimal,For high precision calculations with controlled rounding use BigDecimal instead Float
11700112,2,0,1,java.math.BigDecimal,Floats are less precise than doubles which are less precise than BigDecimal.
11700112,2,0,1,java.math.BigDecimal,When working with programmes that absolutely must be precise (like financial applications) use a BigDecimal.
11700141,2,0,0,java.math.BigDecimal,"So, as other people said, use BigDecimal, it uses a different representation, it's much slower, but it won't incur in these problems."
28958124,2,0,0,java.math.BigDecimal,"I know this is 2 year old question but as every body faces a problem to round off the values at some point of time.I would like to share a different way which can give us rounded values to any scale by using BigDecimal class .Here we can avoid extra steps which are required to get the final value if we use    DecimalFormat(""0.00"") or using Math.round(a * 100) / 100 ."
11705406,1,0,1,java.math.BigDecimal,Certain BigDecimal numbers in Java when divided causes the ArithmeticException to be thrown.
11705431,2,1,1,java.math.BigDecimal,The one argument BigDecimal.Divide throws an ArithmeticException if the quotient is a non-terminating decimal (361/6 is 60.1666666...):  Throws: ArithmeticException - if the exact quotient does not have a   terminating decimal expansion  To avoid this use the overload with a second RoundingMode parameter.
11705431,2,1,1,java.math.BigDecimal,"I.e., you tell BigDecimal exactly what you expect from the division result."
11735570,2,0,0,java.math.BigDecimal,"According JPA 2.0 specification persistent attribute must be one of following:  Java primitive types; java.lang.String; other Java serializable types   (including wrappers of the primitive types,   java.math.BigInteger,java.math.BigDecimal,java.util.Date,java.util.Calendar[5],   java.sql.Date, java.sql.Time, java.sql.Timestamp, byte[], Byte[],   char[], Character[], and user-defined types that implement the   Serializable interface); enums; entity types; collections of entity   types; embeddable classes; collections of basic and embeddable types."
11737778,2,0,3,java.math.BigDecimal,Then you can use java.math.BigDecimal.
11737778,2,0,3,java.math.BigDecimal,Here is a nice tutorial on how to use BigDecimal.
11737784,2,1,4,java.math.BigDecimal,Use BigDecimal code.
11769035,2,1,5,java.math.BigDecimal,"As pointed here, you might want to use BigDecimal"
11770965,1,0,0,java.math.BigDecimal,"the problem is when Im mapping '$5000' from excel to java double/BigDecimal, ofcourse there's a conversion exception."
11795320,2,0,1,java.math.BigDecimal,"Assuming you want to round/truncate the decimal, and speed is not a large consideration, you want to use BigDecimal(BigInteger unscaledVal, int scale) with scale set to 4."
11795353,2,0,0,java.math.BigDecimal,"If you really want four digits to work with as an internal state, use a BigDecimal instead."
11808343,2,0,2,java.math.BigDecimal,"I'd do the calculation using the largest possible type, BigInteger/BigDecimal."
11815135,1,0,2,java.math.BigDecimal,I tried using BigDecimal instead of float to store all the values with a scale set to 2 decimal places.
11815135,1,0,2,java.math.BigDecimal,"Providing a rounding policy for BigDecimal causes the total of the cost of the item and the applicable tax to be rounded of using the rounding policy provided to BigDecimal, thus altering the required output."
11815163,2,1,3,java.math.BigDecimal,"Although its often considered best practice to use int, long or BigDecimal most investment banks and funds use double because once you understand how to use them safely, they are simpler (than long) and faster (than BigDecimal) to use."
11823537,2,0,7,java.math.BigDecimal,You need to store it as a BigDecimal right away.
11827702,2,1,9,java.math.BigDecimal,"If you do need exact decimals, then BigDecimal is your friend."
11827709,2,0,1,java.math.BigDecimal,"double and  float are prone to these issues, which is why it is recommended you use the BigDecimal class."
11844437,2,0,1,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal   class instead."
11844437,2,0,1,java.math.BigDecimal,Numbers and Strings covers BigDecimal and other useful   classes provided by the Java platform.
11848887,1,0,3,java.math.BigDecimal,BigDecimal to the power of BigDecimal on Java/Android.
11848887,1,0,3,java.math.BigDecimal,"I have a simple BigDecimal that I want to power to another BigDecimal, for example 11.11^-1.54."
22556217,2,0,3,java.math.BigDecimal,A utility class for BigDecimal https://github.com/tareknaj/BigFunctions Example for z = x^y --> z = exp ( ln(x) * y ) code.
11855775,1,0,3,java.math.BigDecimal,BigDecimal Euler's number calculation to emulate Math.exp(double a).
11855775,1,0,3,java.math.BigDecimal,Is there a generally accepted way to get Euler's number in BigDecimal?
11855775,1,0,3,java.math.BigDecimal,I basically want to do Math.exp(double a) and I basically want the same function but calculated using BigDecimal to prevent precision loss with other calculations.
11855813,2,1,2,java.math.BigDecimal,"The problem is that Euler's number is irrational; in BigDecimal, you'd have to have infinite memory to hold it."
11855813,2,1,2,java.math.BigDecimal,"You're going to have to determine how many decimals you want, then construct the BigDecimal representation using the String constructor (new BigDecimal(""2.71828...""))."
11855834,2,0,1,java.math.BigDecimal,"If you want a higher precision representation of Euler's number, you can create it with some arbitrary precision of decimal places, or there are BigDecimal math libraries with a really high precision version of E. You could approximate one yourself with something like this: Better approximation of e with Java"
11856816,2,0,1,java.math.BigDecimal,Use the BigDecimal class.
11856816,2,0,1,java.math.BigDecimal,"See http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#BigDecimal(java.lang.String) for a constructor that will take a string like ""1.123E-4""."
11856817,2,0,2,java.math.BigDecimal,Use BigDecimal: code.
11856842,2,0,0,java.math.BigDecimal,"If high-precision is what you're striving for, indeed use BigDecimal."
11858503,2,0,6,java.math.BigDecimal,Alternatively you can setScale method from the BigDecimal Class.
11870621,1,0,4,java.math.BigDecimal,I have to use decimal number types (BigDecimal in Java) instead.
11871799,2,1,7,java.math.BigDecimal,"Using BigDecimal does not solve this problem, by itself."
11871799,2,1,7,java.math.BigDecimal,"First, BigDecimal will not calculate the monthly interest rate correctly, because you must divide 2.37% by 12, and 2.37/12 (or .0237/12) is not exactly representable in decimal."
11871799,2,1,7,java.math.BigDecimal,"Second, even if BigDecimal did calculate the monthly interest rate correctly, and calculated the interest on $87.34 correctly, you probably still need to round that amount to some number of cents before adding it to the balance."
11871799,2,1,7,java.math.BigDecimal,The rules for that rounding may be specified in some legal document and might not match how BigDecimal does rounding.
11870937,2,0,2,java.math.BigDecimal,Using BigDecimal will ensure you use rounding correctly and give you a number of options as to how it works.
11870937,2,0,2,java.math.BigDecimal,What many find disturbing is that even 0.1 is not represent precisely and BigDecimal can show the exact representation (and why you have to careful how you convert to BigDecimal) code.
11881435,2,0,3,java.math.BigDecimal,"So use double if you require floating point, or use BigDecimal"
11898855,1,0,2,java.math.BigDecimal,JPA automatic BigDecimal conversion.
11898855,1,0,2,java.math.BigDecimal,We get the following error:     Caused by: com.ibm.db2.jcc.c.SqlException: [ibm][db2][jcc][t4][1037][11190] Exception occurred during BigDecimal conversion.
11899018,2,1,6,java.math.BigDecimal,Note that using a double to initialize a BigDecimal is a bit strange.
11899018,2,1,6,java.math.BigDecimal,"If you want 1.2 to be stored in the BigDecimal, use new BigDecimal(""1.2""), and you won't have a BigDecimal initialized with 1.1999999999999999555910790149937383830547332763671875."
11899455,2,0,0,java.math.BigDecimal,"If you want an absolutely precise value, then use BigDecimal."
11916308,1,0,2,java.math.BigDecimal,"I used Java's own BigDecimal now, but I found out, that it's really slow and it starts to show in my application."
11916442,2,0,3,java.math.BigDecimal,Are you completely sure BigDecimal is the performance problem?
11916442,2,0,3,java.math.BigDecimal,"2) Use a specially designed class that implements something similar to BigDecimal, but using long internally."
11916442,2,0,3,java.math.BigDecimal,"Please note BigDecimal uses a long internally as well except if high precision is needed, so this solution will only help a tiny bit in most cases."
11947032,2,0,0,java.math.BigDecimal,"For your purpose a valid alternative could be using java's BigDecimal class, which lets you control the level of precision needed."
11949330,1,0,55,java.math.BigDecimal,BigDecimal multiply by zero.
11949330,1,0,55,java.math.BigDecimal,I am performing a simple multiplication with BigDecimal and I have found some strange behaviour when multiplying by zero (multiplying by zero is correct in this use-case).
11949330,1,0,55,java.math.BigDecimal,Is this an inaccuracy with BigDecimal or is there some niche branch of maths that I'm missing somewhere?
11949378,2,1,81,java.math.BigDecimal,"You can however use compareTo() to do what you want:  As @assylias points out, you should also use the new BigDecimal(""22.3"") constructor to avoid double precision issues."
11949398,2,0,20,java.math.BigDecimal,equals() on BigDecimal checks the internal state of BigDecimal for comparison  Refer the code below code.
11949398,2,0,20,java.math.BigDecimal,Update:  Use constructor taking String as a parameter for BigDecimal for accuracy in precision check the related links below  Also See  Getting wrong result for evaluation of 100 * 2.55 values Java BigDecimal bugs with String constructor to rounding with ROUND_HALF_UP
11949439,2,0,45,java.math.BigDecimal,"There are 2 issues with your code:  you should compare BigDecimal with compareTo instead of equals, as advised by the other answers but you should also use the string constructor: new BigDecimal(""22.3"") instead of the double constructor new BigDecimal(22.3) to avoid double precision issues  In other words, the following code (which correctly uses compareTo) still returns false: code."
11978167,2,0,1,java.math.BigDecimal,"List of subclasses of Number:  AtomicInteger, AtomicLong, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short  List of primitives:  boolean, byte, short, int, long, char, float, double  But considering that there are only 8 primitive types, you might as well check them all and put that test in a utility method."
11983205,2,0,5,java.math.BigDecimal,"Keep the value as a number for almost your whole code base, only formatting for presentation and only parsing for user input Don't use double for currency values; use BigDecimal which will reduce the surprises you get when it comes to ""inaccurate"" arithmetic Follow Java naming conventions wherever possible."
12004023,2,0,1,java.math.BigDecimal,Regions are identified by a BigDecimal in the hashtable (key) - when no region is provided (null) a default value of -99 is used.
12004055,2,1,4,java.math.BigDecimal,"This is an implementation of the null object pattern: a special object, BigDecimal(-99), is designated to play the role of null in a situation where ""real"" nulls are not allowed."
12010449,1,0,1,java.math.BigDecimal,Java BigDecimal Round Down issue.
12010516,2,1,7,java.math.BigDecimal,BigDecimal can't fix rounding errors that have already occurred before you give it the input.
12012343,2,0,1,java.math.BigDecimal,What you can do is round up or down using BigDecimal.valueOf code.
12026610,1,0,5,java.math.BigDecimal,Java BigDecimal without E. I have a BigDecimal variable code.
12044359,2,0,0,java.math.BigDecimal,Perhaps using BigDecimal isn't really helping you.
12026783,2,0,8,java.math.BigDecimal,"To get a String representation of the BigDecimal without the exponent part, you can use BigDecimal.toPlainString()."
12027973,2,0,1,java.math.BigDecimal,"Since showing decimal places is really a formality to the end user, you could read your value in as a String instead and convert it to a Double or BigDecimal, the latter being preferred if you're working with actual finances."
12027998,2,1,0,java.math.BigDecimal,"Even though you said you do not want a mere post-processing solution, in case you already have an amount and wish to convert it to use 2 decimal places, and you're focused on precision (since this is money), maybe try using BigDecimal -- in particular, see BigDecimal.setScale: code."
12045282,2,0,3,java.math.BigDecimal,"To counter against rounding errors, score here could be represented using a BigDecimal."
12054056,2,1,12,java.math.BigDecimal,Use BigDecimal and setScale() method to set the precision code.
13365363,2,0,2,java.math.BigDecimal,The simplest solution I came up with for this uses a combination of java.math.BigDecimal and java.math.MathContext like so.
12057695,1,0,0,java.math.BigDecimal,I have tried using BigDecimal and Double on the java side.
12067895,1,0,1,java.math.BigDecimal,But in the end the variable will be stored in an array (BigDecimal array) so when it stores I want to store with and only 2decimal places.
12068122,2,0,1,java.math.BigDecimal,java.math.BigDecimal.setScale(int) returns a new BigDecimal instead of mutating the original one.
12068122,2,0,1,java.math.BigDecimal,"Note that since BigDecimal objects are immutable, calls of this   method do not result in the original object being modified, contrary   to the usual convention of having methods named setX mutate field X."
12068131,2,0,0,java.math.BigDecimal,"The ""setScale"" method doesn't change the BigDecimal itself since BigDecimals are immutable, it returns a new BigDecimal with the scale set."
12068141,2,1,4,java.math.BigDecimal,Remember that BigDecimal objects are immutable.
12072198,1,0,2,java.math.BigDecimal,"Now i need to typecase it to a dataType.Which dataType it should be?In my case it is Integer  But why is it getting mapped to Integer, why not Long or BigDecimal ?"
12082814,2,0,1,java.math.BigDecimal,"But can tell you, that you will be interested in BigDecimal#compareTo(BigDecimal)."
12082858,2,0,1,java.math.BigDecimal,You would want to use BigDecimal.compareTo() to help accomplish that.
12088281,1,0,1,java.math.BigDecimal,BigDecimal - comparing invariant to DecimalFormat.
12088281,1,0,1,java.math.BigDecimal,"I generate one BIgDecimal using a format ###,###.## which results in 660,000.00 and then I try to comapre it against a new BigDecimal(660000.00) but it returns false every time."
12088468,2,1,2,java.math.BigDecimal,"which prints 0.1000000000000000055511151231257827021181583404541015625 However, new BigDecimal("".1"") does indeed represent exactly .1, which is why code."
12090634,2,1,5,java.math.BigDecimal,Use BigDecimal instead: code.
12090653,2,0,1,java.math.BigDecimal,An alternative could be using BigDecimal.
12092313,2,0,1,java.math.BigDecimal,A shorter version without using BigDecimal.
12124016,2,1,7,java.math.BigDecimal,One good example is BigDecimal.
12139518,2,0,1,java.math.BigDecimal,in the JSON data; that should allow it to be read as BigDecimal.
12172667,2,1,5,java.math.BigDecimal,You can use BigDecimal for this.
12172667,2,1,5,java.math.BigDecimal,"Because if you pass in a double, you will also pass in double's inaccuracy into the new BigDecimal instance."
12172667,2,1,5,java.math.BigDecimal,"If you pass in a String, BigDecimal will know™ and do the right thing™."
12172676,2,0,1,java.math.BigDecimal,How about BigDecimal?
12178053,1,0,5,java.math.BigDecimal,Possible Duplicate: ArithmeticException thrown during BigDecimal.divide   This results in ArithmeticException: http://ideone.com/RXeZw Providing a scale and rounding mode will give me the wrong result.
12178178,2,1,7,java.math.BigDecimal,BigDecimal.divide(BigDecimal divisor) throws an ArithmeticException if the result cannot be exactly represented.
12178178,2,1,7,java.math.BigDecimal,"Also, note the use of the BigDecimal(String) constructor to avoid problems when you create BigDecimal using a double literal."
12178230,2,0,1,java.math.BigDecimal,BigDecimal operations always tries to calculate exact result.
12205427,1,0,4,java.math.BigDecimal,"AFAIK, the code above should generate a ClassCastException in the line T t = (T) a because the method call in main is setting the parametrized type to BigDecimal and casting from Integer to BigDecimal is not allowed, conversely to what I expected, the program executed well and printed the following: code."
12205487,2,1,3,java.math.BigDecimal,"by passing in clazz, you allow the runtime to check the cast; and, what's more, you allow the compiler to infer T from the method arguments, so you don't have to write test.<BigDecimal>someGenericMethod anymore."
12218515,1,0,6,java.math.BigDecimal,Unpredictability of the BigDecimal(double) constructor.
12218515,1,0,6,java.math.BigDecimal,"I started using Sonar recently in a project, and i got a PMD rule broken about using the constructor new BigDecimal(double val)."
12218515,1,0,6,java.math.BigDecimal,"When i read the java documentation, i found that new BigDecimal(double val) is somewhat unpredictable and that I should use new BigDecimal(String val) which is predictable."
12218515,1,0,6,java.math.BigDecimal,Here is what javadoc says for BigDecimal public BigDecimal(double val):  Translates a double into a BigDecimal which is the exact decimal   representation of the double's binary floating-point value.
12218515,1,0,6,java.math.BigDecimal,The scale   of the returned BigDecimal is the smallest value such that (10scale ×   val) is an integer.
12218515,1,0,6,java.math.BigDecimal,"One   might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   with a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
12218515,1,0,6,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable:   writing new BigDecimal(""0.1"") creates a BigDecimal which is   exactly equal to 0.1, as one would expect."
12218515,1,0,6,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that   this constructor provides an exact conversion; it does not give the   same result as converting the double to a String using the   Double.toString(double) method and then using the   BigDecimal(String) constructor."
12218515,1,0,6,java.math.BigDecimal,Isnt new BigDecimal(String val) enough for that matter?
12218515,1,0,6,java.math.BigDecimal,When should I use the new BigDecimal(double val) constructor?
12218562,2,0,2,java.math.BigDecimal,So not having it would force you to convert it to String for BigDecimal to convert it back.
12218587,2,0,1,java.math.BigDecimal,Having to convert it to a string before converting it to BigDecimal would be a wasteful in that case.
12218590,2,0,1,java.math.BigDecimal,When should I use the new BigDecimal(double val) constructor?
12218590,2,0,1,java.math.BigDecimal,"Because sometimes you have only double, that you want to translate to BigDecimal."
12218597,2,1,3,java.math.BigDecimal,It converts the actual represented value of double to a BigDecimal.
12218597,2,1,3,java.math.BigDecimal,The whole point of BigDecimal is to give as much precision as possible and that is what this constructor does.
12218597,2,1,3,java.math.BigDecimal,When should I use the new BigDecimal(double val) constructor  When you want to know the value double really represents.
12218597,2,1,3,java.math.BigDecimal,"But, if you did that you may find you don't need BigDecimal."
12226634,1,0,17,java.math.BigDecimal,"I guess I can either use BigDecimal or replace all + and * with ""wrappers"" like: code."
12238035,2,1,2,java.math.BigDecimal,"Floating point calculations are not precise, thats why the numbers never match, try using BigDecimal instead of double Edit: On second thoughts as you are already parsing integer nums[i] = Integer.parseInt(values[i]); simply use int in place of double and don't use Math.sqrt, simply use leftSide==rightside"
12250537,1,0,2,java.math.BigDecimal,Check if a BigDecimal is a multiple of another BigDecimal in Java 1.4.
12250537,1,0,2,java.math.BigDecimal,I needed to check if a BigDecimal instance is a multiple of another BigDecimal instance.
12250537,1,0,2,java.math.BigDecimal,"Since I am restricted to Java 1.4, I couldn't make use of BigDecimal.remainder(...)."
12252133,2,0,1,java.math.BigDecimal,"you should use this instead:  multiple.divide(base, 0, BigDecimal.ROUND_UNNECESSARY); Because if you don't pass the zero it will apply the scale of the dividend (unless you are completely sure that the scale of that will always be zero in which case why are you not using a BigInteger instead?)"
12256781,1,0,1,java.math.BigDecimal,"I want to display data/value in jasper report from table , in series from first row until last row .. but i just can display the value that have String type, if the record is BigDecimal or Double, it couldn't work  this is my report shown : code."
12259132,2,0,2,java.math.BigDecimal,"Define the fields in your jrxml same as the keys (Name, Amount and Price - the latter two as BigDecimal/Double types)."
12259132,2,0,2,java.math.BigDecimal,Jasper Reports library would take care of the casting from object to BigDecimal or Double.
12286064,1,0,2,java.math.BigDecimal,Java Double vs BigDecimal.
12286064,1,0,2,java.math.BigDecimal,When I use a BigDecimal its stored as 0.0001220703125.
12286243,2,1,6,java.math.BigDecimal,"Whereas the javadoc of BigDecimal#toString:  If the scale is greater than or equal to zero and the adjusted exponent is greater than or equal to -6, the number will be converted to a character form without using exponential notation  You can try this little program to check the various output formats and, in particular, the threshold at which the representation switches from standard notation to scientific notation is not the same in the two classes."
12286106,2,0,3,java.math.BigDecimal,"http://epramono.blogspot.com/2005/01/double-vs-bigdecimal.html The underlying data structures to store these are different (from my recollection floating point can have a broader range of values, but BigDecimal has more accuracy), but what you're actually seeing is just a different way of outputting the same number."
12290812,2,0,1,java.math.BigDecimal,"It seems sensible to run the calculation on BigDecimal, then round (up or down) to BigInteger and check that it works."
12329185,1,0,1,java.math.BigDecimal,CurrencySum is a wrapper for two objects: a BigDecimal and an Enum representing currencies.
12329185,1,0,1,java.math.BigDecimal,"VariableInterest wraps a BigDecimal representing a fixed value and an VarIndex object that is the varying bit of the interest - VarIndex is basically libor 1m, libor 2m, etc (VariableInterest = BigDecimal fixedValue + VarIndex variableValue) Now, the bit that annoys me is that when a LoanProduct is created, I have to check in the constructor if maxSum and minSum are of the same Currency, and if VariableInterest holds a VarIndex corresponding to that Currency, as  a LoanProduct in euros can't have a VarIndex set for libor, it has to be euribor."
12343965,2,1,5,java.math.BigDecimal,"Since BigDecimal implements Comparable, sort operations didn't require a call to the ComponentProvider to get a (possibly formatted) string value."
12359249,2,1,1,java.math.BigDecimal,"Jackson does not truncate double values, beyond the usual caveats with binary floating point notations (i.e. if you wanted to avoid any rounding errors, you should use BigDecimal etc), which are not enough to cause problems like this."
12359587,2,1,2,java.math.BigDecimal,"So rather than return cryptic integer codes, (or BigDecimal if the bigger the better ;) ) just trap the ""business exception"", create a new MBeanException using the business exception and throw it."
12384858,1,0,2,java.math.BigDecimal,BigDecimal/ArrayList needs new Locale.
12384858,1,0,2,java.math.BigDecimal,Or maybe to change the Locale when I set the BigDecimal into the ArrayList?
12385072,2,0,0,java.math.BigDecimal,"First, you haven't to change the way the (BigDecimal) elements are stored!"
12385072,2,0,0,java.math.BigDecimal,Than you have to implement too a method to display the BigDecimal values.
12384948,2,1,2,java.math.BigDecimal,"The best way is the way you've done it, although I would name the method format() instead of getLocale(), since the method doesn't get a Locale, but formats a BigDecimal."
12395281,1,0,16,java.math.BigDecimal,Convert double to BigDecimal and set BigDecimal Precision.
12395281,1,0,16,java.math.BigDecimal,"In Java, I want to take a double value and convert it to a BigDecimal and print out its String value to a certain precision."
12395281,1,0,16,java.math.BigDecimal,It prints this huge thing:  47.47999999999999687361196265555918216705322265625  and not  47.48  The reason I'm doing the BigDecimal conversion is sometimes the double value will contain a lot of decimal places (i.e. -.000012) and the when converting the double to a String will produce scientific notation -1.2E-4.
12395281,1,0,16,java.math.BigDecimal,"I want to have BigDecimal always have two units of precision like this: ""47.48""."
12395281,1,0,16,java.math.BigDecimal,Can BigDecimal restrict precision on conversion to string?
16774279,2,0,25,java.math.BigDecimal,"According to javadoc, BigDecimal(double val) constructor behaviour can be unexpected if you don't take into consideration this limitation:  The results of this constructor can be somewhat unpredictable."
16774279,2,0,25,java.math.BigDecimal,"One   might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
16774279,2,0,25,java.math.BigDecimal,Value that is returned by BigDecimal.valueOf is equal to that resulting from invocation of Double.toString(double).
12395430,2,0,13,java.math.BigDecimal,Don't use BigDecimal at all.
12395430,2,0,13,java.math.BigDecimal,"Regarding the precision issue: You are first storing 47.48 in the double c, then making a new BigDecimal from that double."
12395505,2,0,5,java.math.BigDecimal,(That's what BigDecimal is for!)
12419924,2,0,2,java.math.BigDecimal,Use BigDecimal instead.
12429233,1,0,2,java.math.BigDecimal,Why EntityManager createNativeQuery lists sometimes return a BigDecimal and other times an Integer?
12460482,1,0,11,java.math.BigDecimal,How to round 0.745 to 0.75 using BigDecimal.ROUND_HALF_UP?
25269008,2,0,3,java.math.BigDecimal,Use BigDecimal.valueOf(double d) instead of new BigDecimal(double d).
12460588,2,0,1,java.math.BigDecimal,Try not to use the BigDecimal(double/float) constructors.
12472513,2,1,4,java.math.BigDecimal,The Javadoc states:  Retrieves the value of the designated column in the current row of   this ResultSet object as a java.math.BigDecimal with full precision.
12496660,2,0,1,java.math.BigDecimal,"As far as the data type to use to hold a monetary amount, long or BigDecimal."
12496705,2,0,1,java.math.BigDecimal,"If you don't know what sensible rounding to use, BigDecimal or long cents could be a better choice."
12496588,2,0,5,java.math.BigDecimal,you should use BigDecimal when dealing with currencies.
12496588,2,0,5,java.math.BigDecimal,"In general, transient values in your application should always use BigDecimal, only converting to a float when you must (for persistence, or displaying data to a user, etc)."
12496606,2,0,0,java.math.BigDecimal,You need to use the BigDecimal class.
12496616,2,0,2,java.math.BigDecimal,"Personally, I would use BigDecimal (and so does my company!)."
12501194,2,1,2,java.math.BigDecimal,BTW2: If you create new BigDecimal like mad but don't retain them you will hurt performance but you won't run out of memory.
12501194,2,1,2,java.math.BigDecimal,If you are running out of memory its not due to use BigDecimal.
12501194,2,1,2,java.math.BigDecimal,"prints number counting with BigDecimal, long and double."
12505234,2,0,1,java.math.BigDecimal,"Atomic mass should be a decimal value (double or BigDecimal depending on what you're using it for), not an int code."
12556400,1,0,0,java.math.BigDecimal,adding values from a BigDecimal [ ].
12556400,1,0,0,java.math.BigDecimal,"I am struggling in finding a way to add up the values from a BigDecimal [ ] , which is obtained from a checkbox form out of a table from mysql."
12561081,2,0,5,java.math.BigDecimal,"In case You have long to start with, you still should use java.math.BigDecimal."
12560893,2,0,4,java.math.BigDecimal,"The problem is that you have to represent a fixed point value, but you don't know java.math.BigDecimal and try to fake it."
12561485,1,0,18,java.math.BigDecimal,It has a solution that converts everything to a BigDecimal using toString().
12561805,2,0,13,java.math.BigDecimal,"You need to convert your Number instances to BigDecimal, applying rounding as necessary, and then compare these both."
12597505,2,1,4,java.math.BigDecimal,"String Boolean, boolean Byte, byte Date (as ISO8601 millisecond-precision string, shifted to UTC) Calendar (as ISO8601 millisecond-precision string, shifted to UTC) Long, long Integer, int Double, double Float, float BigDecimal BigInteger   However, Amazon DynamoDB supports arbitrary data types in principle, so you might be able to work around that limitation, see Mapping Arbitrary Data with Amazon DynamoDB Using the AWS SDK for Java Object Persistence Model for details:   In addition to the supported Java types [...],   you can use types in your application for which there is no direct   mapping to the Amazon DynamoDB types."
12601143,1,0,3,java.math.BigDecimal,How can I tell querydsl-maven-plugin to generate NumberPath with Long instead of BigDecimal?
12601143,1,0,3,java.math.BigDecimal,The problem I am facing is that Oracle NUMBER fields are mapped to   NumberPath<java.math.BigDecimal> instead of NumberPath<Long> Is there any way I can instruct querydsl-maven-plugin to translate BigDecimal to Long during code generation?
12614224,2,0,2,java.math.BigDecimal,"Hi we can do this just by implementing few classes and packages that java already has like-  1.CHAR, VARCHAR, BLOB, TEXT, ENUM, and SET ->  java.lang.String, java.io.InputStream, java.io.Reader, java.sql.Blob, java.sql.Clob 2.FLOAT, REAL, DOUBLE PRECISION, NUMERIC, DECIMAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT-> java.lang.String, java.lang.Short, java.lang.Integer, java.lang.Long, java.lang.Double, java.math.BigDecimal 3.DATE, TIME, DATETIME, TIMESTAMP-> java.lang.String, java.sql.Date, java.sql.Timestamp  MySQL Connector/J is flexible in the way it handles conversions between MySQL data types and Java data types."
12639014,1,0,0,java.math.BigDecimal,I need it to still be in BigDecimal format because I will be inserting the answer to a database.
12639046,2,0,0,java.math.BigDecimal,"Yes, there is a method called BigDecimal.toPlainString():    Returns a string representation of this BigDecimal without an exponent field..."
12639190,2,0,0,java.math.BigDecimal,"See section ""BigDecimal"" EDIT: Answer seems void as the op is actually not asking for another formatting of the output but for checking the calculation."
12644715,1,0,1,java.math.BigDecimal,Java BigDecimal Rounding Error.
12644804,2,1,10,java.math.BigDecimal,"Converting from double to BigDecimal is usually a sign that you've got something wrong, and you should be using one type consistently throughout."
12646696,2,0,2,java.math.BigDecimal,"If you are working with financial calculations, you can directly use BigDecimal to wrap the doubles returned by your so called method and use an appropriate rounding mechanism provided by BigDecimal that suits your needs."
12645753,2,0,0,java.math.BigDecimal,"Update: This post raised an additional question which I don't think was ever answered-- why use int, or better yet, long or BigDecimal for currency calculations."
12645753,2,0,0,java.math.BigDecimal,"And even when using BigDecimal, one must use the String constructor and not the float one."
12645579,2,0,0,java.math.BigDecimal,Why not look at BigDecimal.
12645579,2,0,0,java.math.BigDecimal,It may be more useful to use the String ctor for BigDecimal
12662812,2,0,0,java.math.BigDecimal,"In short, is a BigDecimal variable necessary for your purposes?"
12646302,2,1,7,java.math.BigDecimal,"Anyway, the following points from the Javadoc should be enough for you to decide:  (equals) Compares this BigDecimal with the specified Object for equality."
12646302,2,1,7,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method)."
12646302,2,1,7,java.math.BigDecimal,(compareTo) Compares this BigDecimal with the specified BigDecimal.
12646302,2,1,7,java.math.BigDecimal,Two BigDecimal objects that are equal in value but have a different scale (like 2.0 and 2.00) are considered equal by this method.
12648588,1,0,2,java.math.BigDecimal,In my code I convert the string to BigInteger first and then to BigDecimal.
12661448,2,0,0,java.math.BigDecimal,"You can always use BigDecimal if you must, but it's a last resort."
13572574,2,0,0,java.math.BigDecimal,"I highly recommend that you use BigDecimal values for ALL currency values, and do not even involve doubles in the instantiation."
12681263,2,0,2,java.math.BigDecimal,Try BigDecimal.
12681268,2,0,2,java.math.BigDecimal,"If the numbers get really big and you need all digits, then use BigDecimal."
30489740,2,0,0,java.math.BigDecimal,"Try this.. double value= 255.956666; BigDecimal bd = new BigDecimal(value).setScale(2, RoundingMode.HALF_UP);    System.out.println(""value=""+bd);"
12689755,2,0,1,java.math.BigDecimal,"Edit: - Also, you might want to use BigDecimal for this kind of problems.."
12689826,2,0,1,java.math.BigDecimal,"But it's the general idea which can be used with BigDecimal, which offers a higher precision."
12714570,2,0,0,java.math.BigDecimal,You can use BigDecimal and its setScale() method to fix no of digits after decimal code.
12731469,2,1,0,java.math.BigDecimal,You probably want to convert back to a BigDecimal: code.
12732436,2,0,1,java.math.BigDecimal,You could use BigDecimal in this case: code.
12732462,2,0,3,java.math.BigDecimal,If you want to use exact precision then BigDecimal is your friend.
12742345,1,0,1,java.math.BigDecimal,JPA/Hibernate + HQL/JPQL: select DTO with BigDecimal parameter.
12742926,2,1,0,java.math.BigDecimal,I am not sure why the BigDecimal ctor is not being recognised but you could overload your constructors If you had  code.
12742926,2,1,0,java.math.BigDecimal,Not that if you use the BigDecimal double constructor the number is based on a double so can still have rounding errors.
12742926,2,1,0,java.math.BigDecimal,It is usually best to use BigDecimal string contstrctor For example code.
12752451,2,0,0,java.math.BigDecimal,Why not use java.lang.Number as the constructor parameter and create the BigDecimal field based on the .floatValue() / doubleValue() of the parameter.
12752078,2,0,5,java.math.BigDecimal,"The only alternative is to use BigDecimal, which you can use to get exact decimal values."
12752079,2,0,4,java.math.BigDecimal,"If you don't like how floating-point numbers work, try something like BigDecimal instead."
12752082,2,0,1,java.math.BigDecimal,Long story short if you require arbitrary precision use BigDecimal not float or double.
12752082,2,0,1,java.math.BigDecimal,As an aside be very careful not to use the float/double constructor of BigDecimal because it will have the same issue.
12752095,2,0,1,java.math.BigDecimal,"If you need an accurate representation of a number in Java, you should use the java.math.BigDecimal class: code."
12752374,2,0,2,java.math.BigDecimal,I would convert your float to a string and then use BigDecimal.
12752374,2,0,2,java.math.BigDecimal,Dont use the BigDecimal double constructor though as you will still get errors
12761306,2,1,0,java.math.BigDecimal,The equivalent in Java is the BigDecimal class.
12761627,2,1,10,java.math.BigDecimal,"But if you replace HashSet with TreeSet, the resulting set contains only 1 item (42 - that happened to be the first one added) as all of them are considered equal when compared using BigDecimal.compareTo()."
12766522,2,0,1,java.math.BigDecimal,Note that this uses the arbitrary-precision BigDecimal class to avoid issues related to rounding of primitive floating-point types.
12780468,2,0,0,java.math.BigDecimal,The best practice when representing money in Java is to use BigDecimal.
12782583,2,0,0,java.math.BigDecimal,You should use BigDecimal for this kind of arithmetic.
12788821,1,0,0,java.math.BigDecimal,Return a range to compare with BigDecimal.
12788821,1,0,0,java.math.BigDecimal,"So, what I want to do is make sure that the number they entered (which is a BigDecimal) falls within the ranges specified in the other method."
12788821,1,0,0,java.math.BigDecimal,2) How do I then use those returned values to check if the BigDecimal in the fahrenheit2centigrade method falls within those values?
12800746,2,1,5,java.math.BigDecimal,"In other words, not only number primitives such as int, long, etc, are coerced to zero, but also its wrapper type representations such as Integer, Long, BigInteger, BigDecimal, etc are coerced to zero instead of null."
12806457,2,0,8,java.math.BigDecimal,"In Java, one way around some of these issues includes using something like BigDecimal."
12806661,2,0,1,java.math.BigDecimal,Use BigDecimal#pow not Math.pow.
12806667,2,0,2,java.math.BigDecimal,You need to use BigDecimal before you do the pow.
12806667,2,0,2,java.math.BigDecimal,"Note, the value passed into BigDecimal must be a String because a double doesn't have enough precision to hold the exact value."
12806635,2,1,10,java.math.BigDecimal,"Just pass a string to the BigDecimal constructor for the first argument, and BigDecimal.pow to do the computation."
12814923,2,0,1,java.math.BigDecimal,Use BigDecimal if you need unlimited precision floating-point numbers.
12836647,1,0,12,java.math.BigDecimal,Best way to convert Locale specific String to BigDecimal.
12836647,1,0,12,java.math.BigDecimal,I have to convert a German locale formatted String to a BigDecimal.
12836647,1,0,12,java.math.BigDecimal,"The outpout of this is  2105.88 2105.8800000000001091393642127513885498046875 Exception in thread ""main"" java.lang.NumberFormatException       at java.math.BigDecimal."
12836647,1,0,12,java.math.BigDecimal,(Unknown Source)       at java.math.BigDecimal.
12836647,1,0,12,java.math.BigDecimal,"(Unknown Source)       at test.BigDecimalTest.main(BigDecimalTest.java:22)  The first output is correct, but it doesn't really make sense to convert a String to a Number (Double to be precise), then back to a String again and then into a specific type of Number, BigDecimal."
12836647,1,0,12,java.math.BigDecimal,"The second output is incorrect, but could be solved by setting the scale of the BigDecimal."
12850784,2,1,13,java.math.BigDecimal,It seems like there is no other way since java.Lang.Number doesn't have a method which returns a BigDecimal type.
12850784,2,1,13,java.math.BigDecimal,"Anyway it makes sense because BigDecimal only accepts strings which are properly formatted not like """"2.105,88"" but like ""2105.88""  Let me show your my code: code."
16796038,2,0,1,java.math.BigDecimal,NumberFormat has a method called setParseBigDecimal that causes parse() to return a BigDecimal.
12844416,1,0,3,java.math.BigDecimal,Spring MVC 3 formatting BigDecimal.
12844416,1,0,3,java.math.BigDecimal,"In my application, most BigDecimal numbers in forms are formatted to 2 decimal values."
12844416,1,0,3,java.math.BigDecimal,So I have my own BigDecimal to String converter in ConversionService (to override locale to use decimal comma instead of dot).
12851276,1,0,0,java.math.BigDecimal,And we can use BigDecimal to resolve this problem.
12880076,2,1,0,java.math.BigDecimal,"Well, earlier I was trying to specify both the columns and entities attributes in the resultsetmapping, so I tried removing the entity mappings, keeping the columns attribute, and calling the aliastobean result transformer, that plus writing setters to accept BigDecimal instead of Long (since its an Oracle DB), solved the issue..."
12889779,2,0,1,java.math.BigDecimal,"If that still isn't sufficient, you can use BigDecimal."
12889782,2,0,3,java.math.BigDecimal,"Try and use BigDecimal, javadocs are here http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html"
12889831,2,0,0,java.math.BigDecimal,Try to use java.math.BigDecimal.
12889831,2,0,0,java.math.BigDecimal,The doc is right here: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
12891687,2,0,1,java.math.BigDecimal,"You also have to pay attention when handling very large values, because it can occur that (a== (a+1))==true... Also, for currencies, and other such critical data, I'd recommend BigDecimal, which stores the exact string representation, not the binary approximation."
12930624,2,0,6,java.math.BigDecimal,"In Java this means using either DecimalFormat to convert to a String, or BigDecimal to convert to a number in decimal radix, round in the decimal radix, then convert that to a String, which is also going to be in decimal radix."
12944559,1,0,16,java.math.BigDecimal,How to multiply a BigDecimal by an integer in Java.
12944559,1,0,16,java.math.BigDecimal,How do you multiply a BigDecimal by an integer in Java?
12944873,2,0,0,java.math.BigDecimal,"If I were you, I would set the scale of the BigDecimal so that I dont end up on lengthy numbers."
12944873,2,0,0,java.math.BigDecimal,The integer 2 in the BigDecimal initialization below sets the scale.
12944626,2,0,2,java.math.BigDecimal,"First off, BigDecimal.multiply() returns a BigDecimal and you're trying to store that in an int."
12944626,2,0,2,java.math.BigDecimal,"Second, it takes another BigDecimal as the argument, not an int."
12944626,2,0,2,java.math.BigDecimal,"If you just use the BigDecimal for all variables involved in these calculations, it should work fine."
12944637,2,1,25,java.math.BigDecimal,You have a lot of type-mismatches in your code such as trying to put an int value where BigDecimal is required.
13004193,1,0,5,java.math.BigDecimal,"Why are numbers with a leading sign (plus or minus) when converted to BigDecimal, treated as valid numbers in Java?"
13004193,1,0,5,java.math.BigDecimal,The following statement with BigDecimal however compiles and runs without causing an exception to be thrown.
13004193,1,0,5,java.math.BigDecimal,Why is a leading + sign valid with BigDecimal here which however doesn't appear to be the case with the other datatypes available in Java?
13004464,2,0,4,java.math.BigDecimal,"The real answer is most likely that the inconsistent behaviour between new Integer(""+0"") and new BigDecimal(""+0"") is a result of a mistake in design of one or the other."
13044145,2,0,2,java.math.BigDecimal,"If you want an exact solution - you should use a library that gives you exact values for decimals, such as BigDecimal."
13056047,2,1,1,java.math.BigDecimal,"Here's an implementation of the concept using BigDecimal, which makes it kind of wordy but avoids representation problems endemic if using floating point."
13059916,2,0,1,java.math.BigDecimal,"The built-in BigDecimal class doesn't provide the operations that you need (real exponentiation, or even logs)."
13059928,2,0,1,java.math.BigDecimal,"Instead, use BigDecimal, which is used to represent arbitrarily precise floating-point values."
13059928,2,0,1,java.math.BigDecimal,Note that you will need a custom pow function to handle BigDecimal.
31294907,2,0,1,java.math.BigDecimal,I suppose there is a method in BigDecimal Class called toPlainString().
31294907,2,0,1,java.math.BigDecimal,if the the BigDecimal is 1.23e-8 then the method returns 0.0000000124. code.
13072679,1,0,0,java.math.BigDecimal,setscal in BigDecimal.
13072679,1,0,0,java.math.BigDecimal,I have result 0.21 but when i want to extract just 0.2 i try  for(int i=1; i<10; i++) System.out.println(a.setScale(i));  I have this error when i= 1:   at java.math.BigDecimal.divideAndRound(BigDecimal.java:1439)  at   java.math.BigDecimal.setScale(BigDecimal.java:2390)   at   java.math.BigDecimal.setScale(BigDecimal.java:2437)   at   NewClass.main(NewClass.java:30)  What i can do to extract with i = 1 ?
13089244,2,1,2,java.math.BigDecimal,"If you can't do this, use BigDecimal."
13089870,2,0,3,java.math.BigDecimal,You could use a BigDecimal to handle the double parsing (without the risk of precision loss that you might get with Double.parseDouble()): code.
13090318,2,0,1,java.math.BigDecimal,"Given that you've got bytes which are the binary representation of a text representation of a number, it sounds like you should basically convert it back to a string, then use Double.parseDouble(...) or new BigDecimal(...)."
13094087,2,0,0,java.math.BigDecimal,Rather than try to determine what conditions result in exact or inexact calculations consider using BigDecimal for these situations.
13099073,1,0,4,java.math.BigDecimal,I'm using NumberFormat.getCurrencyInstance().format(amount) to format currency from a BigDecimal to a string.
13103713,2,0,0,java.math.BigDecimal,http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html Use BigDecimal if you really have to handle such large numbers.
13106004,2,0,11,java.math.BigDecimal,"In order to preserve the arbitrary precision as long as possible, do the multiplication in BigDecimal, and then convert the result to double, like this: code."
13110219,1,0,3,java.math.BigDecimal,"I have a series of BigDecimal numbesr (ex:123456.78) that I want to add commas to so they look like 123,456.78, so I converted them to a string and used this code code."
13116730,1,0,0,java.math.BigDecimal,does java.math.BigDecimal works with sql server float type.
13116730,1,0,0,java.math.BigDecimal,does java.math.BigDecimal works with sql server float type?
13122175,2,1,4,java.math.BigDecimal,"Instead of returning a Map<String, BigDecimal>, return an object which contains the map, as well as the exception details."
13130783,1,0,1,java.math.BigDecimal,BigDecimal compareTo() thread safety.
13130783,1,0,1,java.math.BigDecimal,"I have a Java application that uses the compareTo() method of the BigDecimal class in order to classify a (big) real number, read as a string, according to its type (basically, ""too big"", double or float)."
13130856,2,1,4,java.math.BigDecimal,As BigDecimal is immutable it is also therefore thread-safe.
13130856,2,1,4,java.math.BigDecimal,"You should also use BigDecimal.valueOf() instead of new BigDecimal() throughout, to take advantage of any caching that may be possible."
13136532,2,0,0,java.math.BigDecimal,"Later check for the columntype using metaData.getColumnType(int column) If the columnType is of type NUMERIC, then you might want to extract it as a BigDecimal and call a toString() on it to convert it to a String Evil hack (don't tell anyone I suggested this):  code."
13158627,2,0,0,java.math.BigDecimal,"If you want to avoid losing decimals, use BigDecimal instead of float."
13160651,2,0,1,java.math.BigDecimal,You can check the exact value of the various doubles with BigDecimal: code.
21330724,2,0,2,java.math.BigDecimal,"It seems like you are doing some currency calculation, so always use BigDecimal code."
13166700,2,0,3,java.math.BigDecimal,"Using Double for balance calculation is not a good idea, it makes more sense to use the BigDecimal because it is more precise."
13175623,1,0,0,java.math.BigDecimal,"One of the data type is BigDecimal and when i try to set calling preparedstatement, it is throwing null pointer exception."
13175623,1,0,0,java.math.BigDecimal,"I tried 2 ways to convert, casting the object and tried to create a new object of type BigDecimal code."
13181162,2,1,1,java.math.BigDecimal,"For  formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 340 is used."
13193483,1,0,0,java.math.BigDecimal,"The type of number in JPA is BigDecimal and numbers could be like integer and not integer, for example: code."
13209833,1,0,2,java.math.BigDecimal,Fastest way to instantiate BigDecimal from string.
13209833,1,0,2,java.math.BigDecimal,"For each String value representing a number, instantiates a BigDecimal object (at a total rate of thousands of Bigdecimal objects per second)."
13209833,1,0,2,java.math.BigDecimal,Uses each instantiated BigDecimal object for further processing.
13209833,1,0,2,java.math.BigDecimal,"Given the above scenario, obviously the instantiation of each BigDecimal object has an impact on performance."
13209833,1,0,2,java.math.BigDecimal,"One way to instantiate those BigDecimal objects from a non-null String str, is: code."
13209833,1,0,2,java.math.BigDecimal,which is exactly what the String constructor of BigDecimal expands to in the Oracle implementation of the JDK.
13209833,1,0,2,java.math.BigDecimal,"Is there a faster way of instantiating BigDecimal objects from such strings, or via an alternative approach?"
13572381,2,0,0,java.math.BigDecimal,"If there are lots of numbers that are likely to be the same, then maybe a HashMap<String, BigDecimal> 'cache' of BigDecimal values might be faster."
13210109,2,1,3,java.math.BigDecimal,You mention using a regular expression and this can use more CPU than creating strings or BigDecimal.
13230115,1,0,3,java.math.BigDecimal,Java: Simple BigDecimal logical error.
13230161,2,0,4,java.math.BigDecimal,"BigDecimal object are immutable, all its methods modifying its value return a new BigDecimal object."
13241166,1,0,2,java.math.BigDecimal,"I tried to use num as a BigDecimal and as a consequence i had to replace everything with a BigDecimal to perform the operations.The output then was the same for the inputs which gave correct results in above code.But for inputs which gave wrong results,the program throws an exception  code."
13241166,1,0,2,java.math.BigDecimal,"Line 16 is num=num.divide(minDen); //in replacement to earlier used num/minDen,both num and minDen are BigDecimal in this case  Even though if the number does not have an exact decimal representation,given the arbitrary precision of BigDecimal the error in results would have been minimized if it didn't threw an exception."
13241166,1,0,2,java.math.BigDecimal,** I verified the results using BigDecimal with the dynamic programming approach as code.
13241166,1,0,2,java.math.BigDecimal,Please suggest me a better way to do this without using BigDecimal
13243804,2,0,0,java.math.BigDecimal,The part of your question about an exception with BigDecimal code isn't clear to me so I won't comment on that.
13263664,2,1,3,java.math.BigDecimal,Floating point guide What Every Computer Scientist Should Know About Floating-Point Arithmetic Wikipedia on IEE754 Bottom-line if you are doing arithmetic and it needs to be exact don't use float or double but us BigDecimal
13263798,2,0,0,java.math.BigDecimal,"Usually this isn't a problem provided you use floats and doubles with some precaution:  use a size of floating point primitive which has ""spare"" digits of precision beyond what you need; for many applications, this probably means don't use float at all (use double instead): it has very poor precision and, with the exception of division, has no performance benefit on many processors; when printing FP numbers, only actually print and consider the number of digits of precision that you need, and certainly don't include the final digit (use String.format to help you); if you need arbitrary number of digits of precision, use BigDecimal instead."
13270373,2,1,5,java.math.BigDecimal,"If you want non-integer division, use BigDecimal instead."
13270405,2,0,2,java.math.BigDecimal,"If you want decimal values, use BigDecimal instead."
13283396,2,0,1,java.math.BigDecimal,Cases where you need exact decimal value; its better to use BigDecimal data type instead of double.
13283396,2,0,1,java.math.BigDecimal,"The BigDecimal class provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion."
13283396,2,0,1,java.math.BigDecimal,link BigDecimal provides methods to round the number to given value.
13295453,1,0,3,java.math.BigDecimal,"I have a TRANSPORTER table in Oracle database which has a column named TRANSPORTER_ID of type NUMBER(35, 0) which is mapped to a BigDecimal type in Java and it is a sequence generated primary key."
13296901,2,0,0,java.math.BigDecimal,Or if you don't void to have precision issues you can use BigDecimal: code.
13297511,2,0,0,java.math.BigDecimal,Using BigDecimal will only work with decimal fractions.
13296804,2,0,2,java.math.BigDecimal,I would recommend BigDecimal usage.
13296804,2,0,2,java.math.BigDecimal,"I know BigDecimal is used in financial systems, and not Double or Float, to describe exact numbers with decimal dots (i.e - prices)."
13297741,2,1,3,java.math.BigDecimal,"Since BigDecimal uses ""normal"" arithmetic, you get a different result than shown in your references."
13301612,1,0,1,java.math.BigDecimal,"I tried unsigned (obviously didn't work), googled and found BigDecimal and BigInteger."
13301619,2,1,5,java.math.BigDecimal,BigDecimal would be the solution to contain values larger than long.
13301619,2,1,5,java.math.BigDecimal,Read this BigDecimal javadoc  You need to instantiate BigDecimal(yourDoubleValue); not casting.
13301625,2,0,2,java.math.BigDecimal,Use BigDecimal  How to use BigDecimal  e.g.
13301665,2,0,2,java.math.BigDecimal,BigDecimal can hold any double and float value.
13301665,2,0,2,java.math.BigDecimal,"To convert from a double to a BigDecimal, use code like this: code."
13303841,1,0,1,java.math.BigDecimal,I am trying to use BigDecimal Literal in expression String I am using JEXL 2.1.1 I am using literal suffix 'h' as mentioned in http://commons.apache.org/jexl/reference/syntax.html#Literals code.
13330084,2,0,1,java.math.BigDecimal,"The right way to solve this problem is to use BigDecimal as a datatype, and it has all the methods like add, divide, ... and so on."
13330084,2,0,1,java.math.BigDecimal,"One pitfall, BigDecimal is immutable don't forget about that when you do your calculations."
13319300,2,1,6,java.math.BigDecimal,You can use BigDecimal.toPlainString():  Returns a string representation of this BigDecimal without an exponent field.
13323263,1,0,2,java.math.BigDecimal,I was fooling around with the BigDecimal class but I'm not sure about it's use here.
13323263,1,0,2,java.math.BigDecimal,Is there any Math method equivalents for the BigDecimal class?
13332464,1,0,1,java.math.BigDecimal,"Java Calculator, BigDecimal display."
13349936,2,1,4,java.math.BigDecimal,"In several places, you are converting the user input to a BigDecimal without doing any error checking."
13349936,2,1,4,java.math.BigDecimal,"In particular, when there is no input, new BigDecimal(String) will generate a NumberFormatException because """" is not a valid number."
13349826,2,0,6,java.math.BigDecimal,Maek sure the numbers you are reading from EditText are valid Number before creating BigDecimal(String) instance.
13351888,2,0,1,java.math.BigDecimal,Hibernate will map this automatically to a BigDecimal or BigInteger.
13376507,1,0,7,java.math.BigDecimal,company.getAffiliateId() returns BigDecimal com.foo.bar.Affiliates is an enum This doesn't work: code.
13387011,1,0,2,java.math.BigDecimal,BigDecimal.floatValue versus Float.valueOf.
13387011,1,0,2,java.math.BigDecimal,"I would argue that the lack of consistency here is a bug, where BigDecimal(String) doesn't follow the same spec as Float.valueOf() (I checked the JDK doc)."
13387011,1,0,2,java.math.BigDecimal,"I'm using a library that forces me to go through BigDecimal, but it can happen that I have to send ""3.0f"" there."
13387011,1,0,2,java.math.BigDecimal,Is there a known workaround (BigDecimal is inaccessible in a library).
13387060,2,0,0,java.math.BigDecimal,BigDecimal has its own documentation.
13387060,2,0,0,java.math.BigDecimal,As per BigDecimal javadoc  this constructor is compatible with the values returned by   Float.toString(float) and Double.toString(double).
13388365,2,0,1,java.math.BigDecimal,use BigDecimal instead.
13399301,2,0,1,java.math.BigDecimal,You could use BigDecimal for roundoff code.
13399898,2,0,1,java.math.BigDecimal,use a comparision which allows for some error use BigDecimal (which is over kill in most cases) use cents instead of dollars i.e. use int or long with fixed precision.
13406179,1,0,1,java.math.BigDecimal,"This is quite trivial for simple classes like Boolean, BigDecimal etc."
13417527,1,0,0,java.math.BigDecimal,Forcing FreeMarker to always print BigDecimal value with decimal point.
13417527,1,0,0,java.math.BigDecimal,"In a Spring MVC application using FreeMarker for rendering views, how do I force FreeMarker to always print BigDecimal values with decimal points?"
13427916,2,0,1,java.math.BigDecimal,I suggest converting your data to java.math.BigDecimal.
13433164,2,0,1,java.math.BigDecimal,Use BigDecimal as datatype instead of double to solve your problem.
13433164,2,0,1,java.math.BigDecimal,But take care as BigDecimal is immutable.
13433739,2,1,2,java.math.BigDecimal,"The safe way is to first convert to BigDecimal, scale by 10-3, then print it using DecimalFormat."
13434035,2,0,4,java.math.BigDecimal,I'd also probably change the price to be a BigDecimal instead of double - you shouldn't use a binary floating point type for currency values.
13458600,1,0,2,java.math.BigDecimal,"Trying to calculate (a+b)^n where n is a real value in a BigDecimal variable, but BigDecimal.pow is designed for accept only integer values."
13459767,2,1,1,java.math.BigDecimal,"If the input is within the magnitude range supported by double, and you do not need more than 15 significant digits in the result, convert (a+b) and n to double, use Math.pow, and convert the result back to BigDecimal."
20303721,2,0,1,java.math.BigDecimal,or for a BigDecimal x and y: code.
13470835,2,0,2,java.math.BigDecimal,"Use BigDecimal instead, or an integer number of cents/pennies/whatever."
13506302,1,0,0,java.math.BigDecimal,"I know it involves using BigDecimal and maybe ln functions, but I'm not sure how to approach this."
13506302,1,0,0,java.math.BigDecimal,EDIT Maybe this is a better question: How do you find the square root of a BigDecimal.
13515838,2,0,5,java.math.BigDecimal,"For Java, take a look at the built-in classes BigInteger and BigDecimal."
13515838,2,0,5,java.math.BigDecimal,"BigDecimal can represent arbitrarily large base-10 numbers with up to 232 digits to the right of the decimal point (in practical terms, also limited by available memory)."
13515886,2,0,1,java.math.BigDecimal,BigDecimal should be good enough.
13515894,2,0,0,java.math.BigDecimal,"Java already provides classes like java.math.BigDecimal or java.math.BigInteger you can use to do basic stuff (addition, multiplication, etc.)"
13543600,2,0,21,java.math.BigDecimal,"As others have said, if you need to store cents precisely, do not use float or double, use int, long, BigInteger or BigDecimal."
13543107,2,0,1,java.math.BigDecimal,"For monetary amounts with calculation, e,a, best use BigDecimal."
13563810,2,0,2,java.math.BigDecimal,"You can use BigDecimal, if you want the exact value that you have in Excel Sheet: - code."
25181643,2,0,1,java.math.BigDecimal,"You can convert as follows, for example: new BigDecimal(""406770000244E+12"").toBigInteger();"
13564512,1,0,1,java.math.BigDecimal,JRE1.7 issue with BigDecimal.
13564512,1,0,1,java.math.BigDecimal,I am using JRE1.7 update 9 and in my application I am converting amount value from BigDecimal to string.
13569232,1,0,4,java.math.BigDecimal,I want to convert value to class java.math.BigDecimal.
13569301,2,0,1,java.math.BigDecimal,"Is it possible you mean ""how do I parse a BigDecimal from a String"", to which the answer is... code."
13569495,2,0,1,java.math.BigDecimal,"In some cases, including BigDecimal, there is a constructor that takes a String representation of the new object's value."
13585087,2,0,0,java.math.BigDecimal,(or use BigDecimal if you can't be sure your values will all be representable as double).
13593185,2,0,1,java.math.BigDecimal,If you want more precision then look at Double.parseDouble() or even the BigDecimal string constructor
13593893,2,0,4,java.math.BigDecimal,It'd probably be easier just to remove the mm and to sort parsed BigDecimal values.
13612698,2,0,3,java.math.BigDecimal,"Try looking into decimal types, such as BigDecimal, or consider using cents stored in a large enough integer type (if you do not need to support fraction of a cent values)."
13649703,1,0,24,java.math.BigDecimal,Square root of BigDecimal in Java.
13649703,1,0,24,java.math.BigDecimal,Can we compute the square root of a BigDecimal in Java by using only the Java API and not a custom-made 100-line algorithm?
13831245,2,0,1,java.math.BigDecimal,If you want to calculate square roots for numbers with more digits than fit in a double (a BigDecimal with a large scale) : Wikipedia has an article for computing square roots: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method This is my implementation of it: code.
23070547,2,0,0,java.math.BigDecimal,"As it was said before: If you don't mind what precision your answer will be, but only want to generate random digits after the 15th still valid one, then why do you use BigDecimal at all?"
13832098,2,0,0,java.math.BigDecimal,"There isn't anything in the java api, so if double is not accurate enough (If not, why use BigDecimal at all?)"
13668007,1,0,8,java.math.BigDecimal,Have had to use BigDecimal instead which is annoying.
13669254,2,1,2,java.math.BigDecimal,"For the numeric types you need to use BigDecimal, BigInteger, or a numeric primitive."
13682254,1,0,0,java.math.BigDecimal,I'm trying to figure a problem out with BigDecimal.
13682623,2,0,2,java.math.BigDecimal,which is close to the answer using BigDecimal code.
13682930,2,1,4,java.math.BigDecimal,"As you can see, Groovy uses BigDecimal, which means the output is: code."
13699782,2,1,1,java.math.BigDecimal,"If you want to do operations on currency without precision/rounding errors, you can use BigDecimal."
13745345,2,0,7,java.math.BigDecimal,"the number of cents), or use a BigDecimal."
13749336,1,0,1,java.math.BigDecimal,I also tried a solution that I found on stackoverflow that suggested using BigDecimal and that gave me the very same answer.
13755278,2,0,1,java.math.BigDecimal,"If you need a specific decimal representation, use DecimalFormat or BigDecimal."
13784083,2,0,0,java.math.BigDecimal,"= x * (x - 1) * (x - 2) * ... * 1 All of the necessary operations (add, divide, pow) are defined for BigDecimal."
13791420,2,0,4,java.math.BigDecimal,"But really, you should be using BigDecimal for money, because of floating point issues"
13791475,2,0,0,java.math.BigDecimal,Use BigDecimal instead of double for currency types.
13829647,2,0,0,java.math.BigDecimal,1) make your method static 2) Remember in java use BigDecimal class to do any decimal arithmetic.
13829902,1,0,0,java.math.BigDecimal,I am playing around with BigDecimal but no luck so far... code.
13832899,2,0,1,java.math.BigDecimal,Using BigDecimal code.
13832901,2,1,5,java.math.BigDecimal,"Another approach is to make x a BigDecimal, where you can specify that you want a particular precision."
13832918,2,0,0,java.math.BigDecimal,You need to use an integer value representing some decimal fractional unit like hundredths or thousandths or use something like BigDecimal.
13832927,2,0,0,java.math.BigDecimal,"(for a better explanation see http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html) Consider using a class such as BigDecimal or a class that implements rational numbers, like the ones mentioned here - Is there a commonly used rational numbers library in Java?"
13833783,2,1,3,java.math.BigDecimal,"Use BigDecimal (instead of double), and BigInteger (instead of int, long) for that purpose, But you can only work with them by their methods."
13833783,2,1,3,java.math.BigDecimal,Same with BigDecimal
13833844,2,0,1,java.math.BigDecimal,"BigDecimal is the class used in java where you need to represent very large or very small numbers, and maintain precision."
13859801,1,0,1,java.math.BigDecimal,"I would like to get ideas on how can we generate a unique id (String/Number etc) from a collection of java objects which could be of various data types like String, BigDecimal, org.joda.time.LocalDate or org.joda.time.LocalDateTime or any custom java object."
13870110,1,0,1,java.math.BigDecimal,EJBQL Named Query - How to Sum BigDecimal.
13870110,1,0,1,java.math.BigDecimal,I have a BigDecimal representing money.
13899102,1,0,0,java.math.BigDecimal,I want to add a cell editor in a JTable that accepts numbers only (BigDecimal type to be precise).
13900204,1,0,16,java.math.BigDecimal,BigDecimal to string.
13900204,1,0,16,java.math.BigDecimal,I have a BigDecimal object and i want to convert it to string.
13900212,2,1,28,java.math.BigDecimal,To get exactly 10.0001 you need to use the String constructor or valueOf (which constructs a BigDecimal based on the canonical representation of the double): code.
13900212,2,1,28,java.math.BigDecimal,The problem with new BigDecimal(10.0001) is that the argument is a double and it happens that doubles can't represent 10.0001 exactly.
13900212,2,1,28,java.math.BigDecimal,"So 10.0001 is ""transformed"" to the closest possible double, which is 10.000099999999999766941982670687139034271240234375 and that's what your BigDecimal shows."
13900217,2,0,3,java.math.BigDecimal,"Your BigDecimal doesn't contain the number 10.0001, because you initialized it with a double, and the double didn't quite contain the number you thought it did."
13900217,2,0,3,java.math.BigDecimal,(This is the whole point of BigDecimal.)
24211398,2,0,2,java.math.BigDecimal,By using below method you can convert java.math.BigDecimal to String.
13992648,2,0,0,java.math.BigDecimal,The BigDecimal can not be a double.
13992648,2,0,0,java.math.BigDecimal,"if you want to display exactly own number, you can use the String constructor of BigDecimal ."
13910413,1,0,7,java.math.BigDecimal,Using BigDecimal in JAXB marshalling.
13910527,2,0,2,java.math.BigDecimal,"You write an XmlAdapter<String, BigDecimal> and you annotate the getter of sum with it: @XmlJavaTypeAdapter(BigDecimalStringAdapter.class)."
13921951,1,0,1,java.math.BigDecimal,double analyze=0.5 BigDecimal db=new BigBecimal(analyze)  It prints only 0.5 - why do I lose significant digits?
13921951,1,0,1,java.math.BigDecimal,by running this you get                5 times 0.1 is  0.5000000000000000277555756156289135105907917022705078125                 But the 0.5 in BigDecimal is  0.5
13924880,2,0,1,java.math.BigDecimal,"The BigDecimal(double) constructor ""Translates a double into a BigDecimal which is the exact decimal representation of the double's binary floating-point value."""
13924880,2,0,1,java.math.BigDecimal,The BigDecimal toString method displays the exact value.
13924880,2,0,1,java.math.BigDecimal,The BigDecimal(0.5) result has unscaled value 5 and scale 1.
13924880,2,0,1,java.math.BigDecimal,It meets the BigDecimal toString conditions for display without an exponent.
13924880,2,0,1,java.math.BigDecimal,brings out a problem with using the BigDecimal double constructor unless you are probing double representation.
13924880,2,0,1,java.math.BigDecimal,"0.1 is not exactly representable as a double, so your ""one"" is not exactly 0.1, even though BigDecimal(""0.1"") would be exact."
13924880,2,0,1,java.math.BigDecimal,"(a * 5**b)/(10**b) has the same value, and is exactly representable as a BigDecimal with scale b."
13925069,2,0,1,java.math.BigDecimal,"In addition to NumberFormat for the display of your number, I would suggest you step back from the code and check out the BigDecimal class for your numeric computing needs."
13925069,2,0,1,java.math.BigDecimal,"You can set the scale BigDecimal(BigInteger unscaledVal, int scale) and effectively (read correctly) perform numeric calculations."
13947776,2,0,4,java.math.BigDecimal,Use BigDecimal to keep the monetary value.
13947776,2,0,4,java.math.BigDecimal,Read the answer of this question to find out why you should use BigDecimal.
13947824,2,0,4,java.math.BigDecimal,follow BigDecimal code.
13955616,2,1,8,java.math.BigDecimal,"Or, even better, you could free yourself from the problems of basic floating point rounding problems, and use BigDecimal: code."
13955616,2,1,8,java.math.BigDecimal,"Warning if very large values are considered, be sure to use the BigDecimal, as that preserves the precision, while floating point numbers can lose precision."
13961563,2,1,5,java.math.BigDecimal,I changed the data type from Double to BigDecimal and set the scale to 2.
13975830,2,1,1,java.math.BigDecimal,"You have to define a java.math.BigDecimal field, and put your double or float value into that field."
13975830,2,1,1,java.math.BigDecimal,The BigDecimal field (value) will go into the INSERT statement.
13984640,2,0,1,java.math.BigDecimal,You are getting error because you are attempting to convert a non numeric string total to a BigDecimal number.
13985435,2,1,1,java.math.BigDecimal,"You are not getting error because  of  converting String to Bigdecimal as there is an Constructor of Bigdecimal for the same                       BigDecimal(String val)  ,you are getting error due to total has null value and it can not  be converted to BigDecimal."
13993126,2,0,0,java.math.BigDecimal,"To have valid results in this matter, you should always used [BigDecimal]"
14029939,2,0,0,java.math.BigDecimal,I've replaced all the doubles here with a BigDecimal object representing that decimal number so that decimal accuracy && size of # is achieved.
14014158,1,0,3,java.math.BigDecimal,I guess it'd be possible to fix this with BigDecimal but I can't get it to work.
14015933,2,0,0,java.math.BigDecimal,"If you want decimal values, you must use a decimal radix, such as DecimalFormat or BigDecimal."
14023483,1,0,3,java.math.BigDecimal,Spring JDBC queryForObject with BigDecimal fails.
14023584,2,0,1,java.math.BigDecimal,java.math.BigDecimal does not have a default constructor and that's where it fails.
14029907,1,0,4,java.math.BigDecimal,"I went ahead and converted all variables and methods to BigDecimal, but now the program does not run properly."
14030023,2,0,1,java.math.BigDecimal,"Don't use the BigDecimal(double) constructor: it is limited by the double primitive type, which cannot represent 2^1000."
14037265,2,0,1,java.math.BigDecimal,If you really need exact decimal fractions use java.math.BigDecimal.
14037230,2,0,5,java.math.BigDecimal,"If you are looking for accuracy, I would suggest BigDecimal This is just like normal wrapper class which provides methods for all your operations."
14037230,2,0,5,java.math.BigDecimal,URL : http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html
14046209,1,0,3,java.math.BigDecimal,"I want to perform basic arithmetic operations like addition, substraction, multiplication and division using only one generic method per operation for wrapper types like Integer, Float, Double ... (excluding BigDecimal and BigInteger)."
14046261,2,0,1,java.math.BigDecimal,"Generally you don't need this as it's simpler and more efficient to use a ""super"" type like double or BigDecimal which can represent any value of any type."
14062904,1,0,3,java.math.BigDecimal,I've searched and found everywhere to use BigDecimal.
14062904,1,0,3,java.math.BigDecimal,The use of BigDecimal seems to work fine but I'm worried about the performance and number of objects created as this part of the code is hit frequently.
14090907,2,1,23,java.math.BigDecimal,Consider using BigDecimal if you want to represent 100ms as 0.1 seconds exactly.
14097127,1,0,5,java.math.BigDecimal,BigDecimal precision explosion.
14099173,2,0,4,java.math.BigDecimal,"in your case you can either use double to get more range, or use BigDecimal for arbitrarily-large numbers"
14099184,2,1,2,java.math.BigDecimal,"If precision is of concern, you should use BigDecimal or BigInteger (factorial is an integer function and BigInteger would probably be more efficient than BigDecimal in this case)."
14102083,1,0,14,java.math.BigDecimal,Why is BigDecimal.equals specified to compare both value and scale individually?
14102083,1,0,14,java.math.BigDecimal,"This is not a question about how to compare two BigDecimal objects - I know that you can use compareTo instead of equals to do that, since equals is documented as:  Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method)."
24965902,2,0,1,java.math.BigDecimal,"If one wants a hash table which regards numerically-equivalent BigDecimal values as equivalent, and most keys which are sought in the table will be found, the efficient way to achieve the desired result would be to use a hash table which stores value wrappers, rather than storing values directly."
24693237,2,0,0,java.math.BigDecimal,I propose the simple explanation that the designers of BigDecimal just made a bad design choice.
24693237,2,0,0,java.math.BigDecimal,"Interestingly, Scala's BigDecimal class (which is implemented using Java's BigDecimal under the hood) has made the opposite choice: code."
14119190,1,0,1,java.math.BigDecimal,then i created BigDecimal to hold that value.
14119279,2,0,2,java.math.BigDecimal,"You could do this by taking the standard parsing code from the BigDecimal class, and turning it into a static helper method that understands your non-standard format."
14119279,2,0,2,java.math.BigDecimal,"Alternatively, you could try to create regex that matches strings the non-standard form, and use that to correct the string to a form that is acceptable to BigDecimal."
14119333,2,0,0,java.math.BigDecimal,According to Javadoc for BigDecimal  The exponent consists of the character 'e' ('\u0075') or 'E' ('\u0045') followed by one or more decimal digits.
14177532,2,0,1,java.math.BigDecimal,You should use BigDecimal instead.
14188033,2,1,0,java.math.BigDecimal,You can use BigDecimal instead: code.
14188028,2,0,4,java.math.BigDecimal,"However, if you need more precision, use BigDecimal."
14192176,2,0,0,java.math.BigDecimal,"That said, Java provides java.math.BigInteger and java.math.BigDecimal for working with really big numbers."
14202246,1,0,1,java.math.BigDecimal,Unexpected BigDecimal result.
14202246,1,0,1,java.math.BigDecimal,"Possible Duplicate: Addition for BigDecimal   I feel like I'm missing something obvious, but cannot figure out what it is."
14202246,1,0,1,java.math.BigDecimal,I'm trying to use BigDecimal to get the decimal portion of a division between two numbers.
14204469,2,0,0,java.math.BigDecimal,"If you need exact representation and computation, use a BigDecimal instead."
14204495,2,0,0,java.math.BigDecimal,"You have to use double, i.e. 64-bit floating point every where the value might have passed (Or for a database you can use fixed precision)  float is not the best format for amounts (or most things) I would suggest using double instead (or BigDecimal or long with fixed precision) Instead of code."
14217694,2,1,3,java.math.BigDecimal,Try with java.math.BigDecimal.
14217711,2,0,4,java.math.BigDecimal,Avoid using float and double if exact answers are required-- Item 48 -- Effective Java Second edition Use BigDecimal instead.
14217714,2,0,1,java.math.BigDecimal,"If you want exact calculations, use java.math.BigDecimal."
14232180,2,0,5,java.math.BigDecimal,"What is ""special"" about BigDecimal is that even if the type is the same and the values are equivelent, but have different scales, they are still not ""equals"" code."
14232180,2,0,5,java.math.BigDecimal,This means if you are going to use BigDecimal you need to write code.
14232281,2,0,0,java.math.BigDecimal,Check this: public boolean equals(Object x) Compares this BigDecimal with the specified Object for equality.
14232281,2,0,0,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method)."
14276747,2,1,5,java.math.BigDecimal,"The alternatives I can think of are:  use the provided doubleValue() method, and return a double, but you could lose precision if the lists contain BigDecimal for example."
14276747,2,1,5,java.math.BigDecimal,"have one method per available Number subclass, but it could create a lot of duplicated code... restrict the type to whatever makes sense (say double if precision does not matter too much or BigDecimal if it does), which is a subcase of (2)."
14276794,2,0,1,java.math.BigDecimal,"You will need to use intrinsic types or BigDecimal (or similar) here, I think."
14281287,2,0,3,java.math.BigDecimal,You should consider using a static factory for creating your numbers just the way Integer and BigDecimal and others do.
14281311,2,0,1,java.math.BigDecimal,"Depending on what fits your needs, it could be a double, an int or a decimal type such as BigDecimal."
14283574,2,0,1,java.math.BigDecimal,One of the solutions could be use of import java.math.BigDecimal  Minimizing the effect of accuracy problems article describes the problem.
14283574,2,0,1,java.math.BigDecimal,(assuming your amount is BigDecimal.
14283574,2,0,1,java.math.BigDecimal,Bear in mind that BigDecimal is immutable so whatever is returned from calculateTotal needs to be assigned back to ammount code.
14293091,2,0,1,java.math.BigDecimal,As it was mentioned before BigDecimal is good option if you need better precision with doubles.
14293091,2,0,1,java.math.BigDecimal,Basically you have to specify scale of the BigDecimal instance.
14293091,2,0,1,java.math.BigDecimal,Please note that BigDecimal instances are immutable and that's why you have to assign result of setScale to new instance (decimalOne will not be changed).
14287812,1,0,2,java.math.BigDecimal,get a plain-string representation of a double without going through BigDecimal.
14287812,1,0,2,java.math.BigDecimal,"Now I know we can use the BigDecimal.toPlainString() method, but creating a BigDecimal simply to get a String (really?)"
14287851,2,0,4,java.math.BigDecimal,"If you don't want any rounding at all, then I would stick with what you suggested, namely (new BigDecimal(d)).toPlainString()."
14296024,2,0,4,java.math.BigDecimal,"They use a mathematical formula (I don't go into specifics) to store their data, so some values are not EXACTLY what you'd expect (this is why banks and other monetary systems use BigDecimal instead of double or other such things)."
14311644,1,0,5,java.math.BigDecimal,"""Normalizing"" BigDecimal's hash code: howto?"
14311644,1,0,5,java.math.BigDecimal,"For accuracy reasons, I tell Jackson to use BigDecimal for floating point numbers."
14313302,2,1,9,java.math.BigDecimal,"Convert to Double and use the Double's hashCode, but base equality on the BigDecimal compareTo order."
14313302,2,1,9,java.math.BigDecimal,"Some BigDecimal values that are very slightly different will get the same hashcode because of double rounding, but most distinct values will get different hashcodes, which is all you need."
14322151,1,0,0,java.math.BigDecimal,"I have tried all the possible modes of the BigDecimal.setScale(2, RoundingMode.)"
14322151,1,0,0,java.math.BigDecimal,"I have also tried to use BigDecimal.round(), with not good result neither."
14324276,1,0,0,java.math.BigDecimal,The problem is that the match method (inside A1) receives BigDecimal instead of MyVO.
14334006,2,0,2,java.math.BigDecimal,"Using Double.valueOf + DecimalFormat.format, or DecimalFormat.parse + format, or BigDecimal you can do it as this."
14336491,2,1,4,java.math.BigDecimal,You want to use Integer or Double (or BigDecimal) instead.
14343551,1,0,1,java.math.BigDecimal,Parsing all the numbers from the file into BigDecimal Java.
14343724,2,0,0,java.math.BigDecimal,"]?\\d*"" and parse them as BigDecimals with new BigDecimal(matcher.group().replace("","", ""."")"
14345147,1,0,2,java.math.BigDecimal,"My thoughts on possibilities include:  isolate the problem calculations and deal with them individually represent numbers as longs and do calculations using cents use BigDecimal and do all calculations in Java  store numbers in Strings as much as possible use <fmt:formatNumber var=""... instead of <c:set var=""..."
14348688,2,0,2,java.math.BigDecimal,use BigDecimal and do all calculations in Java  This is the answer.
14352539,2,0,0,java.math.BigDecimal,"Seems if you pull a decimal out of MySQL, you get a BigDecimal under the covers."
14345823,1,0,0,java.math.BigDecimal,i tried to convert them into BigDecimal but it also prints the result 1!!
14346092,2,0,0,java.math.BigDecimal,"You can do this with BigDecimal, like you did, but on this example, 1 (one) can be expressed on base 2 (two), so the computer holds the exactly value =D"
14346133,2,0,0,java.math.BigDecimal,I believe BigDecimal will pare this down to 1d to save memory.
14346463,2,0,7,java.math.BigDecimal,"If all you want is to parse a String to a BigDecimal, you can use the constructor that gets a string as a argument."
14371003,1,0,2,java.math.BigDecimal,"I am trying to get log of a big decimal (BigDecimal), but I get an exception error message below: code."
14384937,1,0,1,java.math.BigDecimal,I have a function that returns an Object The toString() method shows that my object has two BigDecimal attributes.
14385204,2,1,1,java.math.BigDecimal,"Then, you should be able to access the first BigDecimal like that: code."
14385119,2,0,1,java.math.BigDecimal,"This time you may get BigDecimal, next query might return a String and BigDecimal."
14411615,2,0,5,java.math.BigDecimal,BigInteger or BigDecimal.
14413952,1,0,0,java.math.BigDecimal,java.lang.NumberFormatException: Infinite or NaN at java.math.BigDecimal.
14413952,1,0,0,java.math.BigDecimal,I tried to use double for sum instead of BigDecimal but it gives me infinity as a result.
14413952,1,0,0,java.math.BigDecimal,"when I used BigDecimal I got no results but error says:  Exception in thread ""main"" java.lang.NumberFormatException: Infinite or NaN       at java.math.BigDecimal."
14420182,1,0,1,java.math.BigDecimal,Float cannot be dereferenced - using BigDecimal.
14420301,2,1,1,java.math.BigDecimal,"Just change  float loanInterest = sc.nextFloat(); with  BigDecimal loanInterest = new BigDecimal(sc.nextFloat()); and you will resolve ""float cannot be derefenced"" since float is a primitive type and has not method setScale."
14420301,2,1,1,java.math.BigDecimal,"This code will use 5 decimals, but be sure that your BigDecimal scale is at least 5, otherwise you will get not significant zeros."
14446959,2,0,0,java.math.BigDecimal,"Perhaps you should use a BigDecimal, which would be accurate enough for you."
14455443,2,0,14,java.math.BigDecimal,"In the properties panel choose this configuration: Variable class: BigDecimal, Calculation: Sum, ResetType: Group, ResetGroup PledgeType, Variable Expression: $F{amount}."
14476221,1,0,2,java.math.BigDecimal,the number of constructors during runtime and compile time for java.math.BigDecimal do not match.
14476523,2,0,0,java.math.BigDecimal,Add a call to BigDecimal constructor by adding super(val) in your constructor.
14478174,2,0,1,java.math.BigDecimal,"BigDecimal, or more commonly, formatting the output using DecimalFormat."
26927972,2,0,1,java.math.BigDecimal,Why not generalize your bitmask function to pass any arbitrary number of booleans (problably using BigDecimal would be better -> up to specific needs): code.
14504286,1,0,0,java.math.BigDecimal,when running the code below i'm getting compilation error: java: ..\JavaClass.java:8: cannot find symbol symbol  : method add(java.math.BigDecimal) location: class BigDecimalDelegated it seems like the stub of the groovy class created for the java compiler does not contain the delegated methods.
14515640,1,0,4,java.math.BigDecimal,"eg: fetched value is 1 - should be displayed as 1.00     fetched value is 1.7823 - should be displayed as 1.78 I am using 'setScale(2, BigDecimal.ROUND_HALF_UP)' but still some places, if the data from DB is a whole number then the same is being displayed !!"
14515734,2,0,2,java.math.BigDecimal,"BigDecimal is immutable, any operation on it including setScale(2, BigDecimal.ROUND_HALF_UP) produces a new BigDecimal."
19486086,2,0,0,java.math.BigDecimal,BigDecimal.setScale would work.
14533787,1,0,1,java.math.BigDecimal,I'm making a calculation module about that accepts double or BigDecimal like this but I have this problem.
14533796,2,1,4,java.math.BigDecimal,You're running up against double's limits to accuracy since you're initializing your BigDecimal with a double literal.
14533796,2,1,4,java.math.BigDecimal,"Instead, consider initializing your BigDecimal with a String literal, not a double literal value: code."
14533833,2,0,2,java.math.BigDecimal,Same applies when you use that constant in BigDecimal.valueOf().
14533833,2,0,2,java.math.BigDecimal,"You can't get the result you want out of a double at all, but you can with BigDecimal if you construct it with that value in a string literal."
14568259,1,0,13,java.math.BigDecimal,Is BigDecimal an overkill in some cases?
14568259,1,0,13,java.math.BigDecimal,Is BigDecimal needed to guarantee results of multiplication/division are accurate?
14568300,2,0,2,java.math.BigDecimal,"If you're creating a casual application and/or are only using it for, say, data entry, BigDecimal is very likely overkill."
14568326,2,1,17,java.math.BigDecimal,BigDecimal is a very appropriate type for decimal fraction arithmetic with a known number of digits after the decimal point.
14568326,2,1,17,java.math.BigDecimal,"As well as managing the digits after the decimal point, BigDecimal will also expand the number of stored digits as needed - many business and government financial calculations involve sums too large to store in cents in an int."
14582190,2,0,1,java.math.BigDecimal,"BigDecimal supports all rounding and precision issues while a long/int has severe problems:  Unknown number of fraction digits: Trade exchanges/Law/Commerce are varying in their amount of fractional digits, so you do not know if your chosen number of digits must be changed and adjusted in the future."
14568433,2,0,0,java.math.BigDecimal,Division will be a concern no matter whether you use a long or a BigDecimal.
14570808,1,0,1,java.math.BigDecimal,"I have tried looking into several different tutorials, but they didn't work for me either because they implemented a server/client solution or because they didn't allow me to send the BigDecimal Objects."
14603548,1,0,2,java.math.BigDecimal,"Namely, I'd like to get all calls to methods of type java.math.BigDecimal."
14603548,1,0,2,java.math.BigDecimal,I want to find all of my code that calls any of BigDecimal's methods.
14603548,1,0,2,java.math.BigDecimal,derive the subset of BigDecimal's public interface that my code is actually using).
14614536,2,0,5,java.math.BigDecimal,Consider using BigDecimal instead.
14661059,1,0,1,java.math.BigDecimal,Update Looks like the root cause of the issue is invocation of doubleValue() of BigDecimal code.
14678523,1,0,0,java.math.BigDecimal,I already did some research on rounding and implemented the BigDecimal rounding method:  code.
14678523,1,0,0,java.math.BigDecimal,"I'm also wondering if I should even use BigDecimal, seeing as that has not been introduced in the class yet."
14678575,2,1,1,java.math.BigDecimal,"Regarding the appropriateness of BigDecimal, if you are dealing with money, which you are, where precision is required, use BigDecimal."
14678575,2,1,1,java.math.BigDecimal,"If you return BigDecimal instead of double from your round method, the floating precision will not be lost."
14679879,1,0,1,java.math.BigDecimal,JSF incorrect BigDecimal conversions.
14679879,1,0,1,java.math.BigDecimal,"Problem: Need to format a BigDecimal through JSF, but JSF is destroying the precision of the BigDecimal."
14679879,1,0,1,java.math.BigDecimal,"- the method actually got called instead of the roundUp(BigDecimal, int) method."
14679879,1,0,1,java.math.BigDecimal,"I later experimented with the BigDecimal constructor, with the following result: code."
14679879,1,0,1,java.math.BigDecimal,"Theory: From the above, it seems that JSF was taking my BigDecimal value converting it to String, than to Double, than calling a 'new BigDecimal(double)' on the value to get the BigDecimal - which returns the wrong value."
14680354,2,1,2,java.math.BigDecimal,"Your converter will get the value as an Object, i.e. a BigDecimal, and is responsible for converting it to a String itself."
14684825,2,1,19,java.math.BigDecimal,"The first examples that come to mind are some of the non-final Number subclasses, such as BigDecimal and BigInteger, which should probably have been final."
14684825,2,1,19,java.math.BigDecimal,"That enables you to create a broken BigDecimal, for example: code."
14684825,2,1,19,java.math.BigDecimal,That could create significant issues if you receive BigDecimal from an untrusted code for example.
14686052,1,0,3,java.math.BigDecimal,BigDecimal getting rounded..but i do not want any rounding.
14697542,2,0,1,java.math.BigDecimal,BigDecimal has nothing to do with it.
14697542,2,0,1,java.math.BigDecimal,"It cannot be represented exactly in floating-point.If you want an accurate BigDecimal with this value, use new BigDecimal(String)."
14686078,2,1,8,java.math.BigDecimal,"Construct the big decimal using a String, otherwise the constant you enter gets rounded before it is passed as argument to the constructor of BigDecimal."
14686138,2,0,0,java.math.BigDecimal,"When you print value you can use BigDecimal.toPlainString() to return ""a string representation of this BigDecimal without an exponent field""."
14688227,1,0,1,java.math.BigDecimal,How to initialize a BigDecimal with a very precise floating point value.
14688227,1,0,1,java.math.BigDecimal,"I have a database column with Decimal(19,5) size, I want a BigDecimal in java to store the value but if I write code."
14688260,2,1,5,java.math.BigDecimal,You need to use a constructor that takes a String because the value of double constant is rounded by the compiler well before it gets to the BigDecimal's constructor.
14688260,2,1,5,java.math.BigDecimal,"The double type does not have enough precision to store all the nines, so the value gets rounded to 1+E15, and that's the value that gets passed to BigDecimal's constructor."
14688260,2,1,5,java.math.BigDecimal,"On the other hand, when you pass a string, you let BigDecimal do the interpretation of the sequence of nines, making sure that you get the exact precision that you need."
14688264,2,0,2,java.math.BigDecimal,The main reason that you have to use BigDecimal here is that the value will not fit into the double type.
14688264,2,0,2,java.math.BigDecimal,"The double value will get rounded when passed into the constructor of BigDecimal, so no matter what you do you can not recover the original value, if you pass just a double."
14688264,2,0,2,java.math.BigDecimal,So you have no better option - use BigDecimal like you do.
14701757,1,0,3,java.math.BigDecimal,Convert List of String to List of BigDecimal in java.
14701757,1,0,3,java.math.BigDecimal,and BigDecimal List as code.
14701757,1,0,3,java.math.BigDecimal,I know we can iterate through the stringList and can add to bigDecimalList using new BigDecimal(string).
14701796,2,0,1,java.math.BigDecimal,"At some level - either in an external library, a lower level library, or in your code - you'll have to iterate over the structure and create new BigDecimal objects in your other list."
14701796,2,0,1,java.math.BigDecimal,"This takes all of the contents of the stringList, maps them across to the constructor of BigDecimal, and collects them into a new List object, which we then assign."
14705312,2,0,1,java.math.BigDecimal,"Unfortunately, you cannot use BigInteger here, but I think you should be able to do that with a BigDecimal (I haven't tested that, though)."
14712383,2,0,0,java.math.BigDecimal,"I suggest switching to BigDecimal, rather than double, for this arithmetic."
14712383,2,0,0,java.math.BigDecimal,"In BigDecimal, it is easy to control both the number of digits after the decimal point and the rounding mode."
14719653,2,0,4,java.math.BigDecimal,You should use BigDecimal for unlimited precision.
14719666,2,1,3,java.math.BigDecimal,Try Using BigDecimal code.
14734706,2,0,2,java.math.BigDecimal,"Depending on your needs, you may use BigDecimal instead of double."
14735587,2,1,1,java.math.BigDecimal,"The hashcodes created by different objects, like String or BigDecimal, certainly have nothing to do with memory."
14739823,1,0,4,java.math.BigDecimal,Improve performance on BigDecimal to double conversion.
14739823,1,0,4,java.math.BigDecimal,This is the Jdk7-b147 version of BigDecimal.doubleValue() code.
14740468,2,1,7,java.math.BigDecimal,There isn't a much better way to convert a BigDecimal to a double.
14750001,2,1,3,java.math.BigDecimal,"If you want decimal numbers to come out as exactly as you entered them in Java, use BigDecimal instead of float."
14757216,2,0,0,java.math.BigDecimal,For best practice use BigDecimal instead.
14757309,2,0,0,java.math.BigDecimal,Use BigDecimal instead of double Use StrictMath instead of Math
14764296,1,0,2,java.math.BigDecimal,Convert math equation to Java BigDecimal line.
14764296,1,0,2,java.math.BigDecimal,I am trying to make a small tool that transfers a math equation to a Java BigDecimal line.
14764848,2,1,2,java.math.BigDecimal,"The change to BigDecimal is straightforward, but you may have to scale back on the named functions."
14772323,1,0,13,java.math.BigDecimal,"Why does new BigDecimal(""0.0"").stripTrailingZeros() have a scale of 1?"
14772323,1,0,13,java.math.BigDecimal,"That would seem logical... EDIT: OK, so, this is a very old bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6480539 and in fact, it ""works"" for any number of zeroes: new BigDecimal(""0.0000"").stripTrailingZeroes().scale() is 4!"
14799888,1,0,1,java.math.BigDecimal,"I using the following code and i added the support for big decimal and the compiler show error on the create object for the big decimal new BigDecimal(nextRandom),how can I overcome it?"
14799923,2,0,5,java.math.BigDecimal,where nextRandom is a BigDecimal.
14805405,2,0,0,java.math.BigDecimal,"To help with rounding and precision, I'd recommend using BigDecimal instead of double."
14804533,2,0,0,java.math.BigDecimal,"However, consider using BigDecimal than using double, in which case you can use the following method code."
14804533,2,0,0,java.math.BigDecimal,"If the unlikely case that you do go with this solution, have a look at the JavaDocs for BigDecimal and MathContext before."
14823772,1,0,5,java.math.BigDecimal,java math library for BigDecimal which allows null values.
14823772,1,0,5,java.math.BigDecimal,Is there a BigDecimal library with the basic operations of BigDecimal which allows null values?
14823772,1,0,5,java.math.BigDecimal,"You either never allow null values in database, application or view and initialize everything with new BigDecimal(0) or perform null checks on every usage for nullable values."
14823899,2,1,10,java.math.BigDecimal,"As for new BigDecimal(0): no, use BigDecimal.ZERO."
14824438,1,0,3,java.math.BigDecimal,I am trying to display the percentage using BigDecimal.
14824477,2,0,2,java.math.BigDecimal,"BigDecimal decimal = new BigDecimal((9522 * 100 ) / total);  This is not how you do operations on BigDecimal: by the time the BigDecimal is constructed, the precision is gone, because the calculation (9522 * 100 ) / total is done at compile time."
14824477,2,0,2,java.math.BigDecimal,Here is how you calculate with BigDecimal objects: code.
14834609,2,0,4,java.math.BigDecimal,"What you can do is define methods to represent the operations, like BigDecimal or BigInteger in the standard library do."
14845954,2,1,19,java.math.BigDecimal,"You will have to convert into a decimal radix, either via BigDecimal or DecimalFormat, depending on what you want to do with the value later."
14848776,1,0,5,java.math.BigDecimal,JAXB marshalling for BigDecimal using fractionDigits.
14854562,1,0,2,java.math.BigDecimal,"Let me begin this question by stating that for the type of high performance application we are developing, BigDecimal is unacceptably slow."
14855031,2,0,0,java.math.BigDecimal,Or avoid the analysis and just use a scaled long or BigDecimal.
14859631,1,0,1,java.math.BigDecimal,I have a string that I'm trying to parse into a BigDecimal.
14859631,1,0,1,java.math.BigDecimal,"Once it has been stripped, I'm then trying to create a BigDecimal with the remaining value."
14859785,2,1,2,java.math.BigDecimal,"You will need to detect the ( and ) characters yourself, then strip them out, create a BigDecimal from the rest of the string, and negate it."
14859719,2,0,1,java.math.BigDecimal,What makes you think parentheses are correctly interpreted by BigDecimal?
16299139,2,0,0,java.math.BigDecimal,here is what i know so far ... to round a double you should use BigDecimal like this:  code.
14876810,2,1,5,java.math.BigDecimal,"Once you have rounded, store the result in a BigDecimal or a String."
14876887,2,0,1,java.math.BigDecimal,"So if you need to process the rounded values simply store them in a BigDecimal, round it and keep working with that instead of going back to a double."
14902475,2,0,2,java.math.BigDecimal,"Alternatively, you could switch to better classes for precise number handling, such as BigDecimal."
14912617,1,0,1,java.math.BigDecimal,How to calculate the memory occupied by a given BigDecimal value?
14912617,1,0,1,java.math.BigDecimal,How do I calculate the memory occupied by a given BigDecimal value?
14912617,1,0,1,java.math.BigDecimal,How is it done in case of a BigDecimal object?
14921379,1,0,0,java.math.BigDecimal,"In all the cases presented above, formatting the corresponding BigDecimal seems to perform the rounding as expected."
14923425,1,0,1,java.math.BigDecimal,"I using the following code to determine class member type ,I've seen all the introspection methods but haven't quite figured out how to do it for type such as string ,BigDecimal ,date etc."
14923425,1,0,1,java.math.BigDecimal,"I want to do the same for string ,BigDecimal ,fieldTypeName,java.util.Date etc how should i do that ?"
14925692,2,0,2,java.math.BigDecimal,"for example, BigDecimal: http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html Any type can be defined as type of a class member."
15332989,2,0,2,java.math.BigDecimal,Queries that result in projections of custom field types or BigDecimal or BigInteger fields are not cached.
14998151,2,0,0,java.math.BigDecimal,Queries that result in projections of custom field types or BigDecimal or BigInteger fields are not cached.
14974236,2,0,2,java.math.BigDecimal,"If exact decimal digits are important to you, you probably shouldn't be using a binary floating point type - use BigDecimal instead."
14974236,2,0,2,java.math.BigDecimal,"If it's an artificial construct with discrete (decimal-based) values, such as monetary values, then you should definitely use BigDecimal, or simply scale an integer."
14983366,1,0,0,java.math.BigDecimal,Cannot add with Hibernate BigDecimal (SQLite).
14983366,1,0,0,java.math.BigDecimal,"When I'm trying to add Object with field BigDecimal (new BigDecimal(""1.0"")) I'm getting this error:  16:00:59.058 [main] DEBUG o.h.e.jdbc.spi.SqlExceptionHelper - not implemented by SQLite JDBC driver [n/a] java.sql.SQLException: not   implemented by SQLite JDBC driver     at   org.sqlite.Unused.unused(Unused.java:29) ~[sqlite-jdbc-3.7.2.jar:na]     at org.sqlite.Unused.setBigDecimal(Unused.java:58)   ~[sqlite-jdbc-3.7.2.jar:na]   at   sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   ~[na:1.6.0_38]    at   sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)   ~[na:1.6.0_38]    at   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)   ~[na:1.6.0_38]    at java.lang.reflect.Method.invoke(Method.java:597)   ~[na:1.6.0_38]    at   org.hibernate.engine.jdbc.internal.proxy.AbstractStatementProxyHandler.continueInvocation(AbstractStatementProxyHandler.java:122)   ~[hibernate-core-4.1.4.Final.jar:4.1.4.Final]     at   org.hibernate.engine.jdbc.internal.proxy.AbstractProxyHandler.invoke(AbstractProxyHandler.java:81)   ~[hibernate-core-4.1.4.Final.jar:4.1.4.Final]     at   $Proxy20.setBigDecimal(Unknown Source) ~[na:na]   at   org.hibernate.type.descriptor.sql.DecimalTypeDescriptor$1.doBind(DecimalTypeDescriptor.java:58)   ~[hibernate-core-4.1.4.Final.jar:4.1.4.Final]     at   org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:92)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:305)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:300)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.type.AbstractSingleColumnStandardBasicType.nullSafeSet(AbstractSingleColumnStandardBasicType.java:57)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2602)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.persister.entity.AbstractEntityPersister.dehydrate(AbstractEntityPersister.java:2579)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.persister.entity.AbstractEntityPersister$4.bindValues(AbstractEntityPersister.java:2760)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.id.insert.AbstractSelectingDelegate.performInsert(AbstractSelectingDelegate.java:60)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2767)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3278)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:362)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:203)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:183)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:167)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:320)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:287)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:126)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:204)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:189)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:114)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:728)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:720)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.CascadingAction$5.cascade(CascadingAction.java:258)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:380)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:323)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:208)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:409)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:350)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:326)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:208)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascade(Cascade.java:165)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave(AbstractSaveEventListener.java:448)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:293)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:126)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:204)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:189)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:114)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:728)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:720)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.CascadingAction$5.cascade(CascadingAction.java:258)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:380)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:323)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:208)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:409)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:350)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:326)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:208)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascade(Cascade.java:165)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave(AbstractSaveEventListener.java:448)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:293)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:126)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:204)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:189)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.performSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:114)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.fireSaveOrUpdate(SessionImpl.java:728)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.saveOrUpdate(SessionImpl.java:720)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.spi.CascadingAction$5.cascade(CascadingAction.java:258)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:380)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:323)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:208)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeCollectionElements(Cascade.java:409)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeCollection(Cascade.java:350)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:326)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:208)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.engine.internal.Cascade.cascade(Cascade.java:165)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.cascadeAfterSave(AbstractSaveEventListener.java:448)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:293)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:193)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:126)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.saveWithGeneratedOrRequestedId(DefaultSaveOrUpdateEventListener.java:204)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveEventListener.saveWithGeneratedOrRequestedId(DefaultSaveEventListener.java:55)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.entityIsTransient(DefaultSaveOrUpdateEventListener.java:189)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveEventListener.performSaveOrUpdate(DefaultSaveEventListener.java:49)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.event.internal.DefaultSaveOrUpdateEventListener.onSaveOrUpdate(DefaultSaveOrUpdateEventListener.java:90)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.fireSave(SessionImpl.java:757)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.save(SessionImpl.java:749)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   org.hibernate.internal.SessionImpl.save(SessionImpl.java:745)   [hibernate-core-4.1.4.Final.jar:4.1.4.Final]  at   database.sqlite.sessionsworkers.InsertSessionWorker.applyOnDatabase(InsertSessionWorker.java:25)   [classes/:na]     at   database.sqlite.sessionsworkers.InsertSessionWorker.applyOnDatabase(InsertSessionWorker.java:1)   [classes/:na]     at   database.local.sqlite.SQLite.doTransaction(SQLite.java:108)   [classes/:na]     at database.local.sqlite.SQLite.save(SQLite.java:137)   [classes/:na]     at   database.local.sqlite.SQLite.saveOwner(SQLite.java:173) [classes/:na]     at   database.local.sqlite.SQLiteTest.create_database(SQLiteTest.java:67)   [test-classes/:na]    at   sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   ~[na:1.6.0_38]    at   sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)   ~[na:1.6.0_38]    at   sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)   ~[na:1.6.0_38]    at java.lang.reflect.Method.invoke(Method.java:597)   ~[na:1.6.0_38]    at   org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)   [junit-4.10.jar:na]   at   org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)   [junit-4.10.jar:na]   at   org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)   [junit-4.10.jar:na]   at   org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)   [junit-4.10.jar:na]   at   org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)   [junit-4.10.jar:na]   at   org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)   [junit-4.10.jar:na]   at   org.junit.runners.ParentRunner.run(ParentRunner.java:300)   [junit-4.10.jar:na]   at   org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)   [.cp/:na]     at   org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)   [.cp/:na]     at   org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)   [.cp/:na]     at   org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)   [.cp/:na]     at   org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)   [.cp/:na]     at   org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)   [.cp/:na]"
14984664,1,0,10,java.math.BigDecimal,"A lot of the answers point to use BigDecimal, but the String I get may not be numeric."
15014884,2,0,1,java.math.BigDecimal,"But again, as you work with immutable data, just BigDecimal is enough (and this is not going to change)."
15021149,2,0,5,java.math.BigDecimal,"By using immutable objects, like String, or BigDecimal, simply assigning the object reference will do."
15031157,2,0,1,java.math.BigDecimal,Why don't you try BigDecimal ?
15132034,1,0,0,java.math.BigDecimal,Operating BigDecimal give Unexpected Result.
15132034,1,0,0,java.math.BigDecimal,I'm currently using BigDecimal and here is one of my implementation for getting a number with 2 precision: code.
15148326,2,1,1,java.math.BigDecimal,"Update From your stacktrace:  java.lang.NumberFormatException: £5  Looks like you're code is trying to put ""£5"" into BigDecimal, which is not allowed, since it is not a number."
15159248,2,0,2,java.math.BigDecimal,The formatter can be applied to BigDecimal: code.
15162956,2,0,5,java.math.BigDecimal,"You might want to keep the numbers as Strings, or use BigDecimal."
15162973,2,0,10,java.math.BigDecimal,Either use BigDecimal or store an integer number of cents (or whatever type of data you're storing).
15162973,2,0,10,java.math.BigDecimal,Sample showing BigDecimal working: code.
15163020,2,0,2,java.math.BigDecimal,By using java.math.BigDecimal: code.
15164636,1,0,5,java.math.BigDecimal,I am currently using the BigDecimal and it is giving me more decimals but not nearly enough for what I am trying to do.
15164740,2,0,2,java.math.BigDecimal,The 103993/33102.0 is evaluated as a double precision floating point expression (double) before the BigDecimal class ever gets involved.
15164740,2,0,2,java.math.BigDecimal,You should make separate BigDecimal objects and use BigDecimal.divide to get the number you want.
15171949,2,0,3,java.math.BigDecimal,"Using BigDecimal in place of double would fix the problem, because 0.1 would be represented exactly."
15175923,2,0,2,java.math.BigDecimal,"There are things called Value Objects (like BigDecimal or String), where objects with the same value are considered to be interchangeable, so the default behavior of equals is not desirable."
15176872,1,0,5,java.math.BigDecimal,I have tried two different approaches one using BigDecimal and the other using strings and neither one is working efficiently.
15177290,1,0,0,java.math.BigDecimal,int divided by int to make a BigDecimal.
15177290,1,0,0,java.math.BigDecimal,Is it possible to divide two integers to make and make a BigDecimal out of it?
15177290,1,0,0,java.math.BigDecimal,"If I could reduce the number of times I declared a new BigDecimal, it should speed up my process significantly."
15177349,2,1,4,java.math.BigDecimal,There is a slight improvement that you can do that uses the BigDecimal's internal cache by using its valueOf method: code.
15182260,2,0,2,java.math.BigDecimal,"So you have to either use DecimalFormat if you are presenting the result, or BigDecimal if you want to keep computing with it."
15198387,2,0,0,java.math.BigDecimal,See the wikipedia page for different division algorithms you could use: https://en.wikipedia.org/wiki/Division_%28digital%29 Alternatively use BigDecimal like so: code.
15205469,1,0,2,java.math.BigDecimal,I can't use el-jboss because it conflict with JSF validation on BigDecimal types.
15226809,2,0,2,java.math.BigDecimal,For Oracle datatype NUMBER use either oracle.sql.NUMBER or java.math.BigDecimal.
15407521,2,1,0,java.math.BigDecimal,It seems like it is a BigDecimal issues.
15248844,1,0,2,java.math.BigDecimal,How to deserialize BigDecimal by using GWT AutoBean?
15248844,1,0,2,java.math.BigDecimal,I figure out that those which cant be deserialize has BigDecimal getters/setters.
15248844,1,0,2,java.math.BigDecimal,Error:  TypeError: Cannot read property 'length' of undefined       at java_math_BigDecimal_$initFrom__Ljava_math_BigDecimal_2Ljava_lang_String_2  How to handle BigDecimal into GWT while deserializing with AutoBean?
15250110,2,1,2,java.math.BigDecimal,AutoBean expects BigDecimal as strings in the JSON payload.
15254977,2,1,3,java.math.BigDecimal,Use an overloaded divide method of BigDecimal that takes a scale as an argument; you can get an arbitary scale that way.
15255488,2,0,0,java.math.BigDecimal,If your question points to the the usage of BigDecimal - it gets used like this: code.
15266170,1,0,1,java.math.BigDecimal,Using BigDecimal correctly.
15266170,1,0,1,java.math.BigDecimal,I'm doing scientific calculations that need to be accurate as possible so I am converting the existing use of Double to BigDecimal.
15266344,2,0,0,java.math.BigDecimal,see BigDecimal.divide API to understand why to use MathContext
15266211,2,0,2,java.math.BigDecimal,BigDecimal has methods for all the operators.
15266211,2,0,2,java.math.BigDecimal,"Avoid using doulbles, instead use BigDecimal from the beginning."
15266249,2,0,3,java.math.BigDecimal,You are doing your arithmetics with doubles before converting the result to BigDecimal.
15266249,2,0,3,java.math.BigDecimal,"You should convert every number to BigDecimal as soon as possible and then use the methods of BigDecimals (subtract, divide and so on) on the BigDecimal representation to do the arithmetics."
15273509,2,0,2,java.math.BigDecimal,Your options:  round the numbers use a i < 2.0 condition (but you might miss one iteration depending on rounding) use a BigDecimal for an exact representation of 0.2
15298258,2,1,5,java.math.BigDecimal,Use BigDecimal Instead of a double: code.
15298258,2,1,5,java.math.BigDecimal,"This works because BigDecimal maintains a ""precision,"" and the BigDecimal(String) constructor sets that from the number of digits to the right of the ., and uses it in toString."
15311487,2,0,2,java.math.BigDecimal,"Where amountTransferred is a double or float or BigDecimal, hours and minutes are integer types."
15322568,2,0,0,java.math.BigDecimal,"If you really need this level of precision, you should consider using BigDecimal."
15322595,2,0,2,java.math.BigDecimal,Use a BigDecimal instead.
15345440,1,0,4,java.math.BigDecimal,JPA/Hibernate returning BigDecimal not Long.
15345440,1,0,4,java.math.BigDecimal,In Eclipse debug mode closed is showing as BigDecimal.
15345440,1,0,4,java.math.BigDecimal,EDIT 2 I think I am stuck with a BigDecimal?
15345538,2,0,2,java.math.BigDecimal,"Type erasure means that at execution time, there's no difference between a List<Long> and a List<BigDecimal>."
15346359,1,0,0,java.math.BigDecimal,BigDecimal to String in Java.
15346359,1,0,0,java.math.BigDecimal,I need to convert a BigDecimal value to a string.
15346359,1,0,0,java.math.BigDecimal,I know toString() converts BigDecimal to String.
15352229,1,0,3,java.math.BigDecimal,Rounding mode with BigDecimal in Java.
15365661,2,0,3,java.math.BigDecimal,You could use BigDecimal.
15365661,2,0,3,java.math.BigDecimal,Create a BigDecimal with your double value then check the scale with bigDVariable.scale() and round with the wanted scale depending on the value returned by it and its value.
15365661,2,0,3,java.math.BigDecimal,BigDecimal doc.
15367209,2,0,1,java.math.BigDecimal,"If you want high precision (significant digits), you'll have to use BigDecimal instead of double."
15367209,2,0,1,java.math.BigDecimal,The BigDecimal round method gives you the number of significant digits you ask for.
15381079,2,0,0,java.math.BigDecimal,"If you want them presented with a certain number of decimal places, you have to convert to a decimal radix, via either BigDecimal or DecimalFormat, where you can control the number of decimal places."
15428630,1,0,5,java.math.BigDecimal,java BigDecimal subraction failing.
15428630,1,0,5,java.math.BigDecimal,but getting different result when subtracting using BigDecimal.
15428892,2,0,8,java.math.BigDecimal,Recall that a BigDecimal is the combination of an unscaled value and a decimal scale factor: code.
15428892,2,0,8,java.math.BigDecimal,"The next obvious question is, why doesn't BigDecimal.toString just display b1 as ""0"", for convenience?"
15428892,2,0,8,java.math.BigDecimal,From the Javadoc for toString:  There is a one-to-one mapping between the distinguishable BigDecimal values and the result of this conversion.
15428892,2,0,8,java.math.BigDecimal,"That is, every distinguishable BigDecimal value (unscaled value and scale) has a unique string representation as a result of using toString."
15428892,2,0,8,java.math.BigDecimal,"If that string representation is converted back to a BigDecimal using the BigDecimal(String) constructor, then the original value will be recovered."
15428892,2,0,8,java.math.BigDecimal,"If it just displayed ""0"", then you wouldn't be able to get back to this exact BigDecimal object."
15428651,2,1,1,java.math.BigDecimal,"It's likely they'll just state that 0e-59 is still zero, so not a bug, or that the rather complex behaviour being described on the BigDecimal documentation page is working as intended."
15428651,2,1,1,java.math.BigDecimal,"Specifically, the point that states:  There is a one-to-one mapping between the distinguishable BigDecimal values and the result of this conversion."
15428651,2,1,1,java.math.BigDecimal,"That is, every distinguishable BigDecimal value (unscaled value and scale) has a unique string representation as a result of using toString."
15428651,2,1,1,java.math.BigDecimal,"If that string representation is converted back to a BigDecimal using the BigDecimal(String) constructor, then the original value will be recovered."
15428651,2,1,1,java.math.BigDecimal,"Otherwise, converting the string back to a BigDecimal may give you a different value (unscaled-value/scale tuple)."
15428677,2,0,7,java.math.BigDecimal,"Use constructor from String: b1 = new BigDecimal(""0.01""); Java loss of precision (slide 23) http://strangeloop2010.com/system/talks/presentations/000/014/450/BlochLee-JavaPuzzlers.pdf"
15428719,2,0,2,java.math.BigDecimal,The reason is that toString() prints the canonical format of the BigDecimal.
15428719,2,0,2,java.math.BigDecimal,See BigDecimal.toString() for more information.
15428719,2,0,2,java.math.BigDecimal,"So, the unexpected result is a matter of the internal representation of the BigDecimal."
15428754,2,0,1,java.math.BigDecimal,"It's a known issue, BigDecimal(double val) API The results of this constructor can be somewhat unpredictable."
15428754,2,0,1,java.math.BigDecimal,Actual reason is that new BigDecimal(0.01) produces a BigDecimal with approx values code.
15428816,2,0,2,java.math.BigDecimal,BigDecimal(double val)  1.The results of this constructor can be somewhat unpredictable.
15428816,2,0,2,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
15428816,2,0,2,java.math.BigDecimal,"2.The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which is exactly   equal to 0.1, as one would expect."
15428816,2,0,2,java.math.BigDecimal,"3.When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the   same result as converting the double to a String using the   Double.toString(double) method and then using the BigDecimal(String)   constructor."
15451978,2,0,1,java.math.BigDecimal,"However, you should consider going further down the BigDecimal path you started down, which uses arbitrary precision arithmetic."
15455862,1,0,0,java.math.BigDecimal,BigDecimal Precision Issue?
15455862,1,0,0,java.math.BigDecimal,I am writing a program in which I have to repeatedly multiply two BigDecimal.
15455862,1,0,0,java.math.BigDecimal,"After the 27th iteration, I get: 0.905225895893387921845435055445776361046057346344145563957027726 Any further calculations using this number (BigDecimal * 0.182365681285) results in trailing zeros."
15455862,1,0,0,java.math.BigDecimal,So I was wondering if this was due to some precision issue with BigDecimal.
15455963,2,1,1,java.math.BigDecimal,"The multiply method creates a BigDecimal which has a scale equal to the scale of the first operand + the scale of the second operand,  even if that leads to trailing zeros."
15455968,2,0,0,java.math.BigDecimal,Note: BigDecimal doesn't assume you want to strip trailing zeros by default code.
15455968,2,0,0,java.math.BigDecimal,There is no reason you should be getting zero's which shouldn't be there unless you are multiplying double values converted to BigDecimal each time.
15459012,2,0,1,java.math.BigDecimal,"You may work with BigDecimal instead, but note that computations with BigDecimal are slower."
15458574,2,0,1,java.math.BigDecimal,"If you need to keep a rendering information like the number of digits after the comma, you need something else, like BigDecimal."
15458614,2,0,3,java.math.BigDecimal,"As far as your options go, you could:  accept the rounding issues associated with using double; return an int (i.e. the rounded value multiplied by 100); return a String; return a BigDecimal."
15462078,1,0,3,java.math.BigDecimal,PMD quite correctly says:  Useless operation on Immutable  So why do Immutable classes like BigDecimal export mutators for properties?
15462093,2,0,8,java.math.BigDecimal,setScale() doesn't mutate the BigDecimal it's called on.
15462093,2,0,8,java.math.BigDecimal,It returns a copy of the BigDecimal with the new scale value.
15465600,2,0,3,java.math.BigDecimal,Take a look at the BigInteger and BigDecimal classes.
15465600,2,0,3,java.math.BigDecimal,"As the names would imply, BigInteger is only used for integers, while BigDecimal can store any rational decimal number."
15510056,2,1,2,java.math.BigDecimal,"Alternately, since there is a BigDecimal constructor which accepts strings, you could try to get away with this, though it's not really any less-smelly: code."
15510059,2,0,0,java.math.BigDecimal,"This way, you're using the constructor of BigDecimal that takes a double instead of a char[]."
15511196,1,0,0,java.math.BigDecimal,Format BigDecimal jsf 2.0.
15511196,1,0,0,java.math.BigDecimal,I'm new with jsf and i'm trying to format a BigDecimal in my jsf page.
15525170,1,0,4,java.math.BigDecimal,BigDecimal is not doing add operation.
15525170,1,0,4,java.math.BigDecimal,I have 2 BigDecimal numbers.
15525183,2,0,10,java.math.BigDecimal,"BigDecimal values are immutable, You need to assign the value to the result of add: code."
15525214,2,0,3,java.math.BigDecimal,BigDecimal is immutable.
15525214,2,0,3,java.math.BigDecimal,Reading Java Doc about BigDecimal helps you to understand better.
15525824,2,0,2,java.math.BigDecimal,"You should use BigDecimal, because it allows you to specify the number of decimal places and the rounding strategy."
15543865,2,0,0,java.math.BigDecimal,Check out this guide: http://floating-point-gui.de/basic/ Use BigDecimal in java to avoid rounding errors.
15549416,2,0,0,java.math.BigDecimal,"If you need arbitrarily good precision, use the java.math.BigDecimal class."
15557493,2,1,6,java.math.BigDecimal,"If you need really accurate representation of decimal numbers, the BigDecimal class will quickly become your best friend."
15563600,2,1,4,java.math.BigDecimal,Use the java.math.BigDecimal (or java.math.BigInteger) class for extremely large numbers.
15563600,2,1,4,java.math.BigDecimal,"Using BigDecimal, which can be arbitrarily long, will solve your problem given time."
15564992,2,1,6,java.math.BigDecimal,"If you want your computations to be exact, you could use BigDecimal instead of float/double."
15569931,2,1,0,java.math.BigDecimal,"EDIT: Improved to differentiate float, double and BigDecimal with a basic regex among other things."
15570098,2,0,0,java.math.BigDecimal,I would do something like this ... this should work for BigInteger and BigDecimal as well ... Haven't tested it though.
15570098,2,0,0,java.math.BigDecimal,EDIT: improved the solution to cater for cases when the input is a BigInteger/BigDecimal.
15572924,2,1,10,java.math.BigDecimal,"One exception is java.math.BigDecimal, whose natural ordering equates BigDecimal objects with equal values and different precisions (such as 4.0 and 4.00)."
15576547,2,0,2,java.math.BigDecimal,For a lot of uses BigDecimal is good enough.
15583218,2,1,1,java.math.BigDecimal,"Here is a test program that uses BigDecimal, as previously suggested, to display the values of the intermediate answers."
15580601,2,1,0,java.math.BigDecimal,"The obvious answer is a recap from comments: protected final char[] TOTAL_GBP = null;  dont set null as a constructor parameter for BigDecimal(TOTAL_GBP)  @payment.setSubtotal(new BigDecimal(TOTAL_GBP)); example: payment.setSubtotal(new BigDecimal(""8.25"")); taken from here http://androiddevelopement.blogspot.com/2011/04/adding-paypal-payment-in-android.html about paypal and android integration."
15590624,1,0,1,java.math.BigDecimal,Truncate the fractional part of a BigDecimal when its scale is zero in Java.
15590624,1,0,1,java.math.BigDecimal,I need to remove the fractional part of a BigDecimal value when its scale has a value of zero.
15591179,2,0,1,java.math.BigDecimal,"The following code does what you specify with the help of regex and the construction of BigDecimal, it is probably not the most efficient way to go about: code."
15591978,2,0,0,java.math.BigDecimal,Two BigDecimal objects that are equal in value but have a different scale (like 2.0 and 2.00) are considered equal by the compareTo() method.
15597831,2,0,6,java.math.BigDecimal,"In this particular case, you can get a better result with BigDecimal rather than double: code."
15597831,2,0,6,java.math.BigDecimal,"...but BigDecimal has its own issues (for instance, try 10 / 3)."
15605565,1,0,0,java.math.BigDecimal,"If I change the following line: payment.setSubtotal(new BigDecimal(TOTAL_GBP)); to any double float value such as: payment.setSubtotal(new BigDecimal(""30.00"")); Then it works perfectly fine but never TAKE THE subtotal value from Cart rather only takes the total amount as specified i.e. in this case £30.00 For added clarity, my Cart List Java Code Snippet is as follows: code."
15605622,2,1,2,java.math.BigDecimal,"I'm not sure where fillCartList() is defined, but a) it's not called before new BigDecimal(), and b) it uses a different definition of TOTAL_GBP."
15605622,2,1,2,java.math.BigDecimal,You need to get the correct value that you want for the BigDecimal into PaypalTask's TOTAL_GBP.
15609352,2,1,8,java.math.BigDecimal,"Given that you're dealing with shifting a decimal point, I'd probably use BigDecimal: code."
15615800,1,0,0,java.math.BigDecimal,JAVA: How to convert BigDecimal to hex?
15615800,1,0,0,java.math.BigDecimal,I have a number of type BigDecimal and I want to convert it to hexadecimal value.
15616261,2,0,1,java.math.BigDecimal,"Curiously, the code above is correct regarding the javadoc for Formatter, but there seems to be a related 9-year-old error in the javadocs, that has been fixed a few weeks ago in Java 8: 5035569 : (fmt) assertion error in Formatter for BigDecimal and %a."
15616127,2,1,3,java.math.BigDecimal,Judging by your example you should rather use BigInteger then BigDecimal.
15615900,2,0,0,java.math.BigDecimal,"Theoretically it is possible to represent BigDecimal as a hex string, simiolar to Double.toHexString code."
15625600,2,1,8,java.math.BigDecimal,"Use BigDecimal If you must use double, you can cut down on floating-point errors with the Kahan Summation Algorithm."
15625634,2,0,1,java.math.BigDecimal,Use BigDecimal for perfect decimal precision.
15643280,1,0,60,java.math.BigDecimal,Rounding BigDecimal to *always* have two decimal places.
15643280,1,0,60,java.math.BigDecimal,"I'm trying to round BigDecimal values up, to two decimal places."
15643280,1,0,60,java.math.BigDecimal,How do I do this with BigDecimal?
15659335,2,1,3,java.math.BigDecimal,"To keep the precision, immediately parse to BigDecimal."
15677518,1,0,2,java.math.BigDecimal,"Like BigDecimal, I don't see a method for BigInteger that can return the precision of a given number."
15677518,1,0,2,java.math.BigDecimal,"Basically, I'm first converting a BigInteger value to BigDecimal to obtain its precision like the following (It is just for a demonstration)."
15677621,2,1,6,java.math.BigDecimal,"BigInteger represents Integers of arbitrary size, as opposed to BigDecimal which represents exact decimal representations of floating point numbers and therefore have an associated precision."
15684826,1,0,0,java.math.BigDecimal,Problems with BigDecimal.ROUND_UP.
15684826,1,0,0,java.math.BigDecimal,Why is it acting like this in BigDecimal.ROUND_UP.
15684826,1,0,0,java.math.BigDecimal,I checked with the BigDecimal.ROUND_HALF_EVEN.
15684902,2,1,5,java.math.BigDecimal,This is explained in the BigDecimal JavaDoc:    The results of this constructor can be somewhat unpredictable.
15684902,2,1,5,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
15684902,2,1,5,java.math.BigDecimal,if you want to get the exact value for your BigDecimal.
15684938,2,0,1,java.math.BigDecimal,"The BigDecimal(double) constructor is not very reliable, check the API javadoc."
15684938,2,0,1,java.math.BigDecimal,The preferred way to construct a BigDecimal is to use the BigDecimal(String) constructor.
15684938,2,0,1,java.math.BigDecimal,"One   might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
15685705,1,0,7,java.math.BigDecimal,What BigDecimal is doing different between them?
15686107,2,1,5,java.math.BigDecimal,"So, new new BigDecimal(String.valueOf(131.7)) will create a BigDecimal with the exact value 131.7. new BigDecimal(131.7) will create a BigDecimal with the exact value 131.69999999999998863131622783839702606201171875."
15710634,2,1,4,java.math.BigDecimal,Use BigDecimal instead.
15710634,2,1,4,java.math.BigDecimal,2) I think BigDecimal already has a way of setting a precision.
15772885,2,1,2,java.math.BigDecimal,"Due to representation of floating numbers (float, double) basically you shouldn't compare them without using deltas, or please use BigDecimal instead and construct instances of those class from string representation of the number."
15781392,2,0,0,java.math.BigDecimal,"For converting to floating point , you can use Double.parseDouble or new BigDecimal."
15781315,2,0,0,java.math.BigDecimal,"Well, if you want a floating point number, use Double.parseDouble or new BigDecimal."
15782655,2,1,6,java.math.BigDecimal,"If no, and you need exact precision please use BigDecimal class instances."
15791585,1,0,2,java.math.BigDecimal,My problem is that when I save my BigDecimal in database (ex: 22.21) and then we I get it back the BigDecimal from the database the decimal is not there anymore (ex: 22).
15793446,1,0,1,java.math.BigDecimal,"Double to BigDecimal, comparing both."
18856218,2,0,0,java.math.BigDecimal,"If A is a Double and B is a BigDecimal, why not just temporarily promote A to BigDecimal for comparison?"
15799264,2,0,0,java.math.BigDecimal,You should prefer BigDecimal instead.
15805209,2,0,1,java.math.BigDecimal,Use BigDecimal.
15823806,2,1,2,java.math.BigDecimal,"If you want decimal places you have to use a decimal radix, i.e. BigDecimal or DecimalFormat."
15834879,1,0,5,java.math.BigDecimal,Format BigDecimal without scientific notation with full precission.
15834879,1,0,5,java.math.BigDecimal,I'd like to convert a BigDecimal to String for printing purposes but print out all digits without scientific notation.
15834978,2,1,9,java.math.BigDecimal,To preserve the precision for a BigDecimal you need to pass the value in as a String code.
15834982,2,0,6,java.math.BigDecimal,The BigDecimal class has a toPlainString method.
15835313,2,0,1,java.math.BigDecimal,"model.varCount is an array or objects, containing BigDecimal instances."
15835313,2,0,1,java.math.BigDecimal,The current element is an instance of BigDecimal.
15838655,2,0,1,java.math.BigDecimal,"BigDecimal represents the numbers exactly, as long as you don't construct them by passing in a floating point value, in which case the damage is already done before BigDecimal gets involved (all it can do at that point is exactly represent the floating point approximation of the original number)."
15838655,2,0,1,java.math.BigDecimal,I think using BigDecimal is the easy solution to your problem.
15847557,2,0,0,java.math.BigDecimal,"If so, maybe you should use BigDecimal."
15855321,1,0,2,java.math.BigDecimal,Performace of BigDecimal vs. BigInteger and BigDecimal.
15855321,1,0,2,java.math.BigDecimal,I was debating whether to use BigDecimal and BigInteger or only BigDecimal to make my life easier and less converting back and forth.
15855321,1,0,2,java.math.BigDecimal,Is there a downside to only using BigDecimal in regards to resources?
15855379,2,0,0,java.math.BigDecimal,"If you are developing a low-latency application and every microsecond matters, BigDecimal/BigInteger is not for you."
15855379,2,0,0,java.math.BigDecimal,Besides this fact BigDecimal/BigInteger has no visible impact.
15855379,2,0,0,java.math.BigDecimal,"BigDecimal does preform lower than long, double."
15855388,2,0,5,java.math.BigDecimal,"From: http://www.javamex.com/tutorials/math/BigDecimal_BigInteger_performance.shtml Note that a BigDecimal is essentially a wrapper around a BigInteger that ""remembers where the decimal point is""."
15855388,2,0,5,java.math.BigDecimal,"But to a computer implementation, it is essentially no more effort to manipulate non-integers than it is integers, and so on the whole, methods on BigDecimal tend to perform similarly to analogous methods on BigInteger."
15855969,2,0,0,java.math.BigDecimal,"I know the title of your question states ""Performace of BigDecimal vs. BigInteger and BigDecimal"" but one of your questions states ""How about using only primitive data types and BigInteger or only BigInteger to make ""."
15855969,2,0,0,java.math.BigDecimal,"Well here is what I recommend:  If you need accuracy, precision and you have large numbers to work with such as huge financial data then it may be best to use BigDecimal and BigInteger instead of primitive types."
15855969,2,0,0,java.math.BigDecimal,Few other characteristics of BigDecimal and BigInteger are also:  Both are from immutable objects.
15855969,2,0,0,java.math.BigDecimal,If you can present your information in BigDecimal  just use that so you don't have to convert it over to BigInteger  but again look at the program and see if it does make sense to only use BigDecimal all the time.
15855969,2,0,0,java.math.BigDecimal,The main difference between the BigInteger and BigInteger is that BigInteger supports arbitrary-precision integers and BigDecimal is for arbitrary-precision fixed-point numbers.
15858066,2,0,0,java.math.BigDecimal,"If you're worried much about performance with big numbers, I'd avoid Java's BigInteger and BigDecimal like the plague."
15864681,1,0,0,java.math.BigDecimal,BigDecimal Rounding.
15864681,1,0,0,java.math.BigDecimal,So BigDecimal can't seem to store numbers that continue infinitely like the answer to 1/3.
15864835,2,0,0,java.math.BigDecimal,"With BigDecimal, you will never get 1 with (1/3)*3 unless you round the final result again."
15864907,2,0,2,java.math.BigDecimal,Use BigDecimal instead.
15865012,1,0,5,java.math.BigDecimal,I have read that Double or BigDecimal should be used.
15865031,2,0,2,java.math.BigDecimal,"Use BigDecimal, it's a lot better than Double for financial stuff."
15865031,2,0,2,java.math.BigDecimal,See here the accepted answer for a similar question: Double vs. BigDecimal?
15865037,2,1,5,java.math.BigDecimal,BigDecimal is therefore a much better choice for this use case.
15865079,2,0,1,java.math.BigDecimal,"BigDecimal isn't only best choice, BigDecimal is designed for such case."
15881948,1,0,0,java.math.BigDecimal,"As the scenario goes, when I grab a data field from the database, it is in BigDecimal format."
15881948,1,0,0,java.math.BigDecimal,"I pass in the BigDecimal to the method, but it appears I have written some peice of this code wrong."
15884850,2,1,0,java.math.BigDecimal,"If you want arbitrary precision, you need to use BigDecimal."
15912164,2,0,1,java.math.BigDecimal,"By and large, currency values should be BigDecimal or BigInteger objects."
15912714,2,0,0,java.math.BigDecimal,Try comparing your results to an arbitrary precision library like BigDecimal to verify that you're not running into a lot of roundoff and truncation error.
15919691,2,0,2,java.math.BigDecimal,This is what BigDecimal is made for!
15919691,2,0,2,java.math.BigDecimal,And use BigDecimal for other calculations as well if you can.
15970988,2,0,4,java.math.BigDecimal,Then put your retrieved BigDecimal.toPlainString() into your table cell.
15936286,1,0,0,java.math.BigDecimal,Validating BigDecimal data type for nulls In Java.
15936286,1,0,0,java.math.BigDecimal,I am trying to validate for NULLs on a data type BigDecimal in java.
15940962,2,0,0,java.math.BigDecimal,"and Using BigDecimal to work with currencies To generate a random BigDecimal with constraints on range and # of significant digits, see How can I create a random BigDecimal in Java?"
15972639,2,0,0,java.math.BigDecimal,"BigDecimal sum = (Big Decimal) create.select( sum(PERSON.AGE).as(""PERSON_AGE_SUM"")) .from(PERSON); Just try this .."
15975987,2,0,0,java.math.BigDecimal,You should always use the BigDecimal type when dealing with currency to avoid double precision issues.
15975987,2,0,0,java.math.BigDecimal,Here is the code rewritten in BigDecimal code.
16031074,2,0,1,java.math.BigDecimal,I don't know what kind of accuracy you need but you could always base it off of BigDecimal instead.
16053900,2,0,0,java.math.BigDecimal,if it means anything to you you can try BigDecimal.
16068911,2,1,4,java.math.BigDecimal,Better to use BigDecimal.
16069212,2,0,2,java.math.BigDecimal,"Typically, you use a BigDecimal where your numbers are valued by the lowest currency unit for your country: code."
16069212,2,0,2,java.math.BigDecimal,"Internally, you store the BigDecimal for your currency values; only when you display to the user do you convert to a string using a format."
16081484,2,0,0,java.math.BigDecimal,"Judging by the message you are getting, the actual object is most likely a Float or Double or maybe BigDecimal instance."
16086019,2,0,1,java.math.BigDecimal,It is much safer to use a larger type  like long or double or BigInteger or BigDecimal in the first place and only use smaller types if you are really sure this is inappropriate.
16105903,1,0,1,java.math.BigDecimal,"I was reading here and here that is recommended to use BigDecimal in Java instead of Float or Double for money, but I can't get what data type should I use in my database or how to config Hibernate to use that datatype, thanks!"
16106053,2,1,2,java.math.BigDecimal,The recommended Java mapping for the DECIMAL and NUMERIC types is   java.math.BigDecimal.
16106053,2,1,2,java.math.BigDecimal,"The java.math.BigDecimal type provides math   operations to allow BigDecimal types to be added, subtracted,   multiplied, and divided with other BigDecimal types, with integer   types, and with floating point types."
16106058,2,0,1,java.math.BigDecimal,"I think I'd try defining your column as NUMBER(6,2) on the database and using a BigDecimal object in your java layer."
26718798,2,0,0,java.math.BigDecimal,"I was having some problems too for modify the value of a BigDecimal variable while debugging, but I discovered a little trick that maybe could help you: copy in the Java class you're debugging some code for modify the variable, for example myVar = myVar.add(new BigDecimal(1)) (in this example, myVar is a BigDecimal variable and I'm adding it 1) and evaluate that expression (Ctrl + Shift + i), it would assign the new value."
16112844,2,0,0,java.math.BigDecimal,"make sure the variable ""bd"" is not marked final go to the Variables tab, right click on ""bd"" ""Change Value..."" type new BigDecimal(21), ""OK"""
16112827,2,1,6,java.math.BigDecimal,The largest possible integer is  2147483647 which is a good deal less than the value you're trying to parse: 6327818260 You will need to use a long or a BigInteger/BigDecimal to hold that value.
16112827,2,1,6,java.math.BigDecimal,For BigInteger/BigDecimal Strings representing base 10 integers can be parsed by the constructors that take a string argument.
16113421,2,0,2,java.math.BigDecimal,You have to wrap the value you compare against in a BigDecimal too and compare them with the compareTo method: code.
16113460,2,0,2,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#compareTo(java.math.BigDecimal)
16113394,2,0,1,java.math.BigDecimal,http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#compareTo(java.math.BigDecimal) code.
16113399,2,1,2,java.math.BigDecimal,"To compare BigDecimals, use the compareTo method; BigDecimal is Comparable."
16113399,2,1,2,java.math.BigDecimal,"Incidentally, it doesn't look like you are doing BigDecimal division correctly: code."
16114504,2,0,1,java.math.BigDecimal,"If you are working with money, you should probably use BigDecimal instead of double."
16125017,1,0,2,java.math.BigDecimal,"new BigDecimal(""3324679375210329505"").toString(2); Seems to work best for me (from: Convert a large 2^63 decimal to binary) but I do need leading and trailing zeros."
16133520,1,0,4,java.math.BigDecimal,"While I can use something like BigDecimal to retain precision, I still have to convert it from a float and back to a float at the end and it always results in silly numbers that are making my UI look like a mess."
16145505,2,0,0,java.math.BigDecimal,You could use the BigDecimal & its multiply method.
16156854,1,0,4,java.math.BigDecimal,"With that Scanner, I would like to find the first BigDecimal, and after the second one, and so on."
16164568,2,0,0,java.math.BigDecimal,"In Java, BigDecimal seems the way to go, though at the expense of speed."
16165630,1,0,0,java.math.BigDecimal,BigDecimal with minimal 2 fraction digits.
16165630,1,0,0,java.math.BigDecimal,I saw Using BigDecimal to work with currencies but I have a little different problem.
16165630,1,0,0,java.math.BigDecimal,"I give object with BigDecimal parameters to PDF generation library and I can't use Formatter, only send objects."
16165630,1,0,0,java.math.BigDecimal,Is possible that default toString method always writes BigDecimal objects in format *.xx w.g 134.40 ?
16165761,2,1,1,java.math.BigDecimal,I assume the problem is that you have forgotten that BigDecimal is immutable and setScale doesn't alter the existing BigDecimal code.
16167461,1,0,1,java.math.BigDecimal,Is it a good idea to hold the numeric values in String variable in an object (also passing in methods and returning as String) and later while only operating it convert in BigDecimal and operate?
16167531,2,0,1,java.math.BigDecimal,"And yes, BigDecimal holds a number more compact, as byte arrays, and also optimises to hold small values in a long value."
16181915,2,0,1,java.math.BigDecimal,"If you want decimal places you have to use a decimal radix, i.e. a String created by DecimalFormat, or a BigDecimal."
16196893,1,0,1,java.math.BigDecimal,Convert CharSequence to BigDecimal.
16196893,1,0,1,java.math.BigDecimal,I did some search on this and all I found was that BigDecimal has a constructor that we can pass String to it and it will convert it for us.
16196893,1,0,1,java.math.BigDecimal,But in my case what I have is a java.lang.CharSequence and what I need it to be is BigDecimal What is the correct way to do this conversion?
16196961,2,0,1,java.math.BigDecimal,Call toString() on the CharSequence and build BigDecimal out of it.
16204775,1,0,1,java.math.BigDecimal,Round non-terminating (irrational) BigDecimal properly.
16204775,1,0,1,java.math.BigDecimal,I have an irrational BigDecimal that I want to round off however I want to round it after it starts repeating itself if that makes sense.
16216248,1,0,19,java.math.BigDecimal,Convert Java Number to BigDecimal : best way.
16216248,1,0,19,java.math.BigDecimal,I am looking for the best way to convert a Number to a BigDecimal.
16216326,2,1,10,java.math.BigDecimal,"This is fine, remember that using the constructor of BigDecimal to declare a value can be dangerous when it's not of type String."
16216668,2,0,9,java.math.BigDecimal,"An intuitive expectation may be that the two BigDecimal instances are identical, but the output shows that they are not: code."
16216668,2,0,9,java.math.BigDecimal,"This is actually not a loss of precision when creating the BigDecimal, the uncertainty is already there in your ""source"" value."
16216668,2,0,9,java.math.BigDecimal,a float or double value as source not necessarily will be represented by the exact equivalent in the BigDecimal instance.
16217025,1,0,1,java.math.BigDecimal,"It appears to add     values.add(new BigDecimal(PEUNIT).multiply(new BigDecimal(1000)).toString()); correctly when the logic drops into the else clause, but will not add the BD.ZERO or the PEFAMT to that field DESPITE the fact they are strings."
16217025,1,0,1,java.math.BigDecimal,"As a note, the ZERO and PEFAMT are BigDecimal's that are converted to a string."
16226573,2,0,0,java.math.BigDecimal,"You may need to use a BigDecimal if you want to introduce non-integer values, this is more complicated as you will need to synchronize manually."
16229278,1,0,1,java.math.BigDecimal,Java - BigDecimal and Reflection.
16229278,1,0,1,java.math.BigDecimal,when i check the parameter of the method which is in a class using java reflection for java.math.BigDecimal and java.lang.String isPrimitive() return false.
16229355,2,1,2,java.math.BigDecimal,There is no special flag differentiating a Java API class like BigDecimal from a user-defined class like CreateOrderRO.
16234170,1,0,1,java.math.BigDecimal,use BigDecimals  using them in complicated formulas is problematic for me  use String.format/Decimal.format to round doubles  do i need to round each variable in formula or just result to get BigDecimal precision?
16234170,1,0,1,java.math.BigDecimal,"Problem statement: I need precise financial calculations that would involve using very big (billions) and very small numbers (0.0000004321), and also dividing values that are very similar to each other, so for sure I need precision of BigDecimal."
16234262,2,1,0,java.math.BigDecimal,There is no way to get BigDecimal precision on a double.
16234262,2,1,0,java.math.BigDecimal,If you want to guarantee precise results use BigDecimal.
16234272,2,0,2,java.math.BigDecimal,No free cheese here - use BigDecimal.
16234350,2,0,0,java.math.BigDecimal,"The right way to solve this problem is to ouse BigDecimal, int, or long for monetary calculations."
16250535,2,1,3,java.math.BigDecimal,"Never the less if you want to use BigDecimal for your values, you can and you can write this to a DataStream."
16250535,2,1,3,java.math.BigDecimal,If you want a simple comparison of how inefficient BigDecimal compared with double  BigDecimal is approximately 100x slower to perform basic calculations and it does not support complex ones that double does.
16250535,2,1,3,java.math.BigDecimal,"double produces no garbage, BigDecimal produces a lot."
16250535,2,1,3,java.math.BigDecimal,"Writing one double to a stream 8 bytes, write one BigDecimal to an ObjectOutputStream 290 bytes."
16250535,2,1,3,java.math.BigDecimal,What BigDecimal does for you is give you precise and controlled rounding built in.
16289804,1,0,0,java.math.BigDecimal,lost precision when storing BigDecimal into H2 using Hibernate.
16289804,1,0,0,java.math.BigDecimal,"We are using H2 database for testing purposes, but when I store BigDecimal value into it using Hibernate and then load it back the value is truncated to two decimal places: The field definition looks like this code."
21617841,2,0,1,java.math.BigDecimal,"By the way, I can tell you that the creation of the BigDecimal value coming back from the database is done by the proprietary JDBC driver's implementation of the getBigDecimal method of the database-specific ResultSet sub-class."
21617841,2,0,1,java.math.BigDecimal,"It seems that some implementations of the getBigDecimal method will either use the precision/scale defined in the database schema, or will try to optimise the BigDecimal returned by only defining the minimum precision/scale required to hold the value retrieved."
16292511,1,0,0,java.math.BigDecimal,EDIT :  I have created a enum like the following : package com.hexgen.tools; import java.math.BigDecimal; import java.math.BigInteger; import org.joda.time.LocalDate; code.
16294315,1,0,3,java.math.BigDecimal,How to identify BigDecimal from Double in Java.
16294315,1,0,3,java.math.BigDecimal,I'm writing a financial application where i'm getting a value as string and need to check if the value is can be fit into double or BigDecimal without data loss.
16294315,1,0,3,java.math.BigDecimal,What will be the best way to identify if the string value should be converted to a double or a BigDecimal?
16294341,2,0,13,java.math.BigDecimal,"If it's a financial value, you should pretty much always use BigDecimal - or use an integer with an implicit scaling value (e.g."
16297112,2,0,1,java.math.BigDecimal,"I'd also consider using BigDecimal, which avoids nasty floating point precision problems that Double may cause you."
16303481,1,0,2,java.math.BigDecimal,My idea is converting each Number into BigDecimal with new BigDecimal(number.toString()) and then check equality with compareTo() == 0 instead of the basic equals that is used when comparing 2 Maps.
16325483,1,0,0,java.math.BigDecimal,Now I wrote a java/spring based junit test that spawns 20 threads and they calculate factorial of a large number using BigDecimal.
16339453,2,0,0,java.math.BigDecimal,"If the later, read about BigDecimal."
16350484,2,0,0,java.math.BigDecimal,"Use BigDecimal if you're using pow() and decimal values, and ESPECIALLY ON MONEY Assuming your interpretation is correct, code."
16349592,2,1,3,java.math.BigDecimal,"If you can accept a performance hit, then use BigDecimal, which is arbitrary precision."
16349659,2,0,1,java.math.BigDecimal,"I suggest rounding to a fixed number of digits for display, or perhaps using java.math.BigDecimal instead."
16351781,2,0,0,java.math.BigDecimal,Use BigDecimal instead.
16351781,2,0,0,java.math.BigDecimal,"And in my experience with databases, they return their NUMBER-typed elements as BigDecimal."
16351781,2,0,0,java.math.BigDecimal,"When I fetch them using JDBC, they are BigDecimal objects."
16351697,2,0,5,java.math.BigDecimal,"You can use a double for more resolution or, for exact arithmetic, use BigDecimal."
16355648,1,0,1,java.math.BigDecimal,How to pass a BigDecimal to a custom taglib (WebSphere).
16355648,1,0,1,java.math.BigDecimal,"I have a custom taglib which I try to give BigDecimal to, but the scale isn't kept."
16355648,1,0,1,java.math.BigDecimal,"It seems like the BigDecimal is converted to a double, then back to a BigDecimal."
16355690,1,0,0,java.math.BigDecimal,java.math.BigDecimal cannot be cast to [Ljava.lang.Object;.
16355690,1,0,0,java.math.BigDecimal,Error I am getting at line 3 : java.math.BigDecimal cannot be cast to [Ljava.lang.Object; My transform function :  code.
16355740,2,0,0,java.math.BigDecimal,The below line is returning you a java.math.BigDecimal which you are trying to cast illegaly to Object[].
16355740,2,0,0,java.math.BigDecimal,It seems yourqueryList is a List<java.math.BigDecimal>.
16358154,2,1,2,java.math.BigDecimal,"The JDBC specification does not include support for BigInteger; you either need to use a different datatype (eg BigDecimal with scale 0), or find out if the PostgreSQL driver offers some implementation specific way to set a BigInteger value."
16359436,2,0,0,java.math.BigDecimal,"Inside it can use whatever you want float, double or BigDecimal."
16359002,2,0,0,java.math.BigDecimal,It's actually recommended to use BigDecimal instead of float/double.
16371132,1,0,1,java.math.BigDecimal,I started out by learning about the BigDecimal class and how I can use that to calculate with high precision.
16371358,2,0,2,java.math.BigDecimal,You should be are that BigDecimal can be 100x slower and there is very little in the real world you can measure to 15 digits of accuracy.
16371162,2,0,5,java.math.BigDecimal,"BigDecimal xx = BigDecimal.valueOf(0.111111111111111111111111111111);  You are using double literals here, that have a limited precision and a prone to rounding errors."
16371162,2,0,5,java.math.BigDecimal,"BigDecimal xx = new BigDecimal(""0.111111111111111111111111111111"");  Of course, if the long number is not something hard-coded into the program, but the result of a floating point calculation, then you already have the rounding error, and will have to live with it."
16371162,2,0,5,java.math.BigDecimal,Converting to BigDecimal cannot fix that anymore.
16395817,2,0,0,java.math.BigDecimal,"If you're talking about integers or a few decimals, you're probably talking about money or quantities, for which BigDecimal is ideal;  and floating-point not really so good (due to rounding errors)."
16395817,2,0,0,java.math.BigDecimal,"new BigDecimal( str) will parse an integer or decimal for you, but it will also accept exponents;  eg 1.4E2 means 140."
16408287,2,1,2,java.math.BigDecimal,For financial calculations use neither but instead opt for integer calculations or use BigDecimal.
16416010,2,1,1,java.math.BigDecimal,You can convert it to a BigDecimal and then get the intValue() from it.
16425501,2,0,1,java.math.BigDecimal,"There's no auto-boxing, for instance, if I is AtomicInteger, BigDecimal, etc."
16441769,1,0,12,java.math.BigDecimal,Java's BigDecimal.power(BigDecimal exponent): Is there a Java library that does it?
16441769,1,0,12,java.math.BigDecimal,"Java's BigDecimal.pow(int) method only accepts an integer parameter, no BigDecimal parameter."
16441769,1,0,12,java.math.BigDecimal,"Is there a library, like Apache's commons-lang, that supports BigDecimal.pow(BigDecimal)?"
16517622,2,0,3,java.math.BigDecimal,a BigDecimal.
16442773,2,0,0,java.math.BigDecimal,"To represent 5.0E22 you should either use BigDecimal or else use a library that has a Rational data type, e.g."
16450176,2,0,0,java.math.BigDecimal,"You can't reasonably cast a BigDecimal to an AtomicLong (you could construct an AtomicLong from the value of a BigDecimal, but casting and constructing are different things and Generics are implemented as compile time sugar to make sure casts are successful)."
16464769,1,0,0,java.math.BigDecimal,Rounding a BigDecimal in Java doesn't return the expected number.
16464871,2,1,4,java.math.BigDecimal,BigDecimal is immutable - make sure you are using the value returned by the setScale() method.
16500097,2,0,1,java.math.BigDecimal,"In your case you have Long, String, Integer, and BigDecimal fields."
16507473,2,0,0,java.math.BigDecimal,"so, you have to change the byte buffer order to little endian in the first place 2) there is only one representation of decimal number in Java, it is BigDecimal, and cannot cast it to int."
16511259,2,1,1,java.math.BigDecimal,Use double which has double the precision of float or BigDecimal which has a precision that you define.
16511259,2,1,1,java.math.BigDecimal,Use BigDecimal for these.
16511771,2,0,1,java.math.BigDecimal,Assuming there is a good reason to use Strings instead of doubles a better choice might eb to use BigDecimal to do the calculation.
16519155,2,0,1,java.math.BigDecimal,You need the BigDecimal type.
16524086,2,0,1,java.math.BigDecimal,"At some point, you will probably actually encounter floating point rounding error, and will again be advised to use BigDecimal instead of double."
16523984,2,1,10,java.math.BigDecimal,"Of course, for monetary computation, you'd better be using:  BigDecimal cent based Integer / Long computation"
16532324,2,0,1,java.math.BigDecimal,"you can use BigDecimal, it will do exactly what you need,  you can create the number you need and set the precision with MathContext code."
16535259,2,1,2,java.math.BigDecimal,"Not only is this about 100x faster than using BigDecimal, the code is shorter to write."
16535259,2,1,2,java.math.BigDecimal,BTW The proper way to to convert a double to a BigDecimal is to use valueOf code.
16541702,1,0,2,java.math.BigDecimal,"As a bonus -- is this possible if the money is persisted as a Joda Money type, rather than as a BigDecimal?"
16543470,1,0,1,java.math.BigDecimal,"Bonus question: Using BigDecimal works, but seems to be very inefficient."
16543470,1,0,1,java.math.BigDecimal,Converting long to double and then multiplying and converting back seems to run 500 times faster (albeit losing precision) than converting to BigDecimal.
16544013,2,0,2,java.math.BigDecimal,You want to use BigDecimal in order to preserve precision.
16559644,2,1,1,java.math.BigDecimal,Using BigDecimal indeed works.
16577683,2,0,0,java.math.BigDecimal,Use BigDecimal instead.
16591890,2,1,0,java.math.BigDecimal,"On the other side of the fence, my ResultList was a list of BigDecimal data types."
16576103,2,0,3,java.math.BigDecimal,also you may want to use BigDecimal type instead of double to do currency calculation.
16583737,2,0,0,java.math.BigDecimal,Use the BigDecimal number class instead: e.g.
16583737,2,0,0,java.math.BigDecimal,"if n is a BigDecimal, then you can use code."
16583737,2,0,0,java.math.BigDecimal,"By the way, it's best practice to use BigDecimal when working with money."
16590402,2,0,1,java.math.BigDecimal,"If you want greater precision (at a price, obviously - memory and speed), you should use BigDecimal."
16590250,2,0,3,java.math.BigDecimal,"You can use new BigDecimal(myString), this is not the same but will keep the same representation."
16600501,2,1,1,java.math.BigDecimal,It's all explained in the BigDecimal API.
16600893,2,0,0,java.math.BigDecimal,BigDecimal.valueOf(Double.valueOf(TempS[3])) is much too complex.
16600893,2,0,0,java.math.BigDecimal,"In fact, BigDecimal has a constructor that takes a String, and that's the preferred one to use."
16600893,2,0,0,java.math.BigDecimal,"So, new BigDecimal(TempS[3]) is better."
16601689,2,0,0,java.math.BigDecimal,"This is very useful: http://floating-point-gui.de/languages/java/ For a short answer, try to use BigDecimal whenever you are dealing with floating points."
16614303,2,0,0,java.math.BigDecimal,Are you sure you want to do this with BigInteger rather than BigDecimal?
16661939,1,0,1,java.math.BigDecimal,Java BigDecimal : How to fortmat BigDecimal.
16661939,1,0,1,java.math.BigDecimal,I'm using BigDecimal for counting some big real number.
16661939,1,0,1,java.math.BigDecimal,"Although I have try two method : BigDecimal.toString() or BigDecimal.stripTrailingZeros().toString(), it still not sasitfy my requirement."
16677716,2,0,3,java.math.BigDecimal,use primitive and smaller datatypes like double instead of BigDecimal.
16687442,2,0,0,java.math.BigDecimal,You might want to store the subtotals and total as a BigDecimal depending on how large you expect the values to be.
16700946,2,0,5,java.math.BigDecimal,"Never use double for money, user BigDecimal!"
16705429,2,0,1,java.math.BigDecimal,"The easiest way to know what an exception is is to check the API, First, let's open the BigDecimal API code."
16705429,2,0,1,java.math.BigDecimal,"The exception was of type NumberFormatException, and it was thrown in BigDecimal Let's see what the API has to say about this:  Throws:   NumberFormatException - if in is not a valid representation of a BigDecimal."
16705429,2,0,1,java.math.BigDecimal,"So, this exception means you're creating a BigDecimal with an invalid value."
16705429,2,0,1,java.math.BigDecimal,Check the code that constructs the BigDecimal.
16705429,2,0,1,java.math.BigDecimal,"There are also a bunch of other constructors on BigDecimal, you'll find the reason depending on the overload you're using there."
16705439,2,0,0,java.math.BigDecimal,The docs state that a NumberFormatException will be thrown if the input String is not a valid representation of a BigDecimal... so checking the code that creates the BigDecimal is a good place to start.
16705497,2,0,0,java.math.BigDecimal,If  you  receive a value that use it convert to BigDecimal.
16705497,2,0,0,java.math.BigDecimal,"for example: String receiveValue = request.getParameter(""xxx""); BigDecimal  bigDecimal = new BigDecimal(receiveValue); But problem is receiveValue is null or blank value, so that it post this problem."
16707408,2,0,0,java.math.BigDecimal,But try using BigDecimal http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html Note: double and float are internally represented as binary fractions according to the IEEE standard 754 and can therefore not represent decimal fractions exactly
16707522,2,0,1,java.math.BigDecimal,"Use the String constructor of BigDecimal instead, like: code."
16715521,2,1,11,java.math.BigDecimal,Use BigDecimal instead.
16715625,2,0,2,java.math.BigDecimal,"Either use BigDecimal, or keep track of two integers yourself (e.g."
16784628,2,0,0,java.math.BigDecimal,I think the problem is Decimalbox#getValue() returns a BigDecimal The solution should be code.
16730949,2,0,1,java.math.BigDecimal,"you need to take that number as BigDecimal for Ex:-  BigDecimal bd = new BigDecimal(35.6923507390297833); bd.setScale(0,6); setscale allows you to fix point decimal number."
16848935,2,0,0,java.math.BigDecimal,"For exact numbers, use the BigDecimal class, which will input, output and perform arithmetic without loss of precision."
16849216,2,0,0,java.math.BigDecimal,"The variable n can only ever be a BigDecimal, but you can't call specific BigDecimal methods on it."
16849086,2,0,0,java.math.BigDecimal,Aside: In reality you would never use double to represent a monetary amount - BigDecimal would be used instead.
16864395,1,0,0,java.math.BigDecimal,"Example: Edit-2 begin I just tried to send GPS cordinates by emulator and 111.422006 auto converted to 111.422004999999998 in Double dlongi = loc.getLongitude(); String longi = dlati.toString(); System.out.println(longi); Edit-2 end Edit-3 begin I sent the coordinates by emulator (by GPS device in reality) as 111.422006, the android API received it as double value of 111.42004999999998  Edit-3 end Too late for: BigDecimal class is too late for that as it already gives a d/Double."
24420290,2,0,7,java.math.BigDecimal,Couple of examples Let's assume that findEntity() returns an Optional and Entity.getDecimalField(..) may return BigDecimal or null: code.
16897571,2,0,0,java.math.BigDecimal,"Instead you could use new BigDecimal(""80.14666666"") and increment that by new BigDecimal(""0.00000001"")."
16897571,2,0,0,java.math.BigDecimal,If you pass a double the BigDecimal will be initialised according to the value of the double which as mentioned does not contain the exact value that you imagine it does.
16897535,2,0,2,java.math.BigDecimal,"If your specific need is just rounding, then use the round function instead of truncate; otherwise consider using a BigDecimal, which truly represents a number with decimal digits."
16904012,2,1,1,java.math.BigDecimal,It's implemented like BigDecimal for example.
16917027,2,0,2,java.math.BigDecimal,Also BigDecimal and BigInteger and few more.
16938614,2,0,0,java.math.BigDecimal,"The original example uses a Number type because you can then pass any type that is a subclass of Number, like Integer, BigDecimal and so on."
16938672,2,0,0,java.math.BigDecimal,"However, the first sample will work with Integers, Floats, BigDecimal and all other Number subclasses."
16939275,2,0,1,java.math.BigDecimal,For converting you can use BigDecimal.valueOf(arg0) and pass this value as argument to 'CompareTo' method
16940034,1,0,0,java.math.BigDecimal,I have a complex object that contains two BigDecimal field code.
16959370,2,1,3,java.math.BigDecimal,"In fact, with one particular JDK class, that is, BigDecimal, this can get quite surprising: code."
16961335,2,0,4,java.math.BigDecimal,"You want to do this with a float or double value, and quite likely you should be using BigDecimal to maintain precision."
16970369,2,1,14,java.math.BigDecimal,"For the illustration, here is what happens with BigDecimal (posted a few hours ago here): code."
16970369,2,1,14,java.math.BigDecimal,"To quote the javadoc for Comparable, it means that BigDecimal's .compareTo() is ""not consistent with .equals()""."
16973711,2,0,5,java.math.BigDecimal,You could use BigDecimal.
16984520,2,0,13,java.math.BigDecimal,Using BigDecimal because converting from String to double can lose precision!
17047299,2,0,3,java.math.BigDecimal,"This is what the BigInteger class (or BigDecimal, for non-integers) is for."
17047345,1,0,10,java.math.BigDecimal,"Its attributes are basic types (Integer, BigDecimal, String, etc.)"
17052484,1,0,0,java.math.BigDecimal,I have a @Pattern which only accepts positive BigDecimal (it represents dollar amount).
17052484,1,0,0,java.math.BigDecimal,I think the problem is before checking the pattern it binds the string value to BigDecimal which makes it fail.
17052794,2,0,0,java.math.BigDecimal,I think the problem is before checking the pattern it binds the string value to BigDecimal which makes it fail.
17052658,2,0,0,java.math.BigDecimal,"Numbers (int, double, BigDecimal etc) are parsed automatically and do not need special validation."
17052658,2,0,0,java.math.BigDecimal,BTW are you sure you indeed need BigDecimal to operate with money?
17057248,2,0,1,java.math.BigDecimal,"(Link, link, link) As you can see in the links there, you want to be using some combination of integers with an implied decimal point, or BigDecimal, or NUMERIC fields in the database."
17077159,2,0,0,java.math.BigDecimal,Use BigDecimal (instead of double) to work with money.
17077159,2,0,0,java.math.BigDecimal,http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html I would write a function to get the user input.
17087125,2,0,1,java.math.BigDecimal,"You can use the BigDecimal class , toPlainString() method :  Returns a string representation of this BigDecimal without an exponent field."
17093603,1,0,2,java.math.BigDecimal,static final BigDecimal in Java class.
17093603,1,0,2,java.math.BigDecimal,"They are returning BigDecimal, so I created class variable BigDecimal to store that percentage, then multiply them together on the return."
17093603,1,0,2,java.math.BigDecimal,"Also, I tried to research if BigDecimal is thread safe, and I couldn't find a for sure answer."
17093688,2,1,5,java.math.BigDecimal,BigDecimal is immutable and thus thread-safe.
17119876,1,0,1,java.math.BigDecimal,Should I use BigDecimal to perform the operations?
17120806,1,0,2,java.math.BigDecimal,"I'd rather not use the BigDecimal classes or equivalent, as the code is already slow enough ;) (unless they don't impact speed too much, of course)."
17120942,2,0,2,java.math.BigDecimal,"If it is important to get the correct answer, you should use BigDecimal."
17124141,2,0,0,java.math.BigDecimal,For arbitrary precision have a look at BigDecimal For example: code.
17123939,2,0,1,java.math.BigDecimal,Take a look at the BigDecimal class!
17123939,2,0,1,java.math.BigDecimal,http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html
17123942,2,0,1,java.math.BigDecimal,You may use BigDecimal for that.
17124034,2,0,3,java.math.BigDecimal,"While the JDK has BigDecimal, unfortunately you have no .sqrt() on it."
17142300,2,0,4,java.math.BigDecimal,You should use BigDecimal class for pecision.
17142300,2,0,4,java.math.BigDecimal,Use BigDecimal.valueOf(value) to convert the double to BigDecimal.
17142300,2,0,4,java.math.BigDecimal,"Translates a double into a BigDecimal, using the double's canonical string representation provided by the Double.toString(double) method."
17142307,2,0,3,java.math.BigDecimal,To get exact numbers use BigDecimal in Java.
17142345,2,1,7,java.math.BigDecimal,If you're interested in decimal digits then you should use BigDecimal.
17142345,2,1,7,java.math.BigDecimal,"BigDecimal is different from double in three important ways:  It supports arbitrary precision (as many digits as you have memory for, basically) It has a floating decimal point instead of a floating binary point."
17142345,2,1,7,java.math.BigDecimal,"When constructing a BigDecimal, it's important that you start with accurate values - converting a double to BigDecimal is almost always a mistake."
17142345,2,1,7,java.math.BigDecimal,"In other cases you may start with another BigDecimal, or possibly an integer."
17169961,2,0,0,java.math.BigDecimal,You could use a BigDecimal.
17174478,2,1,2,java.math.BigDecimal,The assignment of the BigDecimal will throw a NumberFormatException if the string is empty.
17183750,2,0,0,java.math.BigDecimal,Use a BigDecimal.
17190957,1,0,0,java.math.BigDecimal,"Should I put every number used in hte equation as a BigDecimal (even the one with simple values(12, 0.1,...) or only 0.0000000000012 should be a BigNumber and I can be sure I wont lose precision?"
17191987,2,0,0,java.math.BigDecimal,You don't have to use BigDecimal unless you have more than 15 significant digits of precision.
17191987,2,0,0,java.math.BigDecimal,You do have to use appropriate rounding which is something BigDecimal helps you with but it doesn't mean you can't do the same with double.
17191987,2,0,0,java.math.BigDecimal,In terms of performance double out performs BigDecimal by a factor of 100x.
17191987,2,0,0,java.math.BigDecimal,BigDecimal also creates lots of garbage whereas double doesn't produce any.
17191085,2,0,3,java.math.BigDecimal,Use the class BigDecimal.
17191085,2,0,3,java.math.BigDecimal,"To create a BigDecimal from a literal which is too precise to be represented by a double, use the string constructor: code."
17191085,2,0,3,java.math.BigDecimal,Therefor the BigDecimal class has various methods to perform basic arithmetics while retaining precision: code.
17191085,2,0,3,java.math.BigDecimal,"When your code is performance-critical, I recommend the question ""What to do with Java BigDecimal performance?"""
17191126,2,0,2,java.math.BigDecimal,here is the code how you can use and test BigDecimal Number run this code.
17209539,1,0,1,java.math.BigDecimal,Why is BigDecimal more precise than double?
17209539,1,0,1,java.math.BigDecimal,I would like to know the exact difference between BigDecimal and double.
17209539,1,0,1,java.math.BigDecimal,I know that BigDecimal is more precise than double and you should use the former for calculations.
17209539,1,0,1,java.math.BigDecimal,Why isn't it possible to customize double so that it works like BigDecimal?
17209683,2,0,0,java.math.BigDecimal,Calculating with double is much faster than with BigDecimal as it's a primative type you also have the full range of mathematical operations at your fingertips.
17209683,2,0,0,java.math.BigDecimal,BigDecimal is great if you need to perform very precise calculations but you pay a price for that such as not having easy access to a square root function that actually works on a BigDecimal and generally much slower calculations.
17209731,2,0,1,java.math.BigDecimal,BigDecimal precision is de facto unlimited since it is based on an int array of arbitrary length.
17209731,2,0,1,java.math.BigDecimal,"Though operations with double are much faster than with BigDecimal this data type should never be used for precise values, such as currency."
24984976,2,0,1,java.math.BigDecimal,Why is BigDecimal more precise?
24984976,2,0,1,java.math.BigDecimal,BigDecimal can grow to any size you need it to.
24984976,2,0,1,java.math.BigDecimal,"BigDecimal operates in decimal, so it can precisely represent numbers such as 0.1 that we are familiar with in decimal."
24984976,2,0,1,java.math.BigDecimal,"With BigDecimal, the object can grow arbitrarily large in memory, because repeated computation can produce ever-longer fractions, but this isn't something you need to worry about with double since its size is fixed."
24984976,2,0,1,java.math.BigDecimal,Why isn't it possible to customize double so that it works like BigDecimal?
24984976,2,0,1,java.math.BigDecimal,"BigDecimal can be more powerful, but its sophistication makes computation slower, it takes more memory, and it is more complicated to use."
24984494,2,0,0,java.math.BigDecimal,BigDecimal is standard and uses base 10.
24984494,2,0,0,java.math.BigDecimal,"However there now are GNU MPFR Java bindings (I haven't tried), so that you can do your computations with the GNU MPFR library, which uses base 2 and should be significantly faster than BigDecimal."
24983745,2,0,1,java.math.BigDecimal,"When operations are performed on BigDecimal, the number of digits in the result will frequently be larger than either operand."
24983745,2,0,1,java.math.BigDecimal,"This has two major effects:  Unless code forces periodic rounding, operations on BigDecimal will get slower and slower as the numbers get longer and longer."
24983745,2,0,1,java.math.BigDecimal,"No fixed-size container can possibly be big enough to accommodate a BigDecimal, since many operations between two values which filled up their respective containers would yield a result too long to fit into a container of that size."
24983745,2,0,1,java.math.BigDecimal,"The fundamental reason that float and double can be fast, while BigDecimal cannot, is that they are defined as lopping off as much precision as is necessary in any calculation so as to yield a result which will fit in the same size of container as the original operands."
24983745,2,0,1,java.math.BigDecimal,"Incidentally, another major (though less fundamental) reason that BigDecimal is slow is that values are represented using a binary-formatted mantissa but a decimal exponent."
17209597,2,0,4,java.math.BigDecimal,"BigDecimal  Immutable, arbitrary-precision signed decimal numbers."
17209597,2,0,4,java.math.BigDecimal,A BigDecimal consists of an arbitrary precision integer unscaled value and a 32-bit integer scale.
17209597,2,0,4,java.math.BigDecimal,The value of the number represented by the BigDecimal is therefore (unscaledValue × 10-scale).
17209597,2,0,4,java.math.BigDecimal,"EDITED: BigDecimal is a real object, not a primitive one."
17213156,2,1,1,java.math.BigDecimal,"it gives error like error converting value to BigDecimal   The data types still need to match (or be convertable) to the actual column type, of course."
17217424,1,0,0,java.math.BigDecimal,Output : 11 What is its datatype in jasper report am getting as BigDecimal.
17238281,2,1,4,java.math.BigDecimal,"If you actually need the exact value (rather than the 10 significant digits stated in the question), you should use BigInteger if they're all integers, or BigDecimal if some values will actually be non-integers."
17240114,2,0,1,java.math.BigDecimal,"If you are dealing with huge numbers , you can use the BigInteger class for integers and BigDecimal for numbers with decimal digits."
17253631,1,0,2,java.math.BigDecimal,BigDecimal += (add and assign) ...How to do this?
17253631,1,0,2,java.math.BigDecimal,I can't seem to locate an 'add and assign' method in the BigDecimal class.
17253640,2,1,8,java.math.BigDecimal,There is an add method in the BigDecimal class.
17253661,2,0,1,java.math.BigDecimal,"BigDecimal is immutable object, so no, you cannot do that."
17253666,2,0,1,java.math.BigDecimal,You can use the BigDecimal#add() method .
17253666,2,0,1,java.math.BigDecimal,"Since BigDecimal is immutable , you cannot expect a.add(b) to mutate a ."
17253666,2,0,1,java.math.BigDecimal,You have to return the new BigDecimal object to the reference a .
17256378,1,0,1,java.math.BigDecimal,I've tried using BigDecimal and still can not get the value I need.
17256507,2,0,0,java.math.BigDecimal,"Even if you don't technically need BigDecimal for this, since you won't have a decimal fraction, it will still compute correctly, as with:  import java.math.BigDecimal; public class Test { code."
17277801,2,1,4,java.math.BigDecimal,"Additionally, if exact decimal digits matter to you, you might want to consider using BigDecimal instead of double."
17277801,2,1,4,java.math.BigDecimal,You should understand the difference between a floating binary point type (such as double) and a floating decimal point type (such as BigDecimal) and choose appropriately between them.
17287143,1,0,1,java.math.BigDecimal,"EDIT: podaci.java code is here, I tried to change double to BigDecimal, didn't work code. }"
17287477,1,0,2,java.math.BigDecimal,Java: divide two BigInteger Objects into a BigDecimal object.
17287477,1,0,2,java.math.BigDecimal,"What is the easiest way, using the least amount of unnecessary overhead to divide two BigInteger objects and store it in a BigDecimal Object?"
17287518,2,0,0,java.math.BigDecimal,Convert both BigInteger to BigDecimal and then divide them.
17287518,2,0,0,java.math.BigDecimal,see:  http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#BigDecimal(java.math.BigInteger) http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#divide(java.math.BigDecimal)
17290435,2,0,0,java.math.BigDecimal,"There is no relation between your decimal format and Static methods  And to control the precision of floating point arithmetic, you should use java.math.BigDecimal."
17292476,1,0,1,java.math.BigDecimal,Formatting of BigDecimal in Spring 3.
17292476,1,0,1,java.math.BigDecimal,I have a bean with BigDecimal field defined as code.
17300359,2,0,0,java.math.BigDecimal,"Another point you might need, use BigDecimal instead of double while calculation."
17304116,1,0,1,java.math.BigDecimal,ServiceData Class: import java.io.Serializable; import java.math.BigDecimal; code.
17309368,2,0,1,java.math.BigDecimal,"java.math.BigInteger, java.math.BigDecimal."
17321667,1,0,1,java.math.BigDecimal,I'm trying to round using BigDecimal.ROUND_HALF_UP but am not getting expected results.
17321854,2,0,3,java.math.BigDecimal,Use BigDecimal#stripTrailingZeros(): code.
17337283,2,0,6,java.math.BigDecimal,Since this are instance of BigDecimal they are immutable.
17346119,2,1,2,java.math.BigDecimal,"If you truly have values exceeding the range of long in your database, then you may need to use setBigDecimal(), as there is no setBigInteger(), and your variable would have to be of type BigDecimal."
17392927,2,1,4,java.math.BigDecimal,Use a BigDecimal instead.
17465098,2,1,2,java.math.BigDecimal,"And by the way, when you want to use decimals, forget the existence of double and float as others suggested and just use BigDecimal object, it will save you a lot of headache."
17464803,2,0,1,java.math.BigDecimal,Use BigDecimal: code.
17487298,2,0,1,java.math.BigDecimal,As explained here you should probably use BigDecimal if precision should be accurate.
18676934,2,0,0,java.math.BigDecimal,"To see the exact value of the float, you can use a BigDecimal: code."
17510005,2,0,9,java.math.BigDecimal,"You might also want to consider using BigDecimal instead of double here - for this specific case it may not matter, but if you're really interested in maintaining the exact decimal digits, BigDecimal is more appropriate."
17513756,2,0,1,java.math.BigDecimal,Note the BigDecimal here to better handle sums of currency.
17519228,1,0,1,java.math.BigDecimal,"In addition, the BigDecimal value is not displayed like the original format."
17535720,2,0,1,java.math.BigDecimal,"When we map a number to Java that could be one of several varieties: byte, short, int, long, BigInteger, float, double, BigDecimal."
17535720,2,0,1,java.math.BigDecimal,Some entries are string where another is BigDecimal.
17535720,2,0,1,java.math.BigDecimal,So you'll have to have a special ObjectFactory that knows to instantiate a LinkedHashMap and copy over all the keys from the source to the target converting them to BigDecimal if the value of the source is JsonNumber.
17521964,2,0,0,java.math.BigDecimal,BigDecimal is the standard type for monetary values.
30489832,2,0,0,java.math.BigDecimal,"You can format by using  BigDecimal double value= 255.956666; BigDecimal bd = new BigDecimal(value).setScale(2, RoundingMode.HALF_UP);    System.out.println(""value=""+bd);"
17540885,1,0,1,java.math.BigDecimal,"I have tried by converting to float to BigDecimal and then printing the values, but it doesn't help."
17540931,2,0,0,java.math.BigDecimal,"Use BigDecimal, floating types don't store all your number the way you think"
17542378,1,0,3,java.math.BigDecimal,"I want to calculate with the java class BigDecimal, but I get always an exception by periodic numbers."
17542378,1,0,3,java.math.BigDecimal,System.out.println(new BigDecimal(1).divide(new BigDecimal(4))); --> 0.25
17542432,2,1,2,java.math.BigDecimal,"BigDecimal is complaining that it could use infinity decimal places, and it still wouldn't be able to give you an exact representation of the number."
17542432,2,1,2,java.math.BigDecimal,"To circumvent this , you can use divide(BigDecimal divisor,                 int scale,                 int roundingMode)"
17542489,2,0,1,java.math.BigDecimal,BigDecimal cannot support numbers that cannot be written as a fixed length decimal.
17548472,2,0,1,java.math.BigDecimal,I've used BigDecimal for the conversion ratio and internal calculations in order to have greater control over precision and rounding behavior.
17555037,2,0,2,java.math.BigDecimal,"If you need absolute precision, you should use something java's BigDecimal type."
17555039,2,0,6,java.math.BigDecimal,"To ensure accurate representation of a floating point number, you can use Java's built-in BigDecimal class."
17555062,2,0,4,java.math.BigDecimal,"If you don't want to round them, use BigDecimal class."
17555062,2,0,4,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
17557553,2,0,1,java.math.BigDecimal,"If you want more precision, you can use Java's BigDecimal."
17557576,2,0,1,java.math.BigDecimal,Use Java BigDecimal instead of Double that has a limited precision.
17560921,2,1,2,java.math.BigDecimal,"I've been using the BigDecimal type instead of the double, but I have hit a bit of a roadblock—the square root."
17557633,2,0,1,java.math.BigDecimal,"The BigDecimal class can give you ""arbitrary-precision signed decimal numbers"", which is what you want in this case, although the instances of BigDecimal are a little more tricky to work with than literals, the class actually works quickly and can be used to do what you need fairly accurately."
17571980,2,0,2,java.math.BigDecimal,"If you want exact result, please use BigDecimal."
17576348,2,0,2,java.math.BigDecimal,"If you want different presicion you should use bigDecimal and set the precision BigDecimal db = new BigDecimal(d).setScale(12, BigDecimal.ROUND_HALF_UP);"
17577509,2,0,3,java.math.BigDecimal,"Instead of this bd = bd.setScale(decimalPlace, BigDecimal.ROUND_HALF_UP); Use  bd = bd.setScale(decimalPlace, BigDecimal.ROUND_CEILING); About ROUND_CEILING  Rounding mode to round towards positive infinity."
17577509,2,0,3,java.math.BigDecimal,"If the BigDecimal is   positive, behaves as for ROUND_UP; if negative, behaves as for   ROUND_DOWN."
17577523,2,1,9,java.math.BigDecimal,"Since you are using BigDecimal.ROUND_HALF_UP, 29.294998 is rounded to 29.29."
17577523,2,1,9,java.math.BigDecimal,You might want to use BigDecimal.ROUND_UP instead.
17577523,2,1,9,java.math.BigDecimal,Check BigDecimal doc for more informations on each rounding available.
17577524,2,0,3,java.math.BigDecimal,"Since you always want to round up, what you want is simply not BigDecimal.ROUND_HALF_UP but instead BigDecimal.ROUND_UP or BigDecimal.ROUND_CEILING."
17577524,2,0,3,java.math.BigDecimal,Use BigDecimal.ROUND_UP if you want negative numbers to round down (-29.294998 to -29.30).
17577524,2,0,3,java.math.BigDecimal,Use BigDecimal.ROUND_CEILING if you want negative numbers to round up (-29.294998 to -29.29).
17610651,2,0,0,java.math.BigDecimal,"I recommend converting you number as in Convert input of BigDecimal locale dependent?""."
17610658,2,0,1,java.math.BigDecimal,It can be fixed by using BigDecimal See How to resolve a Java Rounding Double issue
17610844,1,0,0,java.math.BigDecimal,Rounding the scientific notation of BigDecimal.
17610844,1,0,0,java.math.BigDecimal,"I would like to print a BigDecimal in scientific notation so that the there are, say, 5 digits after the decimal point."
17610844,1,0,0,java.math.BigDecimal,"Moreover, BigDecimal doesn't seem to have a getExponent() method."
17616536,2,0,0,java.math.BigDecimal,Try using a BigDecimal for large decimal numbers.
17618888,2,0,6,java.math.BigDecimal,"For extended precision, you should use BigDecimal."
17629327,1,0,1,java.math.BigDecimal,"I was playing with BigDecimal in Java and figured out that you can use its .divide() function to make exact divisions, but this function throws an ArithmeticException if the division is not exact."
17651131,1,0,0,java.math.BigDecimal,how to display BigDecimal properly as a string.
17651131,1,0,0,java.math.BigDecimal,"I am trying to learn java to get into android programming For my practice I am trying to write a calculator program with basic arithmetic operations and a decimal point button I tried to do it using primitive numerical types such as int and double, but if I use double as a variable type, a number such as 2.111 gets displayed as 2.11099999, but other than that it seemed to work fine (my question about this is given here) As suggested in the answer to my other question I modified my program to use BigDecimal data type instead of double, but now when I click on the 1 button, the mantissa get's displayed as 1.0, instead of just 1 as in the previous programs where I had used double How can I fix this?"
17652228,2,0,1,java.math.BigDecimal,"You are doing: tempBD = mantissa_value.multiply(BigDecimal.valueOf(10.0)); This is wrong as the nearest value to 10.0 is stored, but you want exactly 10.0, then you should do: tempBD = mantissa_value.multiply(BigDecimal.valueOf(""10.0"")); So modified code for void onClkBn1(View view) is the following: code."
17652228,2,0,1,java.math.BigDecimal,"And I am not sure how you are using tempBD = BigDecimal.valueOf(pow(10, -numOfClicksAfterDecimal)*1); shouldn't it be Math.pow(double, double)."
17652364,2,1,1,java.math.BigDecimal,People in the original question advised in favour of BigDecimal but I have the feeling that your original concern has to do with the latter - i.e. printing the value - and this is what you are still facing.
17652364,2,1,1,java.math.BigDecimal,The same approach can be followed for the BigDecimal case.
17656948,2,1,9,java.math.BigDecimal,If you need to handle very large numbers you can also use BigDecimal.
17658525,2,0,0,java.math.BigDecimal,Maybe the class BigDecimal is interesting for you.
17661452,2,0,2,java.math.BigDecimal,The code above is invalid due to the comma separated numbers in the constructor of BigDecimal.
17661452,2,0,2,java.math.BigDecimal,2 individual instances of BigDecimal are required.
17661452,2,0,2,java.math.BigDecimal,"Precision can be lost by converting BigDecimal values to the int, float and double types used by Math.max and Math.min."
17661452,2,0,2,java.math.BigDecimal,Another reason to use BigDecimal that the numbers can overflow.
17661452,2,0,2,java.math.BigDecimal,Familiarize yourself with the javadoc for BigDecimal
17661882,2,0,0,java.math.BigDecimal,Look at the javadoc of BigDecimal.
17661882,2,0,0,java.math.BigDecimal,BigDecimal is - like String - an immutable class.
17667673,2,0,6,java.math.BigDecimal,"If you need exact precision BigDecimal is better, but slower."
17667772,2,0,0,java.math.BigDecimal,Using BigDecimal and doing it correctly: code.
17674847,1,0,0,java.math.BigDecimal,"I used to use a BigDecimal for the ID because it was the default, and noticed I was getting a precision difference when it worked, and when it didn't work."
17674847,1,0,0,java.math.BigDecimal,"I couldn't work out why this was, so I changed the BigDecimal to a Long, as I never really needed it to be a BigDecimal anyway."
17687245,2,1,4,java.math.BigDecimal,"To get the exact value stored in a double, you can do new BigDecimal(double).toString()."
17687245,2,1,4,java.math.BigDecimal,"For example, new BigDecimal(0.1).toString() returns ""0.1000000000000000055511151231257827021181583404541015625"", which is the best approximation of 0.1 that is representable in a double."
17687245,2,1,4,java.math.BigDecimal,"If you want to store the exact value 0.1 or exact decimal values, you basically have to convert a String to a BigDecimal, as in new BigDecimal(""0.1"")."
17689802,2,0,0,java.math.BigDecimal,"You should be using BigDecimal to compare decimal values, not Strings at all."
17689802,2,0,0,java.math.BigDecimal,"Get rid of the regular expression, use new BigDecimal(String), set the scale you want, and then use compareTo()."
17698126,1,0,3,java.math.BigDecimal,BigDecimal bit manipulation in java.
17698126,1,0,3,java.math.BigDecimal,Does BigDecimal support bit manipulation?
17698126,1,0,3,java.math.BigDecimal,"If no, what is the best method to divide a BigDecimal variable by powers of 2?"
17698202,2,1,5,java.math.BigDecimal,"As the name suggests, a BigDecimal is stored in decimal representation."
17698203,2,0,6,java.math.BigDecimal,"BigDecimal uses a decimal representation for floating point values, so it is not suited for bit manipulation."
17756599,2,0,1,java.math.BigDecimal,"For a particle physics simulator I'd strongly consider using BigDecimal to avoid floating-point rounding errors using doubles and floats (which Vector3f and Vector3d use, respectively) messing up your calculations."
17756599,2,0,1,java.math.BigDecimal,"Of course, if the simulation needs to be real-time then you'll have to think of the time and space complexity implications of using BigDecimal vs double vs float but if it's to be run offline, BigDecimal's exact representation of fractional numbers is a big win for this type of application."
17758046,2,0,5,java.math.BigDecimal,"If you want precision, you can use BigDecimal class:"
17758874,2,0,1,java.math.BigDecimal,"Sample program (with generics this time) illustrating the difference between a SortedSet and a HashSet, using BigDecimal: code."
17770886,1,0,11,java.math.BigDecimal,Removing trailing zeros from BigDecimal in Java.
17770886,1,0,11,java.math.BigDecimal,I need to remove trailing zeros from BigDecimal along with RoundingMode.HALF_UP.
17772949,1,0,0,java.math.BigDecimal,How can I fix this poor BigDecimal rounding?
17773755,2,0,0,java.math.BigDecimal,"You might also find this helpful, Scale() of Divide method in BigDecimal"
17784317,1,0,0,java.math.BigDecimal,"I have tried using Integer, Short, BigDecimal and BigInt for the type of the id instance variable."
17809660,2,0,2,java.math.BigDecimal,Many users here would also argue that you should use BigDecimal rather than double for financial calculations.
17822990,1,0,5,java.math.BigDecimal,I would like the java to end up with BigDecimal for its value.
17823855,2,1,5,java.math.BigDecimal,A JAXB (JSR-222) implementation will generate a java.math.BigDecimal from the decimal type (see Table 6-1 in the JAXB 2.2 specification).
17833048,2,0,2,java.math.BigDecimal,If you need precise results with floating points you can use BigDecimal class.
17843792,1,0,1,java.math.BigDecimal,"I you can use the BigDecimal class since it provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion."
17850020,2,1,1,java.math.BigDecimal,"Also to help with your task, you can see the source code for the method BigDecimal#divideAndRound in the Java SDK where everything is happening."
17866039,1,0,1,java.math.BigDecimal,BigDecimal rounding not rounding.
17866180,2,0,4,java.math.BigDecimal,"BigDecimal is immutable, calls of this method do not result in the original object being modified"
17866203,2,0,1,java.math.BigDecimal,"setScale returns a new BigDecimal, which you're discarding."
17866203,2,0,1,java.math.BigDecimal,"From the setScale API doc:  Note that since BigDecimal objects are immutable, calls of this method   do not result in the original object being modified, contrary to the   usual convention of having methods named setX mutate field X."
17868478,2,0,5,java.math.BigDecimal,"You can also use BigDecimal, which supports arbitrary precision."
17868498,2,0,0,java.math.BigDecimal,If precision is important in your application you should instead use BigDecimal
17876390,2,1,3,java.math.BigDecimal,"A long in Java is represented on 64 bits, so you need another structure, like a BigDecimal or two longs (a container with an array of two longs or simply an array of two longs) in order to store an IPv6 address."
17883620,2,1,5,java.math.BigDecimal,Second output is false showing that BigDecimal does not find them to be of equal value and precision.
17883620,2,1,5,java.math.BigDecimal,Therefore value 1 is greater than value 2 in the context of BigDecimal.
17917240,2,0,1,java.math.BigDecimal,Why don't you use ROUND_HALF_UP and BigDecimal#setScale?
17934834,2,0,0,java.math.BigDecimal,Try using the BigDecimal class.
17941671,2,0,50,java.math.BigDecimal,You can also look into the similar BigDecimal class for arbitrary precision signed decimal numbers.
17945985,1,0,0,java.math.BigDecimal,What are the limits of BigDecimal and BigInteger?
17945985,1,0,0,java.math.BigDecimal,What are the limits of BigInteger and BigDecimal ?
17960213,2,1,14,java.math.BigDecimal,You can use the BigDecimal class to hold a double.
21207886,2,0,7,java.math.BigDecimal,You can convert the double into a BigDecimal and then into a BigInteger: code.
17962928,1,0,2,java.math.BigDecimal,"Is it possible to add java types such as BigInteger, BigDecimal, Map and other types as field type in solr?"
17965879,2,0,1,java.math.BigDecimal,Edit: BTW: consider using BigDecimal instead of double or float.
17965879,2,0,1,java.math.BigDecimal,"If you use ""BigDecimal"" and ""float"" as keywords for a search in the web, you'll find many articles dealing with this topic explaining the advantages and disadvantages of each approach."
17975852,2,0,1,java.math.BigDecimal,Typical solution for this situation is usage of BigDecimal or Integer type.
17975941,2,1,4,java.math.BigDecimal,You can use BigDecimal instead of float/double primitives to avoid those issues.
17976310,2,0,1,java.math.BigDecimal,"As suggested by others, opt for BigDecimal."
17991239,2,0,1,java.math.BigDecimal,"If you want to go for precision, you should try BigDecimal instead."
17996274,1,0,2,java.math.BigDecimal,"where myPojo.getMyX returns a double, the test fails as the json is converted to a BigDecimal, with the error messaeg code."
19305825,2,0,0,java.math.BigDecimal,Use Hamcrest to create a custom matcher which casts to BigDecimal.
31849618,2,0,0,java.math.BigDecimal,I had the same problem but I could not change the type Hamcrest was using for the JSON value (BigDecimal).
18013573,2,0,0,java.math.BigDecimal,toPlainString() doesn't modify anything in the BigDecimal (which is immutable).
18013573,2,0,0,java.math.BigDecimal,"A BigDecimal is a BigDecimal, just like an int is an int, and doesn't have any specific format."
18027047,1,0,3,java.math.BigDecimal,"So, my doubt is: How can I force a BigDecimal to be formated in scientific notation if its scale is bigger than a certain value (it was 2 in my example) ?"
18028454,1,0,4,java.math.BigDecimal,Inside the method implementation I use BigDecimal to get the nth Fibonacci number then I use method toBigInteger() to get the number as a BigInteger object and that's surely because I am working with huge numbers in my application.
18028577,2,1,4,java.math.BigDecimal,"Your Math.pow(phi, n) is too big(Infinity),double is unable to store it,use BigDecimal instead."
18028592,2,0,1,java.math.BigDecimal,It's not a good idea to create BigDecimal with float or double because its again limit to the range of them you must create a BigDecimal at first and do some operation with its functions like: code.
18028480,2,0,1,java.math.BigDecimal,According to the BigDecimal javadoc that constructor (BigDecimal(double)) could throw a NumberFormatException if you use a double with value infinite or NaN
18028484,2,0,1,java.math.BigDecimal,"And indeed, it is hard to do the computation using BigDecimal ... as the comments on the accepted answer demonstrate!"
18033743,2,0,0,java.math.BigDecimal,"From the terms in your code example I assume you're doing some currency work; if you have a requirement for different precisions, go for BigDecimal."
18034958,2,0,4,java.math.BigDecimal,"Never use floating point primitive types if you want exact numbers and consistent results, instead use BigDecimal."
18034881,2,0,1,java.math.BigDecimal,"I suggest using BigDecimal, rather than float or double."
18034881,2,0,1,java.math.BigDecimal,"Division by 100 is always exact in BigDecimal, but can cause rounding error in float or double."
18034881,2,0,1,java.math.BigDecimal,"That means that, for example, using BigDecimal 50% of x plus 30% of x plus 20% of x will always sum to exactly x."
18047252,2,0,3,java.math.BigDecimal,Or change your current design to have a List<BigDecimal> prices instead of having 6 fields of the same type.
18065555,1,0,0,java.math.BigDecimal,Fix for float precision issue without BigDecimal.
18066730,2,0,0,java.math.BigDecimal,"However, as others have pointed out, if you are dealing with financial calculations you should work in BigDecimal."
18066670,2,0,1,java.math.BigDecimal,"As already pointed out, BigDecimal is designed for situations in which exact handling of short decimal fractions is especially important, and is much better for those situations than any binary floating point format."
18066679,2,0,0,java.math.BigDecimal,One way to deal with this is using exact arithmetic (BigDecimal or integer arithmetic).
18072708,2,0,2,java.math.BigDecimal,Do this with BigDecimal: code.
18081239,2,0,6,java.math.BigDecimal,"However, if you are dealing with monetory value, or some other value, where floating point precision is of concern, then you should use BigDecimal instead: code."
18094554,2,0,1,java.math.BigDecimal,The other option is to use something like BigDecimal rather than float.
18094555,2,0,1,java.math.BigDecimal,"If you do, look at BigDecimal, which is much slower."
18094570,2,0,3,java.math.BigDecimal,Here you can read more about how floats are encoded: http://en.wikipedia.org/wiki/IEEE_floating-point_standard If you care about precision you should use BigDecimal: http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html
18107162,1,0,14,java.math.BigDecimal,I am using BigDecimal to make some calculations.
18107162,1,0,14,java.math.BigDecimal,"The answer to that problem was posted here: ArithmeticException: ""Non-terminating decimal expansion; no exact representable decimal result"" This means, there is some division with unlimited decimals, so BigDecimal tells me it cannot calculate the result exactly."
18107162,1,0,14,java.math.BigDecimal,"To avoid this I have to call BigDecimal.setScale(SOMETHING, ROUNDING_MODE); EDIT: The problem now is to set the SOMETHING to the maximum possible value."
18107162,1,0,14,java.math.BigDecimal,Moved my second question to: Why is there no BigDecimal.setPrecision() method?
18108175,2,0,0,java.math.BigDecimal,BigDecimal.setScale takes an int as its argument.
18108285,2,0,0,java.math.BigDecimal,PS: Please note that it is still a workaround since I am converting the BigDecimal object to double for division and thus limiting the capability of dividing numbers bigger than double.
18107310,2,1,2,java.math.BigDecimal,First Question: There is no such thing as BigDecimal.UNLIMITED.
18107310,2,1,2,java.math.BigDecimal,"Because the docs don't explicitly mention the default MathContext of a BigDecimal, I have to assume that it is MathContext.UNLIMITED."
18107310,2,1,2,java.math.BigDecimal,"Seeing as you have a repeating decimal, a BigDecimal can't hold it, even with unlimited precision."
18107832,1,0,2,java.math.BigDecimal,Why is there no BigDecimal.setPrecision() method?
18107832,1,0,2,java.math.BigDecimal,Why is there a BigDecimal.setScale() method which sets the decimals to some value and no MathContext.setScale() method but only a constructor MathContext(precision) or other way around why is there no BigDecimal.setPrecision() method?
18108026,2,0,3,java.math.BigDecimal,"If you refer to the documentation of BigDecimal, we have:  The BigDecimal class gives its user complete control over rounding   behavior."
18134086,1,0,0,java.math.BigDecimal,"I've looked at BigDecimal, however I don't think this is what I'm after as all examples I've seen pre-define the number with a large amount of decimal places first, not via a calculation, but I may be wrong."
18134086,1,0,0,java.math.BigDecimal,"It requires the divide(BigDecimal divisor, int scale, int roundingMode) method."
18134122,2,0,1,java.math.BigDecimal,BigDecimal is what you want.
18134122,2,0,1,java.math.BigDecimal,"It has methods like add(), multiply() pow() etc that return new BigDecimal objects."
18134141,2,1,3,java.math.BigDecimal,"In any case you should be able to use a BigDecimal for all of your calculations, just perform all of your math using the methods of BigDecimal instead of built-in arithmetic operators."
18134172,2,0,4,java.math.BigDecimal,Usage of BigDecimal is good way to solve this issue.
18134172,2,0,4,java.math.BigDecimal,"But i bet, that BigDecimal will be much much better."
18134172,2,0,4,java.math.BigDecimal,"Take a look on Javadoc for BigDecimal (http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html) The main difference between using standard types and this BigDecimal type, that you couldn't use operators like +, -, etc., but you need to use methods like add(),divide(), etc."
18159903,2,1,4,java.math.BigDecimal,"To understand this class's structure, let's say that the 5 single-valued elements are homogenous (of type, say, BigDecimal)."
18159903,2,1,4,java.math.BigDecimal,"However, given that each of its 2 elements contains an unidentified number of data items, the element type of this array should not be BigDecimal as in the previous case, but ArrayList."
18159903,2,1,4,java.math.BigDecimal,The type of the elements of these ArrayLists is whatever the type of the multiple values is (say BigDecimal too).
18163282,2,1,3,java.math.BigDecimal,"Eases setting of non-standard Java objects in a SQL (Date, Time, Timestamp, BigDecimal, Blob, etc.)"
18163268,1,0,2,java.math.BigDecimal,Primarily I am concerned with BigDecimal - but the others would be good to know as well.
18163268,1,0,2,java.math.BigDecimal,"float (primitive)  double (primitive) boolean (primitive) Float (Object) Double (Object)  BigDecimal (Object) Boolean (Object) object pointers  My research: I have done some testing experimentally for different object sizes using the SizeOf library (http://sizeof.sourceforge.net/) and Im a bit disturbed with what I see for BigDecimal, Double, Float, Boolean."
18163268,1,0,2,java.math.BigDecimal,I did find another post in a different thread for BigDecimal but I dont know for sure if the answer is correct: Java BigDecimal memory usage?
18163268,1,0,2,java.math.BigDecimal,Either BigDecimal/Double/Float take crazy amounts of memory or there is a problem with the sizeof library.
18163268,1,0,2,java.math.BigDecimal,Output: test 0 - java.math.BigDecimal size:12144 test 1 - java.math.BigDecimal size:12144 test 2 - java.math.BigDecimal size:12144 test 3 - java.math.BigDecimal size:12216 test 4 - java.math.BigDecimal size:12208 test 5 - java.math.BigDecimal size:12216 test 6 - java.math.BigDecimal size:12224 test 7 - com.george.test.info.TestBigDecimal size:12160 test 8 - java.lang.Double size:296 test 9 - java.lang.Double size:296 test 10 - java.lang.Float size:288 test 11 - java.lang.Float size:288 test 12 - com.george.test.info.TestDouble size:24 test 13 - com.george.test.info.TestEmpty size:16 test 14 - com.george.test.info.TestFloat size:16 test 15 - java.lang.Boolean size:320 test 16 - com.george.test.info.TestBool size:16 test 17 - com.george.test.info.TestPacked2Bool size:16 test 18 - com.george.test.info.TestPacked3Bool size:16 test 19 - com.george.test.info.TestPacked4Bool size:16 test 20 - com.george.test.info.TestPacked5Bool size:24 test 21 - com.george.test.info.TestPacked6Bool size:24 test 22 - com.george.test.info.TestPacked7Bool size:24 test 23 - com.george.test.info.TestPacked8Bool size:24 test 24 - com.george.test.info.TestPacked9Bool size:24 test 25 - com.george.test.info.TestPacked10Bool size:24 test 26 - com.george.test.info.TestPacked11Bool size:24 test 27 - com.george.test.info.TestPacked12Bool size:24 test 28 - com.george.test.info.TestPacked13Bool size:32 test 29 - com.george.test.info.TestPacked14Bool size:32 test 30 - com.george.test.info.TestPacked15Bool size:32 test 31 - com.george.test.info.TestPacked16Bool size:32 test 32 - com.george.test.info.TestPacked17Bool size:32 test 33 - com.george.test.info.TestPacked64Bool size:80
18166122,2,0,2,java.math.BigDecimal,To have exact numbers use BigDecimal - http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html .
18169627,1,0,4,java.math.BigDecimal,"After some research I was able to find out BigDecimal is the right data type for Java, but which data type should I be using for PostgreSQL?"
18170030,2,1,8,java.math.BigDecimal,I don't see the upside given that we have DECIMAL/NUMERIC in SQL and BigDecimal in Java.
18170030,2,1,8,java.math.BigDecimal,"Yes, in Java, you want BigDecimal as your arbitrary precision type."
18170030,2,1,8,java.math.BigDecimal,"BigDecimal is slower and uses more memory, but will accurately store your money amounts."
18170030,2,1,8,java.math.BigDecimal,SQL NUMERIC/DECIMAL should map to BigDecimal as discussed here and on StackOverflow.
18178771,2,0,1,java.math.BigDecimal,You have to use BigDecimal as your data type.
18180884,2,0,1,java.math.BigDecimal,I'm guessing you should be using something like BigDecimal here.
18180889,2,0,0,java.math.BigDecimal,"If you want exact value, there are special classes like BigDecimal"
18180862,2,0,2,java.math.BigDecimal,"For precise ""doubles"", use BigDecimal: code."
18182862,1,0,1,java.math.BigDecimal,Format BigDecimal in Spring.
18183265,2,0,2,java.math.BigDecimal,You can use the JSTL format taglib to format the display of a BigDecimal.
18183265,2,0,2,java.math.BigDecimal,To format a BigDecimal include a Product as an attribute and reference the price field via the instance of Product using JSP EL.
18187366,2,0,0,java.math.BigDecimal,"For example T could be BigDecimal, and you can't add an Integer to a List<BigDecimal>."
18221406,1,0,0,java.math.BigDecimal,Is it possible to store BigDecimal 0.000 in Oracle with JPA.
18221406,1,0,0,java.math.BigDecimal,"If confidence is set to ""0.000"", eg: setConfidence(new BigDecimal(""0.000"")); and then the entity is persisted to the database and then fetched back from the database, the value fetched loses its precision and scale and is simply 0."
18228169,2,0,11,java.math.BigDecimal,"If you need more precision than double can give, you can use BigDecimal."
18228169,2,0,11,java.math.BigDecimal,"EDIT If BigDecimal is not an option, and if the number of decimals is smallish (say 3 or 4 because these are prices for example), you can use longs instead with the last 4 digits being the decimals."
18231802,1,0,11,java.math.BigDecimal,How can i parse a String to BigDecimal?
18231802,1,0,11,java.math.BigDecimal,"i have this String 10,692,467,440,017.120(it's an amount) and i want to parse it to a BigDecimal."
18231864,2,0,5,java.math.BigDecimal,BigDecimal offers a string constructor.
18231864,2,0,5,java.math.BigDecimal,You then simply call BigDecimal myBigD=new BigDecimal(filteredString); You can also create a NumberFormat and call setParseBigDecimal(true).
18231864,2,0,5,java.math.BigDecimal,Then parse( will give you a BigDecimal without worrying about manually formatting.
18231918,2,0,1,java.math.BigDecimal,Try the correct constructor http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(java.lang.String) You can directly instanciate the BigDecimal with the String ;)
18260271,2,0,0,java.math.BigDecimal,"If this has anything to do with money, do not use float or double, instead use BigDecimal."
18268093,1,0,1,java.math.BigDecimal,Difference of Two numbers - BigDecimal.
18268093,1,0,1,java.math.BigDecimal,"I am just trying to learn more about BigDecimal, but below code makes me confuse."
18268093,1,0,1,java.math.BigDecimal,"Result = Die  I am not ready to ""Die"", why BigDecimal is hell bent on killing me."
18268206,2,0,2,java.math.BigDecimal,This is due to conversion issue since translates a double into a BigDecimal which is the exact decimal representation.
18268155,2,1,10,java.math.BigDecimal,"Now when you create a BigDecimal from that value, that ""not quite 1.2"" value is retained exactly."
18268155,2,1,10,java.math.BigDecimal,From the constructor's documentation:  Translates a double into a BigDecimal which is the exact decimal representation of the double's binary floating-point value.
18268155,2,1,10,java.math.BigDecimal,"... whereas when you use new BigDecimal(""1.2"") the result is exactly 1.2 - BigDecimal parses the string, and any decimal string representation can be represented exactly by BigDecimal, as that's the whole point of it."
18305716,2,0,2,java.math.BigDecimal,Try using the divide method directly from the BigDecimal class.
18305716,2,0,2,java.math.BigDecimal,If you are casting to a float then you are not using the benefit of BigDecimal .
18305762,2,0,2,java.math.BigDecimal,"Maybe doing the computation using BigDecimal arithmetic methods would give a better result, but it is by no means guaranteed that you won't get similar problems in this calculation with different inputs ..."
18305762,2,0,2,java.math.BigDecimal,Even BigDecimal will give you rounding errors; e.g.
18330674,2,1,3,java.math.BigDecimal,Use BigDecimal if you want more precision - but be aware that this will change other things too.
18330674,2,1,3,java.math.BigDecimal,"Natural values (weights, distances etc) are appropriate for double; artificial values (particularly currency values) are appropriate for BigDecimal."
18330833,2,0,3,java.math.BigDecimal,I managed to get this (You have to use BigDecimal): code.
18330833,2,0,3,java.math.BigDecimal,"Resource Links: DecimalFormat and BigDecimal One more thing, you have to enter the BigDecimal number as a String or else it will cause problems."
18359723,2,0,0,java.math.BigDecimal,"In fact, if you're defining PI then it needs to be a double (or BigDecimal depending on your use)."
20263999,2,0,11,java.math.BigDecimal,Better option is use SQLQuery#addScalar than casting to Long or BigDecimal.
18362251,1,0,1,java.math.BigDecimal,"I tried using both Double and BigDecimal as my value field type, but both provide me the same error message on deployment."
18365356,2,0,2,java.math.BigDecimal,"From Number class documentation: The abstract class Number is the superclass of classes BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, and Short."
18365356,2,0,2,java.math.BigDecimal,"BigDecimal, Double or Float) it makes much more sense."
18382362,2,1,2,java.math.BigDecimal,Usually I use a BigDecimal to scale a decimal value and display it to user.
18383705,2,1,2,java.math.BigDecimal,"BigDecimal is immutable, so you have to replace the values in the map with new instances."
18389580,2,1,11,java.math.BigDecimal,"In this case, rather than printing the double value, you create a BigDecimal object passing double value as argument."
18389580,2,1,11,java.math.BigDecimal,BigDecimal represents arbitrary precision signed decimal number.
18401667,1,0,1,java.math.BigDecimal,Jooq casting String to BigDecimal.
18401667,1,0,1,java.math.BigDecimal,Is there a way to cast a String to a BigDecimal in a jooq-query without losing precision?
18401667,1,0,1,java.math.BigDecimal,When i do endResER.VALUE.cast(BigDecimal.class) where VALUE is a field with a String-value in the database it returns a BigDecimal without any fraction digits.
18408036,2,0,3,java.math.BigDecimal,"Additionally, BigInteger and BigDecimal are numbers too and those have even higher precision."
18408036,2,0,3,java.math.BigDecimal,"In order to get maximum precision, you'd have to use BigDecimal in the calculation and when creating the initial values you'd have to check the types of the values and call the appropriate method:  for Byte, Short, Integer and Long you'd call BigDecimal.valueof( x.longValue() ) for Float and Double you'd call BigDecimal.valueof( x.doubleValue() ) BigDecimal could be used as is BigInteger would be passed to the BigDecimal constructor  This would add quite a bit of complexity and in that case you might want to go with arshajii's suggestion of subclassing Point instead."
18431544,2,1,3,java.math.BigDecimal,"""Floating point"", on the other hand, means with a fractional part, like double, float, and BigDecimal."
18435167,2,0,0,java.math.BigDecimal,Why don't you use BigDecimal.
18444337,1,0,6,java.math.BigDecimal,"For decimals, I'll use float ^e, as @WebDaldo suggested, or BigDecimal, as @kocko suggested."
18444545,2,0,4,java.math.BigDecimal,"For calculations with exponents, like you would use in a calculator, you should use BigDecimal."
18444350,2,0,10,java.math.BigDecimal,"For operations with floating numbers, Java provides the BigDecimal class, which can be useful, as well."
18444371,2,1,12,java.math.BigDecimal,"Output:  Sum : 3677593528178171109762168924892318  Product : 1938839471287900434078965247064711159607977007048190357000119602656  I should mention BigDecimal, which is excellent for amount calculations compare to double."
18445017,1,0,1,java.math.BigDecimal,"For formatting numbers other than BigInteger and BigDecimal   objects, the lower of newValue and 309 is used."
18449975,2,1,1,java.math.BigDecimal,You will have to use something like BigDecimal instead.
18449975,2,1,1,java.math.BigDecimal,Simply doing (new BigDecimal(doubleValue)).toString() to populate your result will do it.
18449975,2,1,1,java.math.BigDecimal,Edit: In fact playing around with different MathContext types for the BigDecimal constructor I cannot get the exact value that you posted (i.e. value with exactly that many digits) so I am unsure how that value was computed.
18485545,2,1,3,java.math.BigDecimal,The best equivalent would probably be BigDecimal.
18485580,2,0,0,java.math.BigDecimal,The class Double as an object class or the type double as primitive have the same properties regarding precision etc... if you want higher precision you can use the BigDecimal class.
18502676,1,0,0,java.math.BigDecimal,"This will accept AtomicInteger, AtomicLong, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short."
18527756,2,0,3,java.math.BigDecimal,"In Java, it is recommended that all the monetary calculations are to be carried out by BigDecimal data type so that there will not be any rounding off issues that you would face in float and double Here are the few links that might help you 1,2,3."
18527701,2,0,3,java.math.BigDecimal,Try BigDecimal instead.
18542739,1,0,0,java.math.BigDecimal,Any number type to BigDecimal.
18542739,1,0,0,java.math.BigDecimal,After a lot of messing around I came up with the following code to convert any Number subclass into a BigDecimal.
18543026,2,1,1,java.math.BigDecimal,"However, I'd probably overload the method for Double, or let BigDecimal throw a NumberFormatException instead."
18543026,2,1,1,java.math.BigDecimal,Letting BigDecimal do the work: code.
18542788,2,0,1,java.math.BigDecimal,Make setValue take a BigDecimal to begin with.
18542788,2,0,1,java.math.BigDecimal,Then the code that converts other types to BigDecimal can be elsewhere in your code.
18542788,2,0,1,java.math.BigDecimal,"You'll have the freedom to overload the BigDecimal conversion for various types, and you can do a conversion to BigDecimal based specifically on the input type."
18556385,2,1,1,java.math.BigDecimal,Use of BigDecimal is encouraged for prices and such.
18558697,2,0,1,java.math.BigDecimal,"If you want to represent numbers larger that 263 - 1 == 9,223,372,036,854,775,807, you need to use BigInteger or BigDecimal."
18580080,2,1,2,java.math.BigDecimal,"If you need to work with larger numbers you're only left with BigInteger, BigDecimal and similar."
18603079,2,0,0,java.math.BigDecimal,Use BigDecimal  code.
18603081,2,0,0,java.math.BigDecimal,"You must use java.math.BigDecimal Already explained here:  Floating point arithmetic not producing exact results in Java Make sure to use BigDecimal(String) constructor for floating point numbers, avoid BigDecimal(double)  constructor: new BigDecimal(""10.20"").multiply(new BigDecimal(100)).toString()"
18616513,2,0,0,java.math.BigDecimal,"TypedRow is a special api and allows BigInteger, BigDecimal and String types right now.....These types however when stored are stored as the lowest bytes possible so an int value of 10 is stored as one byte."
18616337,2,0,2,java.math.BigDecimal,or BigDecimal/BigInteger if that is not a option.
18635942,1,0,0,java.math.BigDecimal,How do you restrict the whole part to 15 and decimal part to 8 like 15.8 using BigDecimal  For Example: code.
18637188,2,0,0,java.math.BigDecimal,The BigDecimal is described with precision.
18637188,2,0,0,java.math.BigDecimal,"MathContext context = new MathContext(15 + 8, RoundingMode.HALF_UP); When you apply to your need  BigDecimal value = new BigDecimal(""1234567890123456789.12345678"",context); The out put will be  1234567890123456789.1235 This is the expected way that what is erased from the number is the smallest thing."
18637188,2,0,0,java.math.BigDecimal,You can implement your type that controls it by extending BigDecimal class  code.
18636231,2,1,0,java.math.BigDecimal,You can restrict (round) the decimal part by using BigDecimal.setScale.
18636231,2,1,0,java.math.BigDecimal,BigDecimal.ROUND_UP.
18636231,2,1,0,java.math.BigDecimal,Check the JavaDoc from BigDecimal for further information.
18642598,1,0,0,java.math.BigDecimal,"I know in this case I could simple add the numbers by the provided function of BigDecimal, but in my case the calculation is way more complex!"
18748641,2,0,2,java.math.BigDecimal,"If this is the case, you should know that you can access the BigDecimal objects directly from your expression: code."
18748641,2,0,2,java.math.BigDecimal,"Even though I didn't declare x and y as BigDecimal, I can still call add on x and pass in y."
18680381,2,1,1,java.math.BigDecimal,"Alternatively, if you really need the decimal precision, use a BigDecimal instead."
18697331,1,0,0,java.math.BigDecimal,Updating BigDecimal concurrently within ConcurrentHashMap thread safe.
18702237,2,0,3,java.math.BigDecimal,To see the actual values you can use BigDecimal which covers the actual value precisely.
18714360,1,0,6,java.math.BigDecimal,Java BigDecimal can have comma instead dot?
18714360,1,0,6,java.math.BigDecimal,I have a string value that I want to assign to a BigDecimal.
18714535,2,0,2,java.math.BigDecimal,The BigDecimal(String) constructor documentation lists all valid formats and characters.
18721771,1,0,6,java.math.BigDecimal,Java : Removing zeros after decimal point in BigDecimal.
18731596,2,0,3,java.math.BigDecimal,"You can use BigInteger and BigDecimal Additionally depending on your needs, you can just assign it to a double instead of float, it has higher precision"
18743655,2,1,2,java.math.BigDecimal,To parse a number from a string and then round to a given number of fractional digits you can use BigDecimal from the java.math package: code.
18745098,2,0,17,java.math.BigDecimal,You should use BigDecimal instead which is arbitrary-precision signed decimal number.
18745098,2,0,17,java.math.BigDecimal,"Instead of maintaining two different arrays, you should maintain a Map<String, BigDecimal> mapping from items to their prices."
18757616,2,0,1,java.math.BigDecimal,"IMHO Using BigDecimal is slower, more complicated to write and no less error prone than using double if you know what you are doing."
18758197,2,1,1,java.math.BigDecimal,"If you want to do 'proper' double calculations, use BigDecimal, and use the String constructors when using them."
18766595,1,0,0,java.math.BigDecimal,convert BigDecimal to Scientific Notation Java.
18766595,1,0,0,java.math.BigDecimal,I've also tried calling EngineeringString() on the BigDecimal but this also didn't seem to work for me
18766779,2,1,3,java.math.BigDecimal,"The DecimalFormat object does indeed create a string, creating a BigDecimal instance again would just parse the number from string again - and the toString() method is called on the BigDecimal instance, produing the output you described..."
18766779,2,1,3,java.math.BigDecimal,"Some clarification BigDecimal, and other numeric formats (and dates too!)"
18766779,2,1,3,java.math.BigDecimal,"BigDecimal for example stores the decimal digits, and where the decimal point is."
18793540,2,0,2,java.math.BigDecimal,Multiply it by 10/100/... and then compare the numbers Look into BigDecimal.
18793552,2,0,2,java.math.BigDecimal,"You either need to rebase your accounting (using a financial class that understands money and decimals), (for instance counting in pennies for money), and for engineering you may need to use BigDecimal or a related class with specific rounding behavior, percision, etc."
18811224,2,1,2,java.math.BigDecimal,You can use a long as Tharwen mentioned or you can use java.math.BigDecimal.
18811224,2,1,2,java.math.BigDecimal,BigDecimal is a class made for holding a decimal number as big (or small) as you want.
18812705,2,0,1,java.math.BigDecimal,"""-DecimalPoint occurs, or using the BigDecimal type which has a scale()-Method returning the number of decimals."
18839761,2,0,0,java.math.BigDecimal,trying using BigDecimal http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html When using you can then set the scale to 2 or whatever you want.
18852251,2,1,2,java.math.BigDecimal,"Here I'm assuming the return type is one of these - BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, and Short (which are all subclasses of Number)."
18866009,2,0,0,java.math.BigDecimal,Consider using BigDecimal.
18898681,2,1,1,java.math.BigDecimal,"To make the comparison, try converting to BigDecimal via new BigDecimal(double, MathContext) Update: The test fails."
18899219,1,0,0,java.math.BigDecimal,Just as the trace says the value that are sent to the class is of the type java.math.BigDecimal and I then use SQL type 2 in other word java.sql.Types.NUMERIC like in the bellow example: code.
18899219,1,0,0,java.math.BigDecimal,What I suspect happens is something in the javalayer or hibernate sends only the BigInteger part of the BigDecimal value.
18925893,2,0,1,java.math.BigDecimal,"I'd strongly advise you to use BigDecimal for currency values though, instead of double."
18934567,2,0,0,java.math.BigDecimal,You can use BigDecimal class.
18936912,2,0,4,java.math.BigDecimal,Use BigDecimal if you want to do calculations using a specific number of decimal digits.
18937087,2,0,2,java.math.BigDecimal,"As another side note, you shouldn't generally use double for financial amounts - consider using BigDecimal instead."
18937325,1,0,0,java.math.BigDecimal,Running sample here: http://www.browxy.com/SubmittedCode/42603 Solution Use BigDecimal which has arbitary precision code.
18937422,2,1,7,java.math.BigDecimal,"If you need more accuracy than that, try a different number format, such as BigDecimal."
18937424,2,0,1,java.math.BigDecimal,If you need such a precision you should go for BigDecimal.
18939971,2,0,6,java.math.BigDecimal,"If you need more resolution than $0.01 (say, for intermediate calculations), then you should use BigDecimal numbers."
18940124,2,0,3,java.math.BigDecimal,BigInteger and BigDecimal in the Oracle JDK are both O(M*N) for both multiply and divide.
18945793,2,0,1,java.math.BigDecimal,BigInteger and BigDecimal can be used to accurately store very large integer and decimal numbers respectively.
18945793,2,0,1,java.math.BigDecimal,You can use a combination of BigDecimal or BigIntger and a Map to store and efficiently calculate extremely large things like Fibonacci sequences without slowing your computer down to a crawl.
18945793,2,0,1,java.math.BigDecimal,Maybe you should read up on BigInteger and BigDecimal.
18946388,1,0,7,java.math.BigDecimal,"I read similar post about double precision, they suggest something like BigDecimal class, but I can't use them in this case, my code for doing this is: code."
18946785,2,0,1,java.math.BigDecimal,I suggest you to use the BigDecimal class for calculating with floating point values.
18946524,2,1,1,java.math.BigDecimal,For calculation with such big numbers you should use BigDecimal
18958180,1,0,1,java.math.BigDecimal,Why is BigDecimal not rounded as expected.
19018781,2,0,0,java.math.BigDecimal,And you should use BigDecimal for monetary comparison.
19020220,2,0,3,java.math.BigDecimal,"Either change the declaration to long (or possibly BigDecimal), or use smaller numbers <= Integer.MAX_VALUE;"
19032167,1,0,0,java.math.BigDecimal,"the output is the same, after the 6 one because of the imprecision of the double it starts to bring different result, i try to used BigDecimal how ever i still don't understand how to it works or how to add the result inside the array."
19033937,2,0,0,java.math.BigDecimal,"Precision is in BigDecimal parlance ""scale"" (setScale)."
19034926,2,0,0,java.math.BigDecimal,Use BigDecimal code.
19040522,2,0,2,java.math.BigDecimal,You should use BigDecimal to represent money.
19040522,2,0,2,java.math.BigDecimal,"See:  Representing Monetary Values in Java https://blogs.oracle.com/CoreJavaTechTips/entry/the_need_for_bigdecimal http://www.javapractices.com/topic/TopicAction.do?Id=13 You can use the various methods that BigDecimal has for scaling, rounding, formatting, etc."
19042110,2,1,4,java.math.BigDecimal,Use BigDecimal: code.
19042443,2,0,0,java.math.BigDecimal,"Use BigDecimal, and construct it directly from the String."
19060472,2,0,0,java.math.BigDecimal,"You can use DecimalFormat, but please also note that it is not a good idea to use double in these situations, rather use BigDecimal"
19065302,2,0,1,java.math.BigDecimal,I prefer BigDecimal class for mathematical issues!
19075387,2,0,1,java.math.BigDecimal,Remember that:  multiplication has higher operator priority than addition in Java you should use BigDecimal if you want control over the rounding when performing operations with floating point numbers
19075447,2,0,3,java.math.BigDecimal,Use BigDecimal operation instead of double than you will get expected result.
19077405,1,0,0,java.math.BigDecimal,For this I can of course us two textViews and convert the contents to a BigDecimal (the type we use for money denominations).
19078554,2,0,6,java.math.BigDecimal,A BigDecimal   consists of an arbitrary precision integer unscaled value and a 32-bit   integer scale.
19078554,2,0,6,java.math.BigDecimal,The value of the number represented by the BigDecimal is   therefore (unscaledValue × 10^-scale).
19089461,2,0,4,java.math.BigDecimal,If you have a number that is exactly representable within decimal but not within binary then you may find BigDecimal useful.
19089461,2,0,4,java.math.BigDecimal,But you should not consider BigDecimal to be better than floating point numbers; it just has a different set of numbers it can and can't represent exactly; the set you're used to.
19089461,2,0,4,java.math.BigDecimal,BigDecimal also attempts to use the decimal counting system on a binary processor; as such its calculations are less efficient that double/float based calculations
19096465,1,0,1,java.math.BigDecimal,According to documentation you have to use BigDecimal.
19099519,2,0,0,java.math.BigDecimal,Then you can create null BigDecimal objects to populate your map.
19103522,2,0,0,java.math.BigDecimal,Use BigDecimal if you have decimal numbers and you want to avoid precision problems.
19105514,2,0,0,java.math.BigDecimal,The solution is to use BigDecimal.
19164404,1,0,0,java.math.BigDecimal,I have a Model class called Ranges.class which contains a rangeName (String) and a startRange (BigDecimal) and an endRange (BigDecimal) value.
19164752,2,0,5,java.math.BigDecimal,Use a BigDecimal instead.
19170597,2,0,0,java.math.BigDecimal,My recommended solution for this sort of situation in Java is to use BigDecimal.
19168725,2,0,1,java.math.BigDecimal,"You could even use a BigDecimal instead, whose precision is arbitrary."
19187347,2,0,1,java.math.BigDecimal,Here's a good article on why floats are not exact (or why they should never be used in financial calculations): http://effbot.org/pyfaq/why-are-floating-point-calculations-so-inaccurate.htm What you really want is BigDecimal.
19191135,2,1,1,java.math.BigDecimal,You can use the overloaded constructor for JulianDateStamp that accepts a BigDecimal.
19199514,2,1,1,java.math.BigDecimal,Java offers the BigDecimal class.
19199514,2,1,1,java.math.BigDecimal,"But as Java offers a nice ready-to-use class for fixed point math (BigDecimal), you could give it a try."
19199223,2,0,0,java.math.BigDecimal,"Try this way:      answer = input * input;     BigDecimal bg = new BigDecimal(answer);     double rs = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();  or      DecimalFormat df = new DecimalFormat(""#.00"");     double rs = df.format(answer);  Using BigDecimal will always keep the pricise value for double values."
19214615,2,1,1,java.math.BigDecimal,"If precisely representing 4.35 is necessary, take a look at Java BigDecimal type."
19215363,2,0,2,java.math.BigDecimal,"Use BigDecimal, which has a multiply method and a constructor which takes a String."
19219445,2,1,0,java.math.BigDecimal,Use BigDecimal instead of double.
19220732,1,0,2,java.math.BigDecimal,"(Example data does not correspond one to one in the example, as in reality it is WordGroupAndScore, but I'll use Strings or BigDecimals to represent the data in the example) Example data of baseMap (values and key pairs) strictly (A and List<B> pairs):  (""invoiceNumber"", [""0001"", ""0002""]) (""invoiceDate"", [""2013-10-07""]) (""priceExclVAT, [new BigDecimal(""10.00"")]) (""highVAT, [new BigDecimal(""2.10"")]) (""priceInclVAT, [new BigDecimal(""12.10""), new BigDecimal(""14.10"")])  I want to generate all possible combinations of the data."
19220732,1,0,2,java.math.BigDecimal,"Example output, one (""first"") combination (values and single key pairs) strictly (A and B pairs):  (""invoiceNumber"", ""0001"") (""invoiceDate"", ""2013-10-07""]) (""priceExclVAT, new BigDecimal(""10.00"")) (""highVAT, new BigDecimal(""2.10"")) (""priceInclVAT, new BigDecimal(""12.10""))  Example output, one (""last"") combination (values and single key pairs) strictly (A and B pairs):  (""invoiceNumber"", ""0002"") (""invoiceDate"", ""2013-10-07"") (""priceExclVAT, new BigDecimal(""10.00"")) (""highVAT, new BigDecimal(""2.10"")) (""priceInclVAT, new BigDecimal(""14.10""))  So somehow I need to iterate over the full baseMap, remember/create all combinations based on every baseMap.get(i).size(), but I am pretty much lost where to start."
19244285,2,0,2,java.math.BigDecimal,I would rather use double (or long with fixed precision or if I have to BigDecimal).
19298328,1,0,3,java.math.BigDecimal,I'd like to be able to have compile-time safety that get() will always return a BigDecimal: code.
19298328,1,0,3,java.math.BigDecimal,"That way, if I need to change the Java representation of a given Type (say, I want to make NumericType<Number> instead of NumericType<BigDecimal> the code above would fail at compile time."
19867705,2,0,0,java.math.BigDecimal,"Moreover, if the interest is to hide that a given NumericType uses BigDecimal as internal representation, it will be simpler and more robust to implement a complete abstraction of the needed operations using a dedicated object."
19332987,2,0,1,java.math.BigDecimal,you can use BigDecimal.setScale simple example code.
19365059,2,0,0,java.math.BigDecimal,There's also no reason for using BigDecimal if all you need is a float.
19365059,2,0,0,java.math.BigDecimal,"The double value 5.2 is much closer to the ""true"" 5.2 value than the float value 5.2f that you get with the float literal 5.2f or from new BigDecimal(""5.2"").floatValue()."
19365059,2,0,0,java.math.BigDecimal,"If you are required to use BigDecimal, maybe because you get a BigDecimal from somewhere else, and you simplified your code example here with new BigDecimal(""5.2""), then at least call doubleValue(), and you can still set the cell value with a double: code."
19337833,2,0,2,java.math.BigDecimal,"It looks like a List<Map<String, BigDecimal>> to me."
19337833,2,0,2,java.math.BigDecimal,"The Map will give you the association between the String and floating-point value, which I've chosen BigDecimal to represent."
19345852,2,0,3,java.math.BigDecimal,"However, if you're going to be doing any kind of math on these numbers, then using BigDecimal to represent a numeric quantity with fixed precision is absolutely the right way to go."
19354389,2,0,1,java.math.BigDecimal,"So, for instance, you just expose a public BigDecimal calculateTax(BigDecimal amount, double percentage) to your users, without showing how you went about and implemented your method."
19395154,2,0,0,java.math.BigDecimal,"There are eight distinct number subtypes (BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short, not counting the atomic versions)."
19400129,2,0,0,java.math.BigDecimal,"As EJP and Leonidos said in comments, proper rounding is performed through the BigDecimal class not the double primitive."
19415321,1,0,0,java.math.BigDecimal,"I am currently trying to create a java program that:  Retrieves data from an Oracle sql database (String and BigDecimal values) and puts them in a resultSet Displays each row Adds a ""totals"" section at the end of each group, divided by 3 columns of String values."
19415321,1,0,0,java.math.BigDecimal,"There are 7 columns, 1~3 String codes for department, store, and region IDs (String); 4 is an individual's ID (String); 5~7 the values for three different payments Salary, Overtime, and Adjusted total pay (BigDecimal)."
19416985,2,1,3,java.math.BigDecimal,"Although you can calculate arbitrary precision results with BigDecimal, there is no need to calculate to 100000!"
19418703,2,0,0,java.math.BigDecimal,"As this is probably about money, I'd suggest using BigDecimal."
19442390,2,0,0,java.math.BigDecimal,"It is not an error, it's all about precision for floating point numbers(float, double).If you want more accurate results, use BigDecimal."
19431689,1,0,2,java.math.BigDecimal,Why is the behavior of Double.toString not the same as MathContext.DECIMAL64 when constructing a BigDecimal in Java?
19433032,2,1,2,java.math.BigDecimal,A BigDecimal Arbitrary-precision signed decimal numbers.
19439606,1,0,0,java.math.BigDecimal,Using BigDecimal gives the same result.
19444113,2,1,6,java.math.BigDecimal,On a side note:- I would suggest if you want the exact decimal values then use java.math.BigDecimal
19449875,1,0,1,java.math.BigDecimal,"But in our test env, with the hsqldb in memory, it fails because the query does not return an Integer or an int, but returns a BigDecimal (the cast fails)."
19455757,2,1,1,java.math.BigDecimal,"HSQLDB actually returns a Long, not a BigDecimal"
19450775,1,0,1,java.math.BigDecimal,"jOpenDocument Sheet.getValueAt(int, int) return value is both a String and a BigDecimal?"
19450775,1,0,1,java.math.BigDecimal,Note that this time the class seems to be just BigDecimal.
19849508,2,0,0,java.math.BigDecimal,This way you read the String value of the cell and then parse it to a BigDecimal
19452609,2,0,2,java.math.BigDecimal,"In JPA, you must use for a field marked with @Id one of the following types: any Java primitive type; any primitive wrapper type; java.lang.String; java.util.Date; java.sql.Date; java.math.BigDecimal; java.math.BigInteger Just remove the generics from the base class and use one of the mentioned types for your id field."
19455734,2,0,0,java.math.BigDecimal,"However, since you'll need to look up accounts by name, you might as well keep them in a Map<String, BigDecimal> which would map the account holder to their balance."
19455734,2,0,0,java.math.BigDecimal,"I would use a BigDecimal with a scale of two, but you could also use a long or BigInteger and store the balance as a whole number of cents."
19455734,2,0,0,java.math.BigDecimal,"If you do use BigDecimal, beware of the BigDecimal(double) constructor, which has surprisingly bad semantics."
19484923,2,0,0,java.math.BigDecimal,(Of course BigDecimal is the preferred datatype for monetary amounts)
19506712,2,0,1,java.math.BigDecimal,NB: I'm using BigDecimal for calculation because double and float has a precision problems.)
19487775,2,1,12,java.math.BigDecimal,"Although you asked about Strings, but I want to add this note: These methods can be very different when BigDecimal is involved."
19487775,2,1,12,java.math.BigDecimal,"For example, see the docs:  equals compares this BigDecimal with the specified Object for equality."
19487775,2,1,12,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal   only if they are equal in value and scale (thus 2.0 is not equal to   2.00 when compared by this method)."
19496020,2,1,10,java.math.BigDecimal,"... or perhaps use BigDecimal instead, if the exact digit values are important to you."
19496020,2,1,10,java.math.BigDecimal,(double is appropriate for natural quantities such as height and weight; BigDecimal is appropriate for financial calculations.
19496020,2,1,10,java.math.BigDecimal,Search for questions on double and BigDecimal for more information about this.)
19496038,2,0,2,java.math.BigDecimal,"The solution here is to use some other data type, such as double or BigDecimal depending on what error tolerance you have."
19521733,2,0,5,java.math.BigDecimal,BigDecimal (and every object in Java) is instantiated via the new operator.
19522041,2,0,3,java.math.BigDecimal,You need to use the other constructor BigDecimal(String val) to get the exact precision: code.
19523931,2,0,0,java.math.BigDecimal,"Two things that would make this easier are to use the NUMERIC column type in Derby, and also use either BigDecimal or BigInteger data types in your Java code, or possibly a long if you're confident that the long can hold the values in your problem domain."
19531855,1,0,0,java.math.BigDecimal,multiple while loop comparison (BigDecimal and > 10 ).
19531855,1,0,0,java.math.BigDecimal,I discovered that I could use BigDecimal() to solve this problem.
19531855,1,0,0,java.math.BigDecimal,"This will make sure that there is a BigDecimal, but will not make sure that the input number is over ten."
19538824,2,1,2,java.math.BigDecimal,Use BigDecimal instead of double.
19562281,1,0,0,java.math.BigDecimal,"Now, if add an instance variable(private PhotoStatus status;) to the entity class Phototo hold these status information, The following error message is shown:  Basic attributes can only be of the following types: Java primitive   types, wrapper of primitive types, String, java.math.BigInteger,   java.math.BigDecimal, java.util.Date, java.util.Calendar,   java.sql.Date, java.sql.Time, java.sql.TimeStamp, byte[], Byte[],   char[], Character[], enums, or any Serializable type."
19568971,1,0,0,java.math.BigDecimal,"Because of all these global changes which would create a lot of ""boilerplate"" code, I came up with the idea to change the implementation of BigDecimal."
19568971,1,0,0,java.math.BigDecimal,"But creating a java.math.BigDecimal didn't help me, because it seems that the ""native"" Java classes are loaded even before my own classes."
19568971,1,0,0,java.math.BigDecimal,"Let's assume that I really want every single BigDecimal in my application to work a bit different, how would I be able to replace the ""official"" BigDecimal?"
19569410,2,0,0,java.math.BigDecimal,"BigDecimal is not final, so you could definitely extend it yourself, and change its behaviour (especially by overriding the divideXXX() methods)."
19569410,2,0,0,java.math.BigDecimal,you also won't have any problems - BigDecimal itself implements Comparable interface and has its own compareTo().
19576494,1,0,1,java.math.BigDecimal,"Why would the results from the db query be ""expecting"" to be a BigDecimal?"
19577850,2,1,5,java.math.BigDecimal,"extends Number> could be of anything that extends Number, such as List<BigDecimal>."
19586738,1,0,1,java.math.BigDecimal,I have to declare and initialize BigDecimal wrapper object several times in project.
19586780,2,0,5,java.math.BigDecimal,Another alternative would be to use the BigDecimal(int) constructor - why bother parsing a string?
19612463,2,1,2,java.math.BigDecimal,The documentation for BigDecimal is silent about how floatValue() rounds.
19606599,2,0,3,java.math.BigDecimal,"Using BigDecimal would have fixed the problem, though, because this data type uses a different representation, which allows 0.1 to be represented exactly."
19616243,1,0,0,java.math.BigDecimal,java.math.BigDecimal does not always work for keeping two decimal places?
19616243,1,0,0,java.math.BigDecimal,Use java.math.BigDecimal   Use java.text.DecimalFormat   Use java.text.NumberFormat   Use java.util.Formatter   Use String.format  Result for these 5 methods are basically consistent.
19616243,1,0,0,java.math.BigDecimal,"However, in some scenarios, java.math.BigDecimal has the different result with other 4 methods."
19616243,1,0,0,java.math.BigDecimal,Take double value 100.0050D for example: It returns 100.00 in my code when using java.math.BigDecimal.
19616243,1,0,0,java.math.BigDecimal,Here comes my question: Is there anything I missed for using java.math.BigDecimal to keep two decimal places with double value in my code below ?
19616243,1,0,0,java.math.BigDecimal,or is it a tiny flaw in class java.math.BigDecimal?
19616337,2,1,4,java.math.BigDecimal,"On the other hand, constructing a BigDecimal using a String works as expected: code."
19616455,2,0,2,java.math.BigDecimal,Nothing to do with BigDecimal at all.
19616455,2,0,2,java.math.BigDecimal,Try initialising your BigDecimal from String representations of the values.
19627857,2,0,0,java.math.BigDecimal,"Use int, long, BigInteger or BigDecimal (with String constructor)"
19627708,2,0,0,java.math.BigDecimal,I would recommend you to use BigDecimal class for more precise calculation. '
19650917,1,0,13,java.math.BigDecimal,How to convert BigDecimal to Double in Java?
19650917,1,0,13,java.math.BigDecimal,How we convert BigDecimal into Double in java?
19650917,1,0,13,java.math.BigDecimal,I have a requirement where we have to use Double as argument but we are getting BigDecimal so i have to convert BigDecimal into Double.
25084718,2,0,5,java.math.BigDecimal,You can convert BigDecimal to double using .doubleValue().
25084718,2,0,5,java.math.BigDecimal,It should always be performed on BigDecimal objects directly.
19650938,2,1,36,java.math.BigDecimal,You need to use the doubleValue() method to get the double value from a BigDecimal object.
19650948,2,0,3,java.math.BigDecimal,Use doubleValue method present in BigDecimal class : code.
19650948,2,0,3,java.math.BigDecimal,Converts this BigDecimal to a double.
19654784,1,0,0,java.math.BigDecimal,I want to convert Sql orderby clause with Case using JOOQ.and BillAmount is of BigDecimal datatype.
19680649,1,0,1,java.math.BigDecimal,"But its saying The method then(TableField<AccountBillRecord,BigDecimal>) is undefined for the type CaseConditionStep<BigDecimal> Same with below code code."
19691151,1,0,2,java.math.BigDecimal,BigDecimal in scala.
19691151,1,0,2,java.math.BigDecimal,"In a word, if we have a BigDecimal(let say val a = BigDecimal(someValue) where someValue is decimal string) the result of operation  code."
19695375,2,1,3,java.math.BigDecimal,"(Though it IS possible to get 1 using a different rounding mode per operation, i.e. BigDecimal(3, roundHalfEven) * (BigDecimal(1, roundUp) / 3)) One thing you can do to control the number comparison is to use a higher precision when performing your arithmetic operations and round to the desired (lower) precision when comparing: code."
19695375,2,1,3,java.math.BigDecimal,"UPDATE To answer your comment, although BigDecimal is arbitrary precision, it is still limited by a precision."
19695375,2,1,3,java.math.BigDecimal,BigDecimal does NOT know that 1 / 3 is 0.33<repeating>.
19695375,2,1,3,java.math.BigDecimal,"If you think about how division works, there's no way for BigDecimal to conclusively know that it's repeating without performing the division to infinite decimal places."
19727924,1,0,0,java.math.BigDecimal,java BigDecimal round up/down automatically.
19727924,1,0,0,java.math.BigDecimal,i have a function that calculates data that creates a BigDecimal format variable and im trying to round up or down accordingly with the results.
19727924,1,0,0,java.math.BigDecimal,"This does not absolutely need to be BigDecimal, i can figure out converting the numbers after i manage to do the rounds up."
19744567,2,0,0,java.math.BigDecimal,"Other comments are correct that you can't expect exact results in floating-point arithmetic, and that usually BigDecimal is the answer."
19744567,2,0,0,java.math.BigDecimal,"However there is no means to compute any non-integer power of a number in BigDecimal since the result may be irrational, at the least."
19747404,1,0,2,java.math.BigDecimal,Why is this division with BigDecimal returning 0?
19747404,1,0,2,java.math.BigDecimal,"163096908 / 512384048.99600077 doesn't equal 0 so why is the expression reciprocalOfPI = reciprocalOfPI.add(numerator.divide(denominator, BigDecimal.ROUND_HALF_UP)); setting reciprocalOfPI to 0?"
19747457,2,1,4,java.math.BigDecimal,BigDecimal is immutable.
19747457,2,1,4,java.math.BigDecimal,"All its ""mutating"" methods return a new BigDecimal, leaving the original one unchanged."
19747652,1,0,3,java.math.BigDecimal,Difference between BigDecimal.ROUND_HALF_UP and RoundingMode.HALF_UP?
19748102,2,0,4,java.math.BigDecimal,"So, the first method using java.math.BigDecimal is unlucky, because it wastes time for loading that class into memory."
19748102,2,0,4,java.math.BigDecimal,Other methods don't have this penalty - BigDecimal is already loaded.
19748069,1,0,1,java.math.BigDecimal,How to convert Apfloat to BigDecimal?
19748069,1,0,1,java.math.BigDecimal,I am using the following code where k is a BigDecimal: code.
19748069,1,0,1,java.math.BigDecimal,"Apfloat seems to have methods like intValue(), doubleValue(), floatValue() but I can't see how I can convert Apfloat to BigDecimal."
19748393,2,1,0,java.math.BigDecimal,BigDecimals are best generated from Strings or using the BigDecimal.valueOf( double) static constructor.
19748393,2,1,0,java.math.BigDecimal,"Calling new BigDecimal(double) is specifically to be avoided, since it generates exact decimal representations of the floating-point bits & can somewhat unpredictably require vast numbers of decimal digits to do so."
19748393,2,1,0,java.math.BigDecimal,"On the other hand, BigDecimal.valueOf( double) and Double.toString( double) have specific logic to represent doubles -> decimal without spurious deep decimalization."
19748393,2,1,0,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
19754539,2,0,5,java.math.BigDecimal,"Your 3.1415... is a double literal, it gets truncated to double precision by the compiler before the BigDecimal even sees it."
19754543,2,0,0,java.math.BigDecimal,You are building a BigDecimal object by using the constructor which takes a double.
19754543,2,0,0,java.math.BigDecimal,"Thus, Java will convert your number to double before building the BigDecimal object."
19754543,2,0,0,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
19754626,2,0,0,java.math.BigDecimal,BigDecimal is accurate enough.
19756952,1,0,0,java.math.BigDecimal,"Given that XMLGregorianCalendar has BigDecimal precision for fractional seconds there's no loss of precision, however I'm not sure what time zone I should set at the XMLGregorianCalendar object given that java.sql.Timestamp is time-zone independent."
19759836,2,0,0,java.math.BigDecimal,Check out java.math.BigDecimal.
19801269,1,0,1,java.math.BigDecimal,The BigDecimal class wasn't doing everything I needed so there are additional checks for leading zeros and trailing zeros in the fractional part because the value must fit with the most simplified representation of the number and follow predictable protocols without any changes.
19801958,1,0,1,java.math.BigDecimal,Format Java BigDecimal as currency with 0 or 2 decimal places.
19801958,1,0,1,java.math.BigDecimal,"In my app, I need to format a BigDecimal object as a String that looks like currency."
19801958,1,0,1,java.math.BigDecimal,I think my question differs from How to print formatted BigDecimal values?
19810712,2,0,2,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal class instead."
19810712,2,0,2,java.math.BigDecimal,Numbers and Strings covers BigDecimal and other useful classes provided by the Java platform.
19815319,2,1,1,java.math.BigDecimal,"For a (IMHO) well designed Number implemenation, look at BigDecimal."
19818537,1,0,22,java.math.BigDecimal,Why is BigDecimal natural ordering inconsistent with equals?
19818537,1,0,22,java.math.BigDecimal,From the Javadoc for BigDecimal:  Note: care should be exercised if BigDecimal objects are used as keys in a SortedMap or elements in a SortedSet since BigDecimal's natural ordering is inconsistent with equals.
19818537,1,0,22,java.math.BigDecimal,"For example, if you create a HashSet and add new BigDecimal(""1.0"") and new BigDecimal(""1.00"") to it, the set will contain two elements (because the values have different scales, so are non-equal according to equals and hashCode), but if you do the same thing with a TreeSet, the set will contain only one element, because the values compare as equal when you use compareTo."
19820125,2,0,2,java.math.BigDecimal,"BigDecimal works by having two numbers, an integer and a scale."
19820125,2,0,2,java.math.BigDecimal,"When you say ""1.0"" and ""1.00"" these are technically different values in BigDecimal notation: code."
19820125,2,0,2,java.math.BigDecimal,"In scientific notation you wouldn't do either of those, it should be 1 x 10 ^ 0 or just 1, but BigDecimal allows it."
19820125,2,0,2,java.math.BigDecimal,"The BigDecimal equals method ignores the object == this check I assume because the intention is that each BigDecimal is treated as a type of number, not like an object."
19820125,2,0,2,java.math.BigDecimal,"Because BigDecimal allows for a specific ""precision"", comparing both the integer and the scale is more or less the same as comparing both the number and the precision."
19820125,2,0,2,java.math.BigDecimal,Although there is a semi-caveat to that when talking about BigDecimal's precision() method which always returns 1 if the BigDecimal is 0.
19820125,2,0,2,java.math.BigDecimal,I suppose it is weird that BigDecimal allows trailing zeroes but this is basically necessary.
19829342,2,0,1,java.math.BigDecimal,In case of BigDecimal different objects can represent same value.
19829342,2,0,1,java.math.BigDecimal,"Thats very like BigDecimal, where same value might have distinct representations."
19818643,2,0,5,java.math.BigDecimal,From the OpenJDK implementation of BigDecimal: code.
19830258,2,0,3,java.math.BigDecimal,However from a comparison perspective neither of the two is greater or less than the other and the Comparable interface requires a total order (i.e. each BigDecimal must be comparable with any other BigDecimal).
19833720,2,0,0,java.math.BigDecimal,"For the floating point types, you can do something very similar with BigDecimal and its unscaledValue() (i.e. mantissa)."
19834316,1,0,0,java.math.BigDecimal,This would print class java.math.BigDecimal but i am interested in getting Test class so i can go to it's divide and fix this bug.
19841496,2,0,1,java.math.BigDecimal,BigDecimal is the best datatype for the float/double.
19859502,1,0,4,java.math.BigDecimal,BigDecimal setScale method working exactly in the opposite way I am expecting.
19859502,1,0,4,java.math.BigDecimal,With RoundingMode.HALF_EVEN (also called Bankers rounding) I was expecting both these values to become the value 265.34 Note that I am not using the BigDecimal.round method on purpose because it also does not what I need.
19859502,1,0,4,java.math.BigDecimal,"This is expected and also explained in BigDecimal setScale and round, but means it's basically useless for my purpose."
19860445,2,0,1,java.math.BigDecimal,You might want to change your code to use BigDecimal.valueOf() instead of new BigDecimal().
19871869,2,0,0,java.math.BigDecimal,"When done, one can get its value as a string or long or other format - or continue to use it as a BigDecimal (necessary if you should ever decide you want a 20 digit long value)."
19929396,1,0,3,java.math.BigDecimal,"""commons-math""-like Implementation for BigDecimal / BigInteger."
19929396,1,0,3,java.math.BigDecimal,I'm looking for suggestions regarding a third-party library to use for statistical analysis on numbers encoded in BigDecimal / BigInteger.
19975967,2,0,2,java.math.BigDecimal,"If you do not know if Integer or Double are big enough for your numbers, use BigDecimal, which is (well theoretically not, but practically) unlimited regarding the range of numbers it can represent."
19978294,1,0,3,java.math.BigDecimal,"You have to use BigDecimal""... Basically I am doing a financial software and we needed to store a lot of prices in memory."
19978294,1,0,3,java.math.BigDecimal,BigDecimal was too big to fit in the cache so we have decided to switch to double.
19978795,2,0,5,java.math.BigDecimal,"Therefore 0.1 == 0.0999999998603016138    As a sidenote, BigDecimal is simply a BigInteger with an int decimal location."
19978366,2,0,11,java.math.BigDecimal,"If you absolutely can't use BigDecimal and would prefer not to use doubles, use longs to do fixed-point arithmetic (so each long value would represent the number of cents, for example)."
19978366,2,0,11,java.math.BigDecimal,"I'd say use joda-money, but this uses BigDecimal under the covers."
19978640,2,0,1,java.math.BigDecimal,"If the size of BigDecimal is too large for your cache, than you should convert amounts to long values when they are written to the cache and convert them back to BigDecimal when they are read."
19978640,2,0,1,java.math.BigDecimal,"If you refuse to use BigDecimal for your application logic, than you will rewrite lots of functionality that BigDecimal already provides."
20012957,1,0,0,java.math.BigDecimal,Is it not possible to store BigDecimal values in a single-dimensional array.
20012957,1,0,0,java.math.BigDecimal,My goal is store BigDecimal values as I input them through the Scanner class.
20012957,1,0,0,java.math.BigDecimal,I want to store BigDecimal numbers into an array so that I can sort them numerically.
20012957,1,0,0,java.math.BigDecimal,I want BigDecimal values because the decimal precision is important to me.
20022563,2,0,0,java.math.BigDecimal,"To get around that, use a BigDecimal instead, with a precision of 2: code."
20029237,2,0,6,java.math.BigDecimal,"You should use float (or better: double), unless the salary is nullable (you should also consider using BigDecimal to deal with exact money amounts)."
20054265,2,0,1,java.math.BigDecimal,"Also, you can look into using BigDecimal or DecimalFormat."
20054265,2,0,1,java.math.BigDecimal,BigDecimal is a class that can handle many decimal places with significant accuracy.
20086919,2,1,1,java.math.BigDecimal,Use BigDecimal or keep an integer number of cents.
20091723,1,0,4,java.math.BigDecimal,How do I check if a BigDecimal is in a Set or Map in a scale independent way?
20091723,1,0,4,java.math.BigDecimal,"BigDecimal's equals() method compares scale too, so code."
20091723,1,0,4,java.math.BigDecimal,"Now, suppose I have a Set<BigDecimal>, how do I check if 0.2 is in that Set, scale independent?"
20092038,2,1,6,java.math.BigDecimal,"It is different from most sets as it will decide equality based on the compareTo() method as opposed to equals() and hashCode():  a TreeSet instance performs all element comparisons using its compareTo (or compare) method  And since BigDecimal.compareTo() compares without regard to scale, that's exactly what you want here."
20092082,2,0,0,java.math.BigDecimal,You should use BigDecimal for this.
20102975,1,0,3,java.math.BigDecimal,I am trying to add some convenience methods to Java's BigDecimal and create a CustomBigDecimal class.
20102975,1,0,3,java.math.BigDecimal,And all the methods of the superclass return a BigDecimal.
20102975,1,0,3,java.math.BigDecimal,"But if I go with the second approach, I have to write every method of BigDecimal."
20103252,2,0,0,java.math.BigDecimal,"But if I go with this approach, I have to implement every method of   BigDecimal."
20103298,2,1,4,java.math.BigDecimal,"If you aren't actually changing the representation of BigDecimal itself, and are just adding some helper methods, then you can have another class that contains your helper methods statically."
20103583,2,0,0,java.math.BigDecimal,"However, if you really wanted to do this, just ""override"" the methods of BigDecimal that return a BigDecimal code."
20103583,2,0,0,java.math.BigDecimal,"The problems with this are that all of your new CustomBigDecimal-returning methods won't actually override BigDecimal's version, and that you'll need to override every constructor (there are a lot), plus an extra CustomBigDecimal(BigDecimal abs) You can hopefully see how messy this is, and why I think you should go with Vandale's answer"
20115521,1,0,4,java.math.BigDecimal,BigDecimal has scientific notation in soap message.
20115521,1,0,4,java.math.BigDecimal,"Apache CXF generate proxy classes for me, and this field is BigDecimal."
20120105,2,0,0,java.math.BigDecimal,"In generated class BigDecimal field has got annotation @XmlJavaTypeAdapter(Adapter1 .class), and it resolved problem."
20116974,2,1,2,java.math.BigDecimal,BigDecimal has a constructor which takes input number as a string.
20124870,1,0,1,java.math.BigDecimal,jaxb unmarshalls java.lang.Long and java.math.BigDecimal in a different way.
20124870,1,0,1,java.math.BigDecimal,"So, the problem is: when the bigDecimalSetter is called, I cannot tell if the reason is xsi:nil=""true"", or the value of the tag is invalid (not a BigDecimal)."
20126152,1,0,0,java.math.BigDecimal,Converting a decimal number to full integer - is BigDecimal overkill?
20126152,1,0,0,java.math.BigDecimal,Is usage of BigDecimal an overkill in this situation?
20136378,2,0,0,java.math.BigDecimal,"If this is a big issue, see the BigDecimal class."
20136402,2,0,0,java.math.BigDecimal,"If you need to perform monetary calculations on currencies with decimals (the vast majority of them) , use BigDecimal"
20141465,2,1,4,java.math.BigDecimal,"Common Java types such as byte, BigDecimal, and Calendar are   supported."
20169039,2,0,0,java.math.BigDecimal,"You need to supply it a BigDecimal instead :) So in the arguemnts, supply that instead of ""double"" for ""p""."
20169039,2,0,0,java.math.BigDecimal,"Java uses this thing called ""static checking"" which means even as you're typing, it can tell that, if for example, you have a variable declared as a BigDecimal, and you try to set it equal to a variable of another type, then there's an error."
20177034,2,0,0,java.math.BigDecimal,"Yes, BigDecimal, I am looking at you."
20190381,2,0,1,java.math.BigDecimal,"If you really NEED 2 decimals, use BigDecimal You basically have 4 options:  return a float and deal with the fact that there are n decimal places format to a String (which means a lot of string parsing if you need to do calculation) convert to use BigDecimal convert to use int and assume that the ones digit represents hundredths."
20207198,1,0,0,java.math.BigDecimal,BigDecimal Exponentiation.
20207198,1,0,0,java.math.BigDecimal,"I am making a custom BigDecimal class (for practice and out of boredom) and have custom-made algorithms for addition, subtraction, multiplication, and division, and I would like to make a function for exponentiation, but since a power with a decimal part involves n-roots, I can think of no simple way to exponentiate."
20207198,1,0,0,java.math.BigDecimal,"), one of which is the integer part (BigInteger BigDecimal.ipart) of the number and the other is the fraction part (BigInteger BigDecimal.fpart.)"
20207198,1,0,0,java.math.BigDecimal,"It also contains boolean BigDecimal.negative and long BigDecimal.precission, which defines how precise to be in division."
20207198,1,0,0,java.math.BigDecimal,Note: The two .java files can be found here.. BigInteger.java & BigDecimal.java
20209001,1,0,0,java.math.BigDecimal,"For example, java.math.BigDecimal constructor can accept number, String and etc."
20240379,2,0,2,java.math.BigDecimal,"Yes, you're using BigDecimal at the end, but only after already destroying data by putting it in doubles."
20240379,2,0,2,java.math.BigDecimal,Use BigDecimal for every step of the way.
20240381,2,1,2,java.math.BigDecimal,"If you need the precision of BigDecimal, you need to use it for all calculations."
20240381,2,1,2,java.math.BigDecimal,"It is not sufficient to convert the result from double to BigDecimal at the end, because the precision is gone by then."
20240381,2,1,2,java.math.BigDecimal,"You need to convert all your aX variables to BigDecimal, and replace operators with calls to the corresponding methods of BigDecimal class: code."
20247810,2,0,0,java.math.BigDecimal,"For numeric rounding (producing the rounded number), use BigDecimal: code."
20250725,1,0,1,java.math.BigDecimal,prints 1.0715086071862673E301 Things I have tried I have tried to expand this number by using BigDecimal Class: code.
20257637,2,0,0,java.math.BigDecimal,"If you want to see the actual value of a double, use the BigDecimal(double) constructor."
20257637,2,0,0,java.math.BigDecimal,"System.out.println(new BigDecimal((Math.pow(2, 1000)))) outputs 10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376 Math.pow(2,1000) is exactly representable in double, because it is a power of two that is in the representable range."
20250783,2,1,10,java.math.BigDecimal,"You can't mix and match Math, primitive types and BigDecimal like that, if you want real precision, just use BigDecimal only: code."
20252774,1,0,1,java.math.BigDecimal,Does this have something to do with it being cast to a big BigDecimal?
20275430,2,0,0,java.math.BigDecimal,Consider using a BigDecimal.
20301377,2,1,2,java.math.BigDecimal,see: Round a double to 2 decimal places edit: as a response to the caveat below: This code isn't truely precise; follow the link for a more accurate version (in short: convert it to a BigDecimal and use .setScale())
20330329,2,0,2,java.math.BigDecimal,When you need precision: use BigDecimal instead of double.
20330329,2,0,2,java.math.BigDecimal,Refer to this question for more details: Double vs. BigDecimal?
20330437,2,0,4,java.math.BigDecimal,"x=%.1f"", i, a);) or you can fix your numbers by using BigDecimal instead of double."
20376873,2,1,1,java.math.BigDecimal,"You can let yourself be guided by the BigDecimal class for the naming convention: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html But if you want to use ""plus"" in stead of ""add"" - why not?"
20385856,2,0,0,java.math.BigDecimal,Use BigDecimal for more accurate rounding and scaling.
20388175,2,0,0,java.math.BigDecimal,BigDecimal is recommended for currency though.
20403771,1,0,0,java.math.BigDecimal,How to convert currency formatted String back to a BigDecimal?
20403771,1,0,0,java.math.BigDecimal,"In my Android app I've got an EditText from which I take a number, and convert that to a BigDecimal, and from there to a local Currency formatting: code."
20403771,1,0,0,java.math.BigDecimal,"I now however, want to convert this back into a BigDecimal."
20403771,1,0,0,java.math.BigDecimal,Is there a way that I can convert a locally formatted currency string back to a BigDecimal?
20404026,2,0,0,java.math.BigDecimal,In your code example you don't assign BigDecimal to something so you cant convert it back.
20406228,2,0,3,java.math.BigDecimal,"If precision is of importance in this scenario, try using BigDecimal instead"
20433980,2,0,0,java.math.BigDecimal,"You can still print them out to the console by doing System.out.println(dTotal); Probably out of scope, but if you plan on dealing with money in a serious business app, you should check into the BigDecimal class because of tiny rounding errors that can occur with doubles and floats."
20442893,2,0,0,java.math.BigDecimal,You may want to see the API to see all the other fun things you can do with BigDecimal.
20443683,2,0,0,java.math.BigDecimal,BigInteger or BigDecimal will help you code.
20443692,2,0,0,java.math.BigDecimal,"If you do need the floating point, then use double or BigDecimal"
20443697,2,1,0,java.math.BigDecimal,"You can use the BigDecimal class, keep in mind that you should always create from a String if you want consistent behaviour (and don't want to read up that much about the documentation)."
20444568,1,0,2,java.math.BigDecimal,BigDecimal doesn't calculate divide.
20444631,2,0,3,java.math.BigDecimal,"It is possible that the app is crashing, because BigDecimal.toString() does something unexpected."
20444631,2,0,3,java.math.BigDecimal,"In any way, I would consider using BigDecimal with the String constructor, such that no rounding errors occur: code."
20444631,2,0,3,java.math.BigDecimal,Also write new BigDecimal(x) instead of new BigDecimal (x).
20521983,2,1,1,java.math.BigDecimal,"Also note that you should create the BigDecimal directly from String, as float is not a precise representation."
20450389,1,0,0,java.math.BigDecimal,How do you use BigDecimal correctly for variables?
20450389,1,0,0,java.math.BigDecimal,After googling the issue I came up with the BigDecimal class.
20450389,1,0,0,java.math.BigDecimal,If it is possible to solve this without using BigDecimal then by all means use it.
20453788,1,0,0,java.math.BigDecimal,"It only says it supports the following types:  BigDecimal BigInteger CharSequence byte, short, int, long, and their respective wrapper types  However, I tested it many times against Double fields in  my entities and I found that it works well!"
20466337,2,1,1,java.math.BigDecimal,This is done by creating a BigDecimal from the string representation of the given number.
20463228,2,0,2,java.math.BigDecimal,"Use BigDecimal instead, which supports the formatting approach you seek."
20463228,2,0,2,java.math.BigDecimal,This question details it: How to print formatted BigDecimal values?
20494206,2,0,2,java.math.BigDecimal,Try using BigDecimal.
20494283,2,0,0,java.math.BigDecimal,use BigDecimal  You can understand the issue here.
20504452,2,0,0,java.math.BigDecimal,"Finally, Java has the arbitrary precision BigDecimal class."
20504452,2,0,0,java.math.BigDecimal,"However it cannot represent every fraction perfectly either, consider the Golden ratio; BigDecimal will throw an exception if you try to calculate"
20506291,1,0,1,java.math.BigDecimal,"I did look into how BigDecimal handles Number and Serializable in an effort to determine the ""right"" way to address this question."
20506291,1,0,1,java.math.BigDecimal,"However, both the JavaDoc and the source code I have been able to examine reveals BigDecimal does not provide a ""no-args"" constructor despite having extended Number."
20506630,2,1,0,java.math.BigDecimal,"What Sun did for BigDecimal was providing readObject and writeObject methods , see here for further details."
20511845,1,0,3,java.math.BigDecimal,"Question2: if i define a BigDecimal type in my action  BigDecimal number1; Then my page should using a format to show this value, 1.if number1=null then show  -NIL- 2.if number1=0    then show  -NIL- 3.if number1>0    then show   1.00,3434.98 ..... please ignore number<0 Question3: change number1 to a String, 1.if number1=null or empty or blank     then show  -NIL- 2.if number1=Hello                      then show   Hello .... could you give me help,thanks!"
20515198,1,0,0,java.math.BigDecimal,Exception when maps java.math.BigDecimal to DB2 Numeric data type.
20515198,1,0,0,java.math.BigDecimal,For that table I make an entity class and I set a BigDecimal property for the primary key.
20515198,1,0,0,java.math.BigDecimal,For some reason BigDecimal is not mapped correctly to numeric when native insert is used.
20521557,1,0,2,java.math.BigDecimal,"String format BigDecimal to show either zero or two decimal places, never one."
20521557,1,0,2,java.math.BigDecimal,"I need no decimal places to show if there are none in the BigDecimal, but two decimal places to show if there are some (even if it's only 10s) e.g."
20546053,1,0,3,java.math.BigDecimal,BigDecimal rounding mode issue.
20546053,1,0,3,java.math.BigDecimal,I need to get these results using BigDecimal roundingmode.xxx and setScale(2) :  code.
20548427,2,1,0,java.math.BigDecimal,The problem is when I was multiplying two BigDecimal numbers I got a big result.
20548427,2,1,0,java.math.BigDecimal,"The wrong result ""2.89500004313886165618896484375"".setScale(2, BigDecimal.ROUND_HALF_DOWN); I need 2.89 and the wrong result was 2.90 Using .round(new MathContext(2)) I got it :  ""2.89500004313886165618896484375"".round(new MathContext(2)); The right result is 2.89"
20550657,1,0,1,java.math.BigDecimal,Big Decimal Round to two decimals ALWAYS (even if my BigDecimal object has no decimals)?
20550657,1,0,1,java.math.BigDecimal,How can I round BigDecimal objects to 2 decimals always (even if my BigDecimal object has no decimals)?
20594780,2,0,0,java.math.BigDecimal,Use BigDecimal instead to avoid rounding errors.
20587493,2,0,1,java.math.BigDecimal,It seems like you're doing the Euler project problem #16 : Use BigDecimal to store your number and avoid overflow : code.
20589386,2,0,4,java.math.BigDecimal,"Additionally, strongly consider using BigDecimal instead of either float or double to store currency values."
20591905,2,0,0,java.math.BigDecimal,I would do something like this (note you can have as many digits of precision as you like) utilizing BigDecimal.
20593777,2,0,0,java.math.BigDecimal,"If you really want to do it like that, then use BigDecimal."
20593777,2,0,0,java.math.BigDecimal,Take a look at them:  http://voidexception.weebly.com/java-bigdecimal---dealing-with-high-precision-calculations.html http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html http://www.javaworld.com/article/2075315/core-java/make-cents-with-bigdecimal.html  Default IEEE 746 floating points will not suit your needs.
20593809,2,1,4,java.math.BigDecimal,I suggest using double or BigDecimal use operation which involve values which can be accurately represented.
20623952,2,0,0,java.math.BigDecimal,If it really is a big deal to you that the actual number represented be accurate to sigfigs > ~8 than consider using BigDecimal as you will never lose any precision.
20624474,2,0,0,java.math.BigDecimal,"If you are not allowed to use System.out.printf() to solve the problem, then your only choice is to use BigDecimal objects to hold the values."
20624108,2,0,0,java.math.BigDecimal,"If you're going to do arithmetic with exact decimals, and expect the right answers, you should use the BigDecimal class instead of double."
20640295,2,0,2,java.math.BigDecimal,I think it's better to use BigDecimal type instead of Double.
20644000,2,1,1,java.math.BigDecimal,You can use NumberFormat#getCurrencyInstance(Locale) in order to format currency for BigDecimal.
20645922,1,0,1,java.math.BigDecimal,How do force BigDecimal from rounding in JUnit assertEquals?
20645922,1,0,1,java.math.BigDecimal,"Everytime I run my assertEquals, my expected BigDecimal is being rounded which causes it to fail."
20645947,2,0,13,java.math.BigDecimal,Put it in quotation marks and use the BigDecimal constructor.
20645947,2,0,13,java.math.BigDecimal,"If you don't do this, the number gets converted to a double first, and then to a BigDecimal, because 1321.507369947139705200000 is a double literal."
20657506,2,0,5,java.math.BigDecimal,"The more accurate your calculation needs to be, the more you should lean towards using double and eventually BigDecimal."
20657306,2,1,3,java.math.BigDecimal,"Else BigDecimal is just a simple backdoor to your problem, use it if you want more precision"
20671058,1,0,1,java.math.BigDecimal,Higher `scale` in `BigDecimal#divide()` is faster?
20671058,1,0,1,java.math.BigDecimal,The original question: How much does a higher scale in BigDecimal#divide() affect performance?
20671058,1,0,1,java.math.BigDecimal,It appears that a scale of 10 is optimal for BigDecimal#divide()?
20683665,1,0,1,java.math.BigDecimal,Declare Initial Value of BigDecimal Array in Java.
20683665,1,0,1,java.math.BigDecimal,I want to declare a BigDecimal Array with initial value 0 like this: code.
20683665,1,0,1,java.math.BigDecimal,Please help me to know how to declare BigDecimal array with initial value.
20683778,2,0,0,java.math.BigDecimal,"You can use Arrays.fill(Object[], Object) with BigDecimal.ZERO, because BigDecimal's are immutable."
20683684,2,0,1,java.math.BigDecimal,"BigDecimal is an object, not a primitive type, so you need to create new instances of the object in order to fill an array with them."
20683686,2,0,2,java.math.BigDecimal,You can use the predefined BigDecimal.ZERO constant: code.
20683719,2,1,10,java.math.BigDecimal,"I would use Arrays.fill() as that will would for any number of zeros (or any other BigDecimal value you like)  This works because BigDecimal is immutable, don't do this for mutable values ;) code."
20700841,1,0,1,java.math.BigDecimal,Right way to convert of BigDecimal to String.
20700941,2,0,0,java.math.BigDecimal,"For two reasons:  Using String.valueOf better conveys your intent: you obviously try to get the String representation of a BigDecimal value; abusing String concatenation requires a little more mental effort to understand what you are trying to do It may be faster: Using concatenation will internally create a StringBuilder, which concatenates two Strings and then calls toString() onto itself (though the compiler may be clever enough to get rid of these unnecessary operations)"
20701056,2,0,0,java.math.BigDecimal,I think is better use BigDecimal#toString method.
20701056,2,0,0,java.math.BigDecimal,"If that   string representation is converted back to a BigDecimal using the   BigDecimal(String) constructor, then the original value will be   recovered."
20701081,2,0,0,java.math.BigDecimal,Using BigDecimal doesn't bring back the precision lost in double If you need more than 15 digits of accuracy you need to use String and BigDecimal.
20700901,2,0,3,java.math.BigDecimal,You can use BigDecimal#toString to convert a BigDecimal to string
20700916,2,0,0,java.math.BigDecimal,"When you know that your BigDecimal is non-null (as in your example), you should just use toString."
20700916,2,0,0,java.math.BigDecimal,"By the way, be careful with the BigDecimal(double) constructor."
20700916,2,0,0,java.math.BigDecimal,"The safer approach is to use  new BigDecimal(""12.3434379328948927894789237"") in your example."
20700916,2,0,0,java.math.BigDecimal,The reason why BigDecimal(double) is unpredicable is explained in its Javadoc comment.
20704938,2,1,3,java.math.BigDecimal,"I tested the code above with the following main (you wil have to provide a BigDecimal getTotalValue() method, in my case I just returned a constant BigDecimal): code."
20703797,2,0,1,java.math.BigDecimal,"A full description of why can be found here: http://en.wikipedia.org/wiki/Single-precision_floating-point_format You can use things such as BigDecimal to store any precision of number without this issue, however it will run much slower so you have a trade-off of precision vs performance."
20711223,1,0,2,java.math.BigDecimal,How to unmarshall rate value to BigDecimal?
20711419,2,1,0,java.math.BigDecimal,Formatter Object You will need to create a class with methods that can convert the string to/from BigDecimal.
20711419,2,1,0,java.math.BigDecimal,External Bindings Document (bindings.xml) An external binding document is used to specify that your custom conversion class should be used when converting the XML string to/from your BigDecimal property.
20712792,1,0,4,java.math.BigDecimal,How to limit BigDecimal to a fixed fractions amount?
20712792,1,0,4,java.math.BigDecimal,I'm trying to create a BigDecimal class that has always a fixed maximum fractions count.
20712853,2,0,2,java.math.BigDecimal,"One   might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
20712853,2,0,2,java.math.BigDecimal,"It then converts that non-precision floating-point number to a precision BigDecimal, which then puts it out as a precise number."
20712853,2,0,2,java.math.BigDecimal,"It works if the input is a String, however, since a String is just text, and converts the string directly to a BigDecimal."
20712853,2,0,2,java.math.BigDecimal,"See this from here:  Creating a big decimal from a (scalar) double is simple:  bd = new BigDecimal(1.0);    To get a BigDecimal from a Double, get its   doubleValue() first."
20712853,2,0,2,java.math.BigDecimal,"However it is a good idea to use the string constructor:   bd = new BigDecimal(""1.5""); If you don't, then you'll get the following, bd = new BigDecimal(1.5); bd.toString(); // => 0.1499999999999999944488848768742172978818416595458984375  So do it like this:  code."
20712853,2,0,2,java.math.BigDecimal,"Also, as @JBNizet points out, you're extending an immutable object, a BigDecimal."
20712875,2,1,4,java.math.BigDecimal,"BigDecimal is immutable, and should not be extended."
20712875,2,1,4,java.math.BigDecimal,setScale() does not modify the BigDecimal instance.
20712875,2,1,4,java.math.BigDecimal,"It returns a copy of the BigDecimal instance with the scale modified (as every other ""mutating"" method of BigDecimal, since it's immutable)."
20712875,2,1,4,java.math.BigDecimal,"Instead of extending BigDecimal, create a factory method: code."
20727894,2,0,2,java.math.BigDecimal,The only way to make it work is to either convert the result to a BigDecimal or a String and then compare that or to define an allowed error - i.e.: code.
20743886,2,0,1,java.math.BigDecimal,SQL      JDBC/Java                     setXXX             getXXX NUMERIC    java.math.BigDecimal        setBigDecimal         getBigDecimal change rs.getInt(1);  to rs.getBigDecimal(1); (or) type cast number to integer in sql like below for oracle: CAST(id AS integer)
20772583,2,0,3,java.math.BigDecimal,In java you can use:  BigInteger: for numbers without decimal values BigDecimal: for numbers with decimal values
20772587,2,1,12,java.math.BigDecimal,And BigDecimal
20774951,1,0,1,java.math.BigDecimal,"BigDecimal string formatting with thousands separator (###.###,##)."
20774951,1,0,1,java.math.BigDecimal,I have a BigDecimal whose value I'd like to convert to a string and NOT lose any precision.
20774985,2,0,0,java.math.BigDecimal,"To be on the safe side, you could multiple your BigDecimal by 100."
20785567,2,0,2,java.math.BigDecimal,"You're passing it a boxed Double, so x is autounboxed, then explicitly boxed by Double.valueOf, then autounboxed again to pass it to new BigDecimal."
20785567,2,0,2,java.math.BigDecimal,This will autounbox x once to pass it to the BigDecimal constructor.
20785735,1,0,0,java.math.BigDecimal,java.lang.ClassCastException-((BigDecimal)myObj[1]).longValue().
20785750,2,1,3,java.math.BigDecimal,The reason is that obj is not an array or that myObj[1] is not a BigDecimal.
20785758,2,0,2,java.math.BigDecimal,Because myObj[1] is not a BigDecimal.
20785762,2,0,1,java.math.BigDecimal,You are trying to cast an unSupported Object type to a BigDecimal object.
20785762,2,0,1,java.math.BigDecimal,i.e. myObj[1] is not a BigDecimal instance.
20785767,2,0,3,java.math.BigDecimal,"Thus, your program compiles but crashes because.. myObj[1] is not a BigDecimal, you fooled the compiler and now his best friend (the JVM) is angry."
20785807,2,0,2,java.math.BigDecimal,"Never work with Raw type Collection: declare your collection with proper Generic types of your case: List<BigDecimal[]> myObj is not likely a BigDecimal[] object, hence a ClassCastException can occur."
20797691,2,0,1,java.math.BigDecimal,"If BigDecimal is not an option, this is a good way to compare double values: http://stackoverflow.com/a/8081911/3115739"
20803352,2,0,0,java.math.BigDecimal,Use  BigDecimalinstead of Double Because of  BigDecimal consists of an arbitrary precision integer unscaled value & 32-bit integer scale.
20803352,2,0,0,java.math.BigDecimal,The value of the number represented by the BigDecimal is therefore (unscaledValue × 10-scale).
20803352,2,0,0,java.math.BigDecimal,Read more:http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
20803051,2,1,9,java.math.BigDecimal,Consider using BigDecimal instead.
20814609,1,0,3,java.math.BigDecimal,How to store infinity in a BigDecimal (Java)?
20814609,1,0,3,java.math.BigDecimal,I am writing algorithms inside methods that return BigDecimal values but now and again the result calculated will be + or - infinity.
20814609,1,0,3,java.math.BigDecimal,eg Double.POSITIVE_INFINITY; So how do I store infinity in a BigDecimal?
20814639,2,1,5,java.math.BigDecimal,BigDecimal doesn't have the concept of infinity.
20814639,2,1,5,java.math.BigDecimal,"If you're already using null for something else, you could have a BigDecimal instance that doesn't actually contain infinity, but which you pretend containts it, and use == to check against it."
20820362,2,0,1,java.math.BigDecimal,"Except that the generic version can, for example, take BigDecimal as an argument which will of course not provide a reliable result (see BigDecimal#doubleValue)."
20826555,1,0,1,java.math.BigDecimal,Convert BigDecimal to String in Array.
20826555,1,0,1,java.math.BigDecimal,"The .toString() method does work on BigDecimal, but I can't seem to get it to work when I'm looping through an array and referencing it with array[i]."
20826616,2,0,1,java.math.BigDecimal,"You cannot cast a BigDecimal to a String using an explicit cast, simply because a BigDecimal is not a String."
20876540,2,1,1,java.math.BigDecimal,Add Custom Serializer for BigDecimal values.
20863081,2,0,2,java.math.BigDecimal,"Double does not have infinite precision (Neither does BigDecimal, but BigDecimal has sufficient precision for this implementation)."
20863833,2,0,2,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
20875740,2,0,0,java.math.BigDecimal,It is recommended to use BigDecimal to ensure precision while arithmetic operations.
20881724,1,0,2,java.math.BigDecimal,"EDIT: I get distinctBnumberRatio from user in a textfield so it will be a String, however in my bean it is a BigDecimal."
20896322,1,0,0,java.math.BigDecimal,In my bean it's a BigDecimal.
20896322,1,0,0,java.math.BigDecimal,I mean how to convert from String to BigDecimal in struts2?
20896819,2,0,1,java.math.BigDecimal,how to convert from String to BigDecimal  The BigDecimal(java.lang.String) constructor takes String argument.
20896819,2,0,1,java.math.BigDecimal,Translates the string representation of a BigDecimal into a BigDecimal.
20896819,2,0,1,java.math.BigDecimal,Update Answer to you comment  String in JSP to BigDecimal in ActionClass    From docs TypeConversion-BuiltinTypeConversionSupport  Type Conversion is implemented by XWork.
20896819,2,0,1,java.math.BigDecimal,"This includes support for converting to and from Strings for each of the following:  String boolean / Boolean char / Character int / Integer, float / Float, long / Long, double / Double dates - uses the SHORT format for the Locale associated with the current request arrays - assuming the individual strings can be coverted to the individual items collections - if not object type can be determined, it is assumed to be a String and a new ArrayList is created  Enumerations BigDecimal and BigInteger    Note that with arrays the type conversion will defer to the type of the array elements and try to convert each item individually."
20898712,2,0,0,java.math.BigDecimal,This is not a valid constructor for BigDecimal.
20907923,1,0,1,java.math.BigDecimal,JPA @Size annotation for BigDecimal.
20907923,1,0,1,java.math.BigDecimal,"I'm using BigDecimal, but when I try to include the @Size max it doesn't work."
20909523,2,1,4,java.math.BigDecimal,You can add more precision (but not infinite) by using BigDecimal.
20909967,1,0,1,java.math.BigDecimal,Follow-up to BigDecimal new or valueof.
20909967,1,0,1,java.math.BigDecimal,This question is a follow up to the question (BigDecimal - to use new or valueOf) and its accepted answer.
20909967,1,0,1,java.math.BigDecimal,To reiterate the question and answer for convenience: BigDecimal has two methods: code.
20909967,1,0,1,java.math.BigDecimal,"In the answer, the answerer states :  In general, if the result is the same (i.e. not in the case of BigDecimal, but in most other cases), then valueOf() should be preferred: it can do caching of common values (as seen on Integer.valueOf()) and it can even change the caching behaviour without the caller having to be changed."
20909967,1,0,1,java.math.BigDecimal,"My question is: can we get some practical examples of when, specifically, we should use BigDecimal.valueOf() and when we should use new BigDecimal() ??"
20909967,1,0,1,java.math.BigDecimal,for BigDecimal.
20910082,2,1,9,java.math.BigDecimal,"Firstly, any time you convert from a double to BigDecimal you should take a step back and ask yourself whether you're really doing the right thing to start with."
20910082,2,1,9,java.math.BigDecimal,"For example, if you've done this by parsing from a String to a double, then you should probably go straight from a String to a BigDecimal."
20910082,2,1,9,java.math.BigDecimal,"Beyond that, they do different things: the constructor gives a BigDecimal which represents the exact same number as the double; valueOf gives a BigDecimal which represents the number given by the double value's canonical string representation."
20910701,2,0,0,java.math.BigDecimal,Look at the sources of BigDecimal and it is kind of obvious that passing a double into valueOf is less efficient than calling the constructor
20915732,2,0,2,java.math.BigDecimal,"I could construct a false positive with BigDecimal: new BigDecimal(""0.000..<repeats 380 times>..001"").doubleValue() == 0 If that is a problem for you, you might want to add a special case for BigDecimal."
20950284,2,0,0,java.math.BigDecimal,You don't know the type of the numbers you sum so either use next.doubleValue() if you can tolerate precision loss or have a look at BigDecimal if you want to keep precision (use the String constructor).
20950388,2,0,1,java.math.BigDecimal,"If all the numbers are of the same (unknown) type, then you don't need to check every element, just get type of first and choose corresponding loop to calculate sum in either double, long, BigDecimal or BigInteger."
20953044,2,0,1,java.math.BigDecimal,BigDecimal (not a BigInteger though) could be a good choice.
20953044,2,0,1,java.math.BigDecimal,"I do not have a definitive choice for you, but you could try something like this:  initialise the value for your result as BigDecimal zero; compute a sum of next M elements and divide it by N where N is the total number of elements and M<N."
20962209,1,0,0,java.math.BigDecimal,How can the scale of a BigDecimal be validated?
20962209,1,0,0,java.math.BigDecimal,We currently have some code for validating a string as a BigDecimal of the correct scale that looks like: code.
20968838,2,1,1,java.math.BigDecimal,"Floats are approximations in Java if you need exact numbers, especially when working with money use BigDecimal."
20968877,2,0,1,java.math.BigDecimal,If you want accurate floating point computations then use the BigDecimal class instead of  float or double.
20968877,2,0,1,java.math.BigDecimal,A BigDecimal is an exact way of representing numbers.
20968877,2,0,1,java.math.BigDecimal,With BigDecimal this would not happen.
20968877,2,0,1,java.math.BigDecimal,"The BigDecimal class gives its user complete control over rounding   behavior, forcing the user to explicitly specify a rounding behavior   for operations capable of discarding precision (divide and setScale)."
20968877,2,0,1,java.math.BigDecimal,Two types of   operations are provided for manipulating the scale of a BigDecimal:   scaling/rounding operations and decimal point motion operations.
20968877,2,0,1,java.math.BigDecimal,"Scaling/Rounding operations (SetScale) return a BigDecimal whose value   is approximately (or exactly) equal to that of the operand, but whose   scale is the specified value; that is, they increase or decrease the   precision of the number with minimal effect on its value."
20968877,2,0,1,java.math.BigDecimal,"Decimal   point motion operations (movePointLeft and movePointRight) return a   BigDecimal created from the operand by moving the decimal point a   specified distance in the specified direction; that is, they change a   number's value without affecting its precision."
20990879,2,0,0,java.math.BigDecimal,The wrapper classes BigDecimal and BigInteger are not one of the primitive wrapper classes and are mutable.
21014848,2,0,0,java.math.BigDecimal,"In my life, working with currency, for example, I have had the best results working with BigDecimal"
21035564,2,0,1,java.math.BigDecimal,But you could support arbitrary precision by using a BigDecimal like so - code.
21035564,2,0,1,java.math.BigDecimal,"For example, BigDecimal#toBigInteger() and (long) bravo (which is a cast, not rounding; but has the same practical effect as a floor() function)."
21050502,1,0,1,java.math.BigDecimal,Let's assume that there a field of type BigDecimal in an action class as follows.
21052727,2,0,2,java.math.BigDecimal,Depending on the size of the data set BigDecimal instantiated from an imported String representation might be an easy and accurate option.
21063438,2,0,1,java.math.BigDecimal,"If we want to get a NUMBER as a specific java type, we need to use an appriopriate getXXX method from the ResultSet interface, for example: getInt retrieves the number as java int--> http://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getInt%28int%29 getLong retrieves the number as java long --> http://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getLong%28int%29 getDouble retrieves the number as java long --> http://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getDouble%28int%29 getBigDecimal retrieves the number as java BigDecimal --> http://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getBigDecimal%28java.lang.String,%20int%29  This is your - the developer - responsibility to choose the proper method for your data."
21096472,1,0,0,java.math.BigDecimal,Convert to correct BigDecimal representation.
21096472,1,0,0,java.math.BigDecimal,I have a string being returned as a data feed which I need to convert to the correct BigDecimal format - the string is of the format  1.6945E3 and needs to translate to 1694.50 but instead translates only to 1694.5 leading to loss of information.
21096472,1,0,0,java.math.BigDecimal,I am just passing the string and doing a new on a instance of BigDecimal.
21105286,2,1,1,java.math.BigDecimal,"If so, I'd advise using BigDecimal instead of doubles for precision Double vs. BigDecimal?"
21110407,2,0,0,java.math.BigDecimal,You could use BigDecimal to handle the values.
21110407,2,0,0,java.math.BigDecimal,BigDecimal preserves trailing zeroes.
21108235,2,0,2,java.math.BigDecimal,"Non-GUI Classes to consider:  Stock classes with String name, double (or BigDecimal) value, String abbreviated name Player that holds a String for name, a HashMap<Stock, Integer> for Stocks held and number of shares."
21131382,2,0,0,java.math.BigDecimal,Try using BigDecimal instead of primitves and Objects like double and Float.
21140055,1,0,0,java.math.BigDecimal,"BigDecimal is converted to Integer Date is converted to String Kindly, help me to maintain the datatype of the object array without using POJO class, i need to return a multi dimension array of object from my server to the client."
21150976,2,0,0,java.math.BigDecimal,"So even if you convert your double to a BigDecimal or a BigInteger, your answer is very likely to be incorrect."
21150976,2,0,0,java.math.BigDecimal,"Unfortunately, BigDecimal doesn't have square roots built in."
21150938,2,1,3,java.math.BigDecimal,"To retain precision, consider converting it to a BigInteger or BigDecimal instead."
21163332,2,1,2,java.math.BigDecimal,BigDecimal#compareTo(...) in Double#compareTo(...) out: code.
21163144,1,0,0,java.math.BigDecimal,How do I use BigDecimal's setScale to get two digits precision.
21165082,1,0,1,java.math.BigDecimal,"I want to assert that the result is 5, or at least nearly 5 within a reasonable delta interval, but I don't care whether it's an Integer, Long, Double, BigDecimal, or whatever."
21185150,1,0,0,java.math.BigDecimal,Not able to read BigDecimal property in java getter method.
21185150,1,0,0,java.math.BigDecimal,But I need it as BigDecimal only .
21185150,1,0,0,java.math.BigDecimal,Please help me to fix this or what is the reason BigDecimal is not working in this case ?
21185352,2,0,0,java.math.BigDecimal,and if you call the setter you have to do convert the value you would pass to an long or double and then use BigDecimal.valueOf().
21185383,2,0,0,java.math.BigDecimal,While getting the data from properties file convert it into BigDecimal then use it.
21188229,2,0,2,java.math.BigDecimal,An example where this happen in java api is in BigDecimal code.
21198995,1,0,9,java.math.BigDecimal,"I can use the + or - operators on Float, Long and other autoboxeable classes, and I can use add() and negate() on BigDecimal or BigInteger (which violates the SRP)."
21199123,2,0,1,java.math.BigDecimal,add and negate exist on BigDecimal and BigInteger because you can't use + and -.
21204098,1,0,3,java.math.BigDecimal,Also I'm using BigDecimal at client (in Scala).
21204098,1,0,3,java.math.BigDecimal,"If one of them is BigDecimal, how do I get rid of the error?"
21204098,1,0,3,java.math.BigDecimal,"I'm aware about java.util.Currency, but I don't need it, I only need an amount of money which is should be BigDecimal."
21214159,2,1,1,java.math.BigDecimal,You can use BigDecimal but the problem here is that BigDecimal type you are getting from Anorm is java.math.BigDecimal while in your case classes you are actually using scala.math.BigDecimal.
21214159,2,1,1,java.math.BigDecimal,To make it work you can either: 1) Define your case classes with java.math.BigDecimal and use this type in your application.
21214159,2,1,1,java.math.BigDecimal,"And when you need to convert from Scala BigDecimal back to Java BigDecimal (for insert, update etc): code."
21207442,2,0,1,java.math.BigDecimal,"For really huge numbers, look into the BigDecimal class."
21209911,2,0,5,java.math.BigDecimal,extends Number> then you can pass it a List<Number> or a List<Integer> or a List<BigDecimal> etc.
21249085,1,0,0,java.math.BigDecimal,Format BigDecimal to string with scientific notation and viceversa.
21249085,1,0,0,java.math.BigDecimal,the above gives 66140856092779467090983316712427699021235xxxxxxxxxxxxxxxxxxxxx Now i have to format the BigDecimal value to string with scientific notation code.
21249085,1,0,0,java.math.BigDecimal,the above gives 6.61409E1283 Now i need to convert the string temp_s1(6.61409E1283) back to BigDecimal which gives the value of temp_val1....????
21260273,1,0,2,java.math.BigDecimal,"What I'm finding is that on MySQL r is a BigInteger, while in Oracle is of class BigDecimal."
21260715,2,1,1,java.math.BigDecimal,Both BigInteger and BigDecimal are subclasses of Number.
21274228,2,0,1,java.math.BigDecimal,One solution for greater precision is to use java.math.BigDecimal and a java.math.MathContext through-out for example - code.
21298457,1,0,1,java.math.BigDecimal,Which method will be better when multiply 100 with BigDecimal?
21298457,1,0,1,java.math.BigDecimal,Here I have a question when using Java BigDecimal.
21298457,1,0,1,java.math.BigDecimal,Which way will be better when I want to multiply 100 for a object of BigDecimal.
21325182,2,0,1,java.math.BigDecimal,"Moreover, groovy uses BigDecimal as it's primary type for non-integer operations."
21348400,1,0,0,java.math.BigDecimal,BigDecimal bigDecimal = BigDecimal.ONE;.
21348429,2,0,7,java.math.BigDecimal,The object itself (the one that represents 1) is created only once: when the class BigDecimal is loaded.
21348429,2,0,7,java.math.BigDecimal,"For Java 7, this is done using new BigDecimal(BigInteger.ONE,          1, 0, 1)."
21348429,2,0,7,java.math.BigDecimal,"The assignment you did is better than creating a new object yourself using = new BigDecimal(...), because the existing object is re-used."
21348436,2,0,1,java.math.BigDecimal,bigDecimal refers to the same object as BigDecimal.ONE.
21348436,2,0,1,java.math.BigDecimal,After that statement bigDecimal and BigDecimal.ONE no longer point to the same object.
21348448,2,0,1,java.math.BigDecimal,"From Java Documentation  public static final BigDecimal ONE   The value 1, with a scale of 0."
21359488,2,0,1,java.math.BigDecimal,"In binary, 1/10 is 0.0001100110011001100110011... Look into BigDecimal for base10 numberstorage."
21360286,1,0,2,java.math.BigDecimal,How do you truncate extra decimals from BigDecimal.
21360286,1,0,2,java.math.BigDecimal,I'm building a service that uses a currency converter and forwards the BigDecimal amount to another service.
21360286,1,0,2,java.math.BigDecimal,Is there a way to simply truncate (not round) the BigDecimal.
21360286,1,0,2,java.math.BigDecimal,"I saw a lot of questions on SO related to this, but they all rounded the BigDecimal in some way."
21360332,2,0,4,java.math.BigDecimal,"BigDecimal provides RoundingMode, which you need here is RoundingMode.FLOOR, code."
21360379,2,0,0,java.math.BigDecimal,BigDecimal also provides Rounding Modes.
21368986,1,0,2,java.math.BigDecimal,"I see in the docs that divide(BigDecimal divisor) will actually reduce the scale which seems strange since as I understand the usage of ""scale"", number of digits past the decimal point, it should increase upon division."
21368986,1,0,2,java.math.BigDecimal,I also see in the docs that multiply(BigDecimal multiplicand) increases the scale.
21369112,2,1,2,java.math.BigDecimal,"As it says in the docs, the value of a BigDecimal is: code."
21369321,2,0,0,java.math.BigDecimal,If precision is important you need to use things like BigDecimal.
21373929,2,1,4,java.math.BigDecimal,"Or better yet, don't use floating points: use a BigDecimal instead."
21375212,1,0,0,java.math.BigDecimal,I am trying to convert the list of Object arrays to a BigDecimal array using the toArray() method of the List collection..
21375272,2,0,5,java.math.BigDecimal,"The problem is that the element in fileFormatObj is an Object[], not a BigDecimal."
21375272,2,0,5,java.math.BigDecimal,Therefore you can't convert fileFormatObj to a BigDecimal[].
21375272,2,0,5,java.math.BigDecimal,You can't even convert it to a BigDecimal[][] (as an Object[] isn't a BigDecimal[]) but at the moment you're trying to store an array reference in a BigDecimal[]...
21375272,2,0,5,java.math.BigDecimal,"If you absolutely have to convert a List<Object[]> to a BigDecimal[] and you want to take the first element of each array, you could use something like: code."
21375272,2,0,5,java.math.BigDecimal,You can do the whole for loop body in a single statement of course - I only split it up here to make it clear exactly where the cast to BigDecimal needs to happen.
21379817,2,0,0,java.math.BigDecimal,You better use BigDecimal for this kind of operation.
21382246,2,0,0,java.math.BigDecimal,"As a workaround, you could convert parsed values to BigDecimal and use it, unless the double conversion does not lose precision significantly."
21384817,1,0,3,java.math.BigDecimal,Why doesn't BigDecimal.stripTrailingZeros() remove always all trailing zeros?
21385283,2,0,1,java.math.BigDecimal,"From the description of BigDecimal's stripTrailingZeros: ""Returns a BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation."
21385283,2,0,1,java.math.BigDecimal,"For example, stripping the trailing zeros from the BigDecimal value 600.0, which has [BigInteger, scale] components equals to [6000, 1], yields 6E2 with [BigInteger, scale] components equals to [6, -2]"" In other words, it doesn't do what you want it to do."
21390873,2,1,3,java.math.BigDecimal,I suggest using BigDecimal instead.
21442694,2,0,1,java.math.BigDecimal,"However you might use java.math.BigDecimal, which can handle this large integers."
21443740,1,0,0,java.math.BigDecimal,Neat way to find the number of significant digits in a BigDecimal?
21443740,1,0,0,java.math.BigDecimal,I do not want to limit the number of significant digits in a BigDecimal.
21443880,2,1,4,java.math.BigDecimal,"The call to stripTrailingZeros is required as otherwise it's entirely possible for a BigDecimal to be stored in a ""non-normalized"" form."
21443880,2,1,4,java.math.BigDecimal,"For example, new BigDecimal(5000) has a precision of 4, not 1."
21444746,2,0,0,java.math.BigDecimal,"Also, as I noted above, BigDecimal isn't capable of distinguishing between, say, a ""5000"" with one significant digit and a ""5000"" with two, for example."
21444746,2,0,0,java.math.BigDecimal,"(with a trailing decimal point) should have exactly four significant digits, but BigDecimal isn't capable of handling that."
21471821,2,0,0,java.math.BigDecimal,so the way is to use BigDecimal code.
21479726,2,0,1,java.math.BigDecimal,That is why the usage BigDecimal is encouraged.
21479726,2,0,1,java.math.BigDecimal,"To your question on how to use it properly, I've a simple example which can help you understand how BigDecimal can be used along with MathContext."
21481088,1,0,0,java.math.BigDecimal,How to display BigDecimal value in a human readable format?
21481088,1,0,0,java.math.BigDecimal,"Suppose we have a BigDecimal variable setted up like this, and we can't change the way of it's creation: code."
21481088,1,0,0,java.math.BigDecimal,The only way I've found to resolve this problem was using BigDecimal.valueOf(): code.
21516811,1,0,0,java.math.BigDecimal,Both the Math.pow and BigDecimal.pow results are bad.
21516901,2,1,2,java.math.BigDecimal,"BigDecimal bigResult = BigDecimal.valueOf(1.0 + monthlyInterestRate); When you are creating your BigDecimal, you'll get loss of precision, since 1.0 + monthlyInterestRate will lose precision."
21516901,2,1,2,java.math.BigDecimal,"To get better precision, create a BigDecimal for 1.0, then use the add() method to add it to another BigDecimal with the value 0.005833."
21516901,2,1,2,java.math.BigDecimal,Then use the BigDecimal pow() function.
21516901,2,1,2,java.math.BigDecimal,"In other words, construct the BigDecimal from simpler BigDecimals not int or double types."
21521331,2,1,3,java.math.BigDecimal,"There are two problems with it:  A double has no notion of trailing zeroes, unlike BigDecimal Converting between double and BigDecimal (in either direction) is almost always a bad idea."
21521331,2,1,3,java.math.BigDecimal,physical dimensions like height and weight are best for double; artificial values such as currency are best for BigDecimal  Without the call to doubleValue() you're fine: code.
21524016,2,0,0,java.math.BigDecimal,Proof: Use BigDecimal#toPlainString: code.
21527555,1,0,0,java.math.BigDecimal,comparing null BigDecimal from Java BigDecimal.
21527555,1,0,0,java.math.BigDecimal,"However, it fails when comparing i == j Furthermore, even if using options, by implicitly converting JBigDecimal to BigDecimal, i still get the BigDecimal(null) instance."
21528537,2,0,2,java.math.BigDecimal,"scala.math.BigDecimal is a class that holds a java.math.BigDecimal, but an instance of scala.math.BigDecimal holding a null value isn't a null reference itself."
21528537,2,0,2,java.math.BigDecimal,.. Will throw a NullPointerException because BigDecimal will inevitably call this: code.
21527973,1,0,0,java.math.BigDecimal,"When debugging, o looks like this (one String, 50 BigDecimal) : code."
21549669,2,1,3,java.math.BigDecimal,java.math.BigDecimal is your way to go code.
21549810,2,0,0,java.math.BigDecimal,You can use java.math.BigDecimal as mentioned by @Philipp.
21568693,1,0,2,java.math.BigDecimal,Hibernate - BigDecimal column mapping for Custom Dialect.
21568693,1,0,2,java.math.BigDecimal,Any idea what I should be doing in the dialect so I can get Hibernate to correctly set the precision/scale of the BigDecimal retrieved?
21572847,2,0,0,java.math.BigDecimal,"at the left split i searcht the last +,- and on the right the first split it again to the givn index (leftRest=120;rightRest=+30) now i take the left found Value -20 parse it to BigDecimal (because that will give u better results for comma values) and parse the right found Value to BigDecimal 2 now u can calculate code."
21578853,1,0,0,java.math.BigDecimal,Operations with BigDecimal and double in Java.
21578853,1,0,0,java.math.BigDecimal,I am trying to use Advogadro's number (6.022*10^23) in a java program and i use BigDecimal variable to store it.
21579626,2,0,0,java.math.BigDecimal,And read javadoc for BigDecimal.
21578938,2,0,1,java.math.BigDecimal,Wrap the double into a BigDecimal first: code.
21578963,2,0,1,java.math.BigDecimal,BigDecimal is not a primitive type.
21578963,2,0,1,java.math.BigDecimal,As comment suggest read the java doc (http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html).
29210350,2,0,0,java.math.BigDecimal,Warning: Unpredictability of the BigDecimal(double) constructor new Bigdecimal(myDouble) is wrong.
21588216,2,0,2,java.math.BigDecimal,"A better idea, especially if you are working with money, is to use the BigDecimal class."
21588216,2,0,2,java.math.BigDecimal,"To meet your immediate needs, you can use BigDecimal as follows (although it may be best to eliminate the double type from your program and use BigDecimal throughout): code."
21590590,1,0,0,java.math.BigDecimal,Setting scale to a negative number with BigDecimal.
21590603,1,0,3,java.math.BigDecimal,Get exponent of a BigDecimal.
21590603,1,0,3,java.math.BigDecimal,I want to get the exponent of a BigDecimal.
21590603,1,0,3,java.math.BigDecimal,I'm a little surprised that the exponent I want isn't part of the internal representation of a BigDecimal.
21590603,1,0,3,java.math.BigDecimal,"I'm using BigDecimal from Clojure, but any logic that works for Java is welcome too."
21603352,2,1,26,java.math.BigDecimal,"To know the exact value of your double, you can use a BigDecimal: code."
21609078,1,0,0,java.math.BigDecimal,"Now I want to find out whether this class represents a number, i.e all primitives and their wrappers + BigDecimal + BigInteger."
21631239,2,0,1,java.math.BigDecimal,"Lesson: don't parse the input into a double, but into a BigDecimal."
21630986,2,0,0,java.math.BigDecimal,Always use BigDecimal.
21631031,2,0,1,java.math.BigDecimal,Either use BigDecimal or a custom Currency type that only uses Integer or int to do calculations.
21633468,2,0,3,java.math.BigDecimal,"If you try to add a null reference to a BigDecimal, a NullPointerException will be thrown."
21643762,2,1,5,java.math.BigDecimal,What you're doing calls for BigDecimal.
21644347,2,0,1,java.math.BigDecimal,"To see the exact value of your float, you can use a BigDecimal: code."
21644347,2,0,1,java.math.BigDecimal,Forget what is above: BigDecimal only has a double constructor so there was a cast to double and the logic above is flawed.
21644357,2,1,1,java.math.BigDecimal,"Further note that BigDecimal that is frequently suggested will store your number as a string, and not in IEEE754 format."
21651690,1,0,0,java.math.BigDecimal,Why does it keep rounding when I use BigDecimal.
21665857,1,0,0,java.math.BigDecimal,"I am using the BigDecimal class, but I need to be able to take logarithms of these BigDecimals and I also need Euler's number to many decimal places."
21667177,2,1,5,java.math.BigDecimal,Here's your implementation converted to use BigDecimal: code.
21668553,2,0,0,java.math.BigDecimal,"If you're not absolutely bound to use DecimalFormat, you could use BigDecimal.round() for this in conjunction with MathContext of the precision that you want, then just BigDecimal.toString()."
21673222,2,0,3,java.math.BigDecimal,BigDecimal tries to give you a faithful representation and it is doing what it should even if this is surprising.
21673222,2,0,3,java.math.BigDecimal,"In this case the BigDecimal takes the value as it would be printed, instead of the true value represented."
21673087,2,1,7,java.math.BigDecimal,"To avoid the problem, use the constructor BigDecimal(String val) instead:    code."
21680478,1,0,3,java.math.BigDecimal,"The problem is that I get error on the terminal :   Caused by: java.sql.SQLException: Numeric Overflow       at oracle.jdbc.driver.NumberCommonAccessor.throwOverflow(NumberCommonAccessor.java:4381)       at oracle.jdbc.driver.NumberCommonAccessor.getInt(NumberCommonAccessor.java:112)       at oracle.jdbc.driver.OracleResultSetImpl.getInt(OracleResultSetImpl.java:942)       at com.avaje.ebean.config.dbplatform.SequenceIdGenerator.getMoreIds(SequenceIdGenerator.java:194)       ... 31 more  I did try to use Long, Double, BigDecimal."
21686023,2,0,2,java.math.BigDecimal,BigDecimal is a better type to use with currency.
21685952,2,1,3,java.math.BigDecimal,Use BigDecimal instead Edit: Taking into account @AlexWien's comment about the multiple exit points this might be a better solution: code.
21687776,1,0,1,java.math.BigDecimal,Make BigDecimal truncate instead of round.
21687776,1,0,1,java.math.BigDecimal,"I'm using BigDecimal to deal with positive numbers in my app, and I want to make it truncate decimals after the 4th one."
21687776,1,0,1,java.math.BigDecimal,"I seem to almost find what I wanted with RoundingMode.DOWN, but there's some issue when the BigDecimal is created from a double."
21721349,2,0,2,java.math.BigDecimal,"If you need precise floating point calculations, the recommended way to do it is to use BigDecimal."
21721349,2,0,2,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html This is quite a nice tutorial on BigDecimals and their usage http://www.opentaps.org/docs/index.php/How_to_Use_Java_BigDecimal:_A_Tutorial
21721379,2,0,0,java.math.BigDecimal,"You may consider using BigDecimal if you want an ""accurate"" decimal value, or learn to deal with floating point number properly."
21725021,2,0,1,java.math.BigDecimal,Use BigInteger if you work with a long and use BigDecimal if you work with floatingpoint numbers.
21727186,2,1,3,java.math.BigDecimal,"Alternatively, you can also use BigDecimal(incase you know why we usually go for BigDecimal instead of double) for the same."
21727445,2,0,3,java.math.BigDecimal,"but this will change only formatting, double cannot hold number of digits after decimal poin, try BigDecimal code."
21731764,2,0,0,java.math.BigDecimal,If you need your arithmetic to match closely with Decimals then use BigDecimal.
21753507,2,0,0,java.math.BigDecimal,Both are not same  Integer count = (Integer) result[1]; tries to cast the BigDecimal Object to the Integer.
21753507,2,0,0,java.math.BigDecimal,Integer count = ((BigDecimal) result[1]).intValue(); this will work if your result has BigDecimal Object.
21753772,2,0,0,java.math.BigDecimal,BigDecimal.intValueExact() (or BigDecimal.intValue()) :  Converts this BigDecimal to an int.
21753772,2,0,0,java.math.BigDecimal,"This conversion is analogous to a narrowing primitive conversion from double to short as defined in the Java Language Specification: any fractional part of this BigDecimal will be discarded, and if the resulting ""BigInteger"" is too big to fit in an int, only the low-order 32 bits are returned."
21753772,2,0,0,java.math.BigDecimal,Note that this conversion can lose information about the overall magnitude and precision of this BigDecimal value as well as return a result with the opposite sign.
21753772,2,0,0,java.math.BigDecimal,Plase take into consideration that BigDecimal may contain values which are larger than Integer.MAX_VALUE.
21765771,2,0,1,java.math.BigDecimal,"I would recommend Integer, Long, String or BigDecimal instead of Float."
21767583,2,1,3,java.math.BigDecimal,"Note that the fact that your employee number and your hire date are both String values is a bit of a worry, and it's a bad idea to use double for currency values - get into the habit of using BigDecimal, or use an integer to represent a number of cents/pennies/whatever."
21790480,2,1,2,java.math.BigDecimal,Use BigDecimal or something like it.
21790854,2,0,1,java.math.BigDecimal,"If Money type is the one as suggested by ZouZou, from the Javadoc:  getAmount java.math.BigDecimal getAmount()   Get the amount of money as a   BigDecimal."
21790854,2,0,1,java.math.BigDecimal,Returns: the BigDecimal amount  So you should just call BigDecimal big = money.getAmount(); Otherwise if Money is a of a different type or your own custom class then to construct BigDecimal representation you need to call the appropriate BigDecimal constructor with the relevant money amount.
21790854,2,0,1,java.math.BigDecimal,There are a lot of different constructors so please see the BigDecimal javadoc.
21791981,2,1,3,java.math.BigDecimal,If you convert your float datatypes to BigDecimal then you will get the same answer from both methods:  code.
21801060,2,0,1,java.math.BigDecimal,"The long answer is to understand that you should learn the way double stored in memory if you want to do accurate calculations, i would use BigDecimal object of java  code."
21802120,2,0,0,java.math.BigDecimal,Use BigDecimal instead.
21805087,2,0,2,java.math.BigDecimal,Use BigDecimal instead.
21805087,2,0,2,java.math.BigDecimal,BigDecimal to the rescue:  code.
21820598,1,0,1,java.math.BigDecimal,"Using the test data: Loan amount: $500,000.00 Yearly interest rate: 5.6% Number of years: 30 I should get the result:  Monthly payment: $2,870.39 Instead, I get: Loan amount:          $500,000.00 Yearly interest rate: 6% Number of years:      30.0 Monthly Payment:      $34,783.54 Help please  EDIT-  This is for a homework assignment, and the professor has noted that he does not want us using BigDecimal objects."
21820598,1,0,1,java.math.BigDecimal,"Why is beyond me, as I have demonstrated my ability to solve this using BigDecimal math in the past."
21820624,2,0,1,java.math.BigDecimal,"Whenever you are dealing with money in java, the data type that  you use is BigDecimal and not float or double."
21820624,2,0,1,java.math.BigDecimal,Modify your program to use BigDecimal instead of double and you should get correct and expected results.
21848357,1,0,0,java.math.BigDecimal,I have BigDecimal property in model.
21863676,2,0,0,java.math.BigDecimal,"Generates an integer uniformly at random between 0 and 10,000 inclusive, and creates a BigDecimal with that value divided by 100."
21879968,2,0,0,java.math.BigDecimal,"Some tips for you on best practices since you mentioned it: double priceA = 20.00; First of all double isn't exactly precise, you should watch out if you plan to use floating point variables to make any calculations that have to be 100% accurate (such as money calculations), use java.math.BigDecimal class instead."
21918641,1,0,5,java.math.BigDecimal,"If this error was the case, we should be able to compare the results to the same cumMean done with the BigDecimal class."
21918641,1,0,5,java.math.BigDecimal,"Performing the same tests as above (a handful of times, nothing statistically significant), I get the exact same result as the BigDecimal implementation."
21927756,2,1,1,java.math.BigDecimal,"You would have to somehow parse the amount string into some number type, probably BigDecimal."
21927756,2,1,1,java.math.BigDecimal,"So you next steps should be:  Look up the reference documentation for BigDecimal, looking for a  way to parse them."
21950274,2,0,1,java.math.BigDecimal,"You should have a look at BigDecimal, and search for ""double problems"" or ""float problems"" on a search engine."
21952776,2,0,1,java.math.BigDecimal,Note the use of BigDecimal here; a double will NOT do.
21955120,2,1,6,java.math.BigDecimal,"If you need floating-point numbers with arbitrary precision, use BigDecimal instead of double."
21955413,2,0,0,java.math.BigDecimal,"For those kind of big numbers, I think you should use BigDecimal."
21962538,1,0,1,java.math.BigDecimal,BigDecimal adding problems.
21962550,2,1,5,java.math.BigDecimal,add returns a new BigDecimal value which is immutable.
21962559,2,0,4,java.math.BigDecimal,"You need to reassign the value of variable 'pi' to itself after adding: pi = pi.add(numar); public BigDecimal add(BigDecimal augend) Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale())."
21963575,2,0,1,java.math.BigDecimal,You can use the divide()method of BigDecimal: code.
21963575,2,0,1,java.math.BigDecimal,"From the BigDecimal javadoc:  Throws: ArithmeticException - if divisor==0, or roundingMode==RoundingMode.UNNECESSARY and this.scale() is insufficient to represent the result of the division exactly."
21963581,2,0,2,java.math.BigDecimal,"You can multiply your BigDecimal by 100, convert to BigInteger, and use mod to check."
21964541,1,0,9,java.math.BigDecimal,I have used BigDecimal in Java to avoid overflow problems.
21964766,2,1,1,java.math.BigDecimal,"Alternatively, if you insist on computing at length; since you calculating the power by looping multiplication (and not BigDecimal pow(n)) you could trim the number you are working with at the front to the last 2 digits and the fractional part."
21981998,2,0,0,java.math.BigDecimal,"You can do this using BigDecimal, which will parse all integers/decimal point floats/scientific floats: code."
21995993,2,1,1,java.math.BigDecimal,"I also suggest setting rounding to HALF_UP, because default rounding is not what most of us would expect: http://docs.oracle.com/javase/1.5.0/docs/api/java/math/BigDecimal.html#ROUND_HALF_EVEN code."
21996593,1,0,0,java.math.BigDecimal,From eltabo  new BigDecimal(o.toString()).intValue() new BigInteger(o.toString()).intValue() new Double(o.toString()).intValue() new Float(o.toString()).intValue() Integer.parseInt(o.toString()) javax.swing.text.NumberFormat.getInstance().parse(o.toString()).intValue()
22032483,1,0,6,java.math.BigDecimal,Arbitrary pre-set precision decimals (Almost like BigDecimal).
22032483,1,0,6,java.math.BigDecimal,"The class BigDecimal looks to be a good candidate as a starting point, but I want to able to limit the size of the decimal to whatever an end user decides."
22032483,1,0,6,java.math.BigDecimal,I was thinking of having a class that extends BigDecimal.
22032483,1,0,6,java.math.BigDecimal,Would extending BigDecimal be a reasonable thing to do?
23071879,2,1,2,java.math.BigDecimal,a BigDecimal.
22037280,2,0,26,java.math.BigDecimal,"Reason why you are getting the expected result with BigDecimal.valueOf and not with new BigDecimal, in the words of Joachim Sauer:  BigDecimal.valueOf(double) will use the canonical String representation of the double value passed in to instantiate the BigDecimal object."
22037280,2,0,26,java.math.BigDecimal,In other words: The value of the BigDecimal object will be what you see when you do System.out.println(d).
22037280,2,0,26,java.math.BigDecimal,"If you use new BigDecimal(d) however, then the BigDecimal will try to represent the double value as accurately as possible."
22037280,2,0,26,java.math.BigDecimal,"From the Java Doc:  BigDecimal.valueOf(double val) - Translates a double into a BigDecimal, using the double's canonical string representation   provided by the Double.toString(double) method."
22037280,2,0,26,java.math.BigDecimal,new BigDecimal(double val) -  Translates a double into a BigDecimal which is the exact decimal   representation of the double's binary floating-point value.
22037280,2,0,26,java.math.BigDecimal,The scale   of the returned BigDecimal is the smallest value such that (10scale ×   val) is an integer.
22037280,2,0,26,java.math.BigDecimal,"One    might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1,   with a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
22037280,2,0,26,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable:    writing new BigDecimal(""0.1"") creates a BigDecimal   which is exactly    equal to 0.1, as one would expect."
22037280,2,0,26,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that    this constructor provides an exact conversion; it does not give the   same result as converting the double to a String using the   Double.toString(double) method and then using the BigDecimal(String)   constructor."
22037068,2,0,8,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
22037068,2,0,8,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which   is exactly equal to 0.1, as one would expect."
22037068,2,0,8,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the   same result as converting the double to a String using the   Double.toString(double) method and then using the BigDecimal(String)   constructor."
22037068,2,0,8,java.math.BigDecimal,So you have to use BigDecimal bigDecimal = BigDecimal.valueOf(d); instead of BigDecimal bigDecimal = new BigDecimal(d);
22037089,2,0,7,java.math.BigDecimal,Create a BigDecimal from that d. Round the BigDecimal correctly.
22037089,2,0,7,java.math.BigDecimal,"Return the double value of that BigDecimal, which has no rounding applied to it anymore."
22037089,2,0,7,java.math.BigDecimal,"You can go two ways:  You can return a BigDecimal that represents the rounded double, and later decide what you do with it."
22037089,2,0,7,java.math.BigDecimal,You can return a String representing the rounded BigDecimal.
22037110,2,1,79,java.math.BigDecimal,Explanation from Java API: BigDecimal.valueOf(double val) - uses the double's canonical string representation provided by the Double.toString() method.
22037110,2,1,79,java.math.BigDecimal,This is preferred way to convert a double (or float) into a BigDecimal.
22037110,2,1,79,java.math.BigDecimal,new BigDecimal(double val) - uses the exact decimal representation of the double's binary floating-point value and thus results of this constructor can be somewhat unpredictable.
22037918,2,1,2,java.math.BigDecimal,0x... notation is just different presentation of BigDecimal for compiler.
22037918,2,1,2,java.math.BigDecimal,int type is incapable of storing so big value: Integer.MAX_VALUE == 2147483647 (even long type: Long.MAX_VALUE == 9223372036854775807) You should be using standard BigDecimal for this or BigInteger.
22038306,1,0,0,java.math.BigDecimal,I have a variable which is of type BigDecimal.
22042775,2,0,1,java.math.BigDecimal,Also you must have the following thing in mind when you define a PK (directly taken from javax.persistence.Id JavaDoc):  The field or property to which the Id annotation is applied should be   one of the following types: any Java primitive type; any primitive   wrapper type; String; java.util.Date; java.sql.Date;   java.math.BigDecimal; java.math.BigInteger.
22041639,2,0,3,java.math.BigDecimal,You can:  round it Math.round(...)  or use BigDecimal if you need high precision.
22041650,2,0,0,java.math.BigDecimal,You can if you use BigDecimal.
22041706,2,0,0,java.math.BigDecimal,"example taken from here finally you can use a fixed precision number with the class BigDecimal, but please take care that this is normally not hardware (FPU) accelerated so will slow down a lot your calculation, but will give you fixed error."
24460150,2,0,1,java.math.BigDecimal,"Just be sure that all of your entity manager code treats the parameter as though it were the intended data type (java.math.BigDecimal in my case), and wait until you're setting the parameter value to convert to java.lang.String."
22050657,2,0,0,java.math.BigDecimal,"In addition to the infinite loop and division problems already mentioned, if you want to make your print lines cleaner, I recommend using BigDecimal to round your doubles: code."
22055208,2,1,2,java.math.BigDecimal,"You'd have to take into consideration the possibility of numbers that are larger than any of the built in primitive types can represent (BigInteger, BigDecimal, and even possibly custom Number subclasses)."
22063630,1,0,1,java.math.BigDecimal,"convert char[] to BigDecimal [], general concept."
22063630,1,0,1,java.math.BigDecimal,":  User enter from keyboard items, for example ""ABCD"" each item has predefined price, like A=$1.25 i need to return summ of ""ABCD"" using BigDecimal API."
22063630,1,0,1,java.math.BigDecimal,My idea is (in few words):  char[] items = bufferRead.readLine().toCharArray(); // using BufferedReader(new InputStreamReader(System.in)) convert char[] items to BigDecimal[] count summ of BigDecimal  Does it sound good ?
22063757,2,0,2,java.math.BigDecimal,"Use a charValueMap of type Map<Character, BigDecimal> to map 'A' with 1.25, 'B' with otherValue and so on."
22067341,2,0,3,java.math.BigDecimal,Use BigDecimal code.
22070125,1,0,3,java.math.BigDecimal,"thisCompany.tags and thatCompany.tags are both of type Map<String, Map<BigDecimal, String>>"
22078922,1,0,4,java.math.BigDecimal,"EDIT: Using BigDecimal instead of double was discussed, but we were afraid it would have an impact on performance."
22078922,1,0,4,java.math.BigDecimal,EDITEDIT: I apologize if I use BigDecimal incorrectly.
22078922,1,0,4,java.math.BigDecimal,So after multiple suggestions I tried using BigDecimal instead code.
22078922,1,0,4,java.math.BigDecimal,We had already experimented with while but with BigDecimal we are now able to get all 528 matches.
22079666,2,0,1,java.math.BigDecimal,"You should use the BigDecimal class instead of double here, since exact precision of the floating point numbers in your array adding up to 0 is a must for your solution."
22084217,2,1,1,java.math.BigDecimal,"[You really shouldn't be using either one to represent monetary values, but rather BigDecimal instead, since float and double won't represent decimal places exactly."
22090711,2,1,9,java.math.BigDecimal,"If you care about decimal digits, then BigDecimal is a more suitable type for you."
22090711,2,1,9,java.math.BigDecimal,"BigDecimal does retain the number of decimal digits you use, but you'll need to be careful about exactly how you use it."
22091015,1,0,0,java.math.BigDecimal,"In DB, I persist the amount of money as NUMBER field, and in Hibernate as BigDecimal type object."
22091015,1,0,0,java.math.BigDecimal,"But actually; almost always I need the amount as Money and with special toString() method: asText() , not only the BigDecimal object and because I need this exactly: code."
22091304,2,1,1,java.math.BigDecimal,Keep your field as BigDecimal and just add helper class with static function which formats/displays your amount of money.
22097296,1,0,1,java.math.BigDecimal,"I think that BigDecimal is probably the best option, but I'm not sure of this."
22097440,2,0,7,java.math.BigDecimal,"For big float maths or a more predictable calculation than double or float, use BigDecimal."
22097440,2,0,7,java.math.BigDecimal,Beyond that if you are working solely in rationals then you may find a rational number class useful and more accurate than BigDecimal.
22097474,2,1,1,java.math.BigDecimal,"If you only want to use one type (which excludes BigInteger ), you should use BigDecimal."
22097474,2,1,1,java.math.BigDecimal,Here is an explanation : The need of BigDecimal And you can also check this answer: Double vs. BigDecimal?
22108989,2,0,1,java.math.BigDecimal,or using BigDecimal code.
22109060,2,0,1,java.math.BigDecimal,"you can either use decimal types (float, double, BigDecimal) in the entire operation or cast the values before they are used."
22113454,2,0,0,java.math.BigDecimal,If you use BigDecimal for your calculation you could set the scale to the desired value.
22118029,1,0,1,java.math.BigDecimal,"We will use double for all calculation, but if you work with significantly small numbers, I would prefer BigDecimal."
22118029,1,0,1,java.math.BigDecimal,"It will slow algorithm, and you should use external method for finding square root, because BigDecimal doesn't have any."
22267691,2,1,1,java.math.BigDecimal,"We will use double for all calculation, but if you work with significantly small numbers, I would prefer BigDecimal."
22267691,2,1,1,java.math.BigDecimal,"It will slow algorithm, and you should use external method for finding square root, because BigDecimal doesn't have any."
22119845,1,0,2,java.math.BigDecimal,Error in calculating PI in Java with BigDecimal.
22119845,1,0,2,java.math.BigDecimal,"I don't know why, but not a single addition or subtraction on that BigDecimal isn't modifying the value of PI."
22119879,2,0,5,java.math.BigDecimal,BigDecimal is immutable so the is no way to change it's value.
22119879,2,0,5,java.math.BigDecimal,(In the same way String does) This is why all the methods would operate on a BigDecimal return a new BigDecimal as the result e.g.
22119879,2,0,5,java.math.BigDecimal,"The second problem is you are using a double in your calculation, defeating the whole point of using a BigDecimal."
22125636,2,1,6,java.math.BigDecimal,"Additionally, you should use BigDecimal when working with currencies, for a number of reasons you will find explained here on SO."
22126491,2,0,0,java.math.BigDecimal,"For financial software it is better to use BigDecimal, which however is more circumstantial though."
22126806,2,0,0,java.math.BigDecimal,Use BigDecimal instead as e.g.
22159628,1,0,3,java.math.BigDecimal,Thread hangs in BigDecimal.compareTo.
22159628,1,0,3,java.math.BigDecimal,"We have seen this issue numerous times, can someone explain how this is even possible as BigDecimal is immutable?"
22159709,2,1,1,java.math.BigDecimal,The BigDecimal.bigTenToThe method is calling a BigInteger constructor.
22167885,2,1,3,java.math.BigDecimal,"BigDecimal could help, but I would suggest reading the whole answer."
22168179,2,0,0,java.math.BigDecimal,"Ideally, create BigDecimal objects and compare those."
22168747,2,0,0,java.math.BigDecimal,"now create a Map - Map<BigDecimal,Employee> empMap = new HashMap<>(); code."
22169894,2,0,1,java.math.BigDecimal,If you want to store any number (technically your example could be a long) you will want to use BigDecimal.
22169894,2,0,1,java.math.BigDecimal,BigDecimal Example; code.
22169894,2,0,1,java.math.BigDecimal,As 12344587387873878 is too big to store as an integer you can't just type it in as a literal (all non-floating point literals are implicitly ints) to go into your BigDecimal constructor.
22169894,2,0,1,java.math.BigDecimal,"OR, you can pass BigDecimal a string."
22169894,2,0,1,java.math.BigDecimal,"As a warning, BigDecimal does have it's issues with very high accuracy numbers."
22170625,1,0,1,java.math.BigDecimal,"I know when I need accurate arithmetic, I should use BigDecimal."
22172971,1,0,0,java.math.BigDecimal,"Now I tried using double, float, and BigDecimal, nothing works for me?"
22173662,2,1,0,java.math.BigDecimal,According to the MySQL official reference (Connector/J JDBC Reference) the DECIMAL type is mapped to java.math.BigDecimal.
22185670,2,0,0,java.math.BigDecimal,Or use BigDecimal with enough scale.
22189402,2,0,2,java.math.BigDecimal,One is to use an extended-precision math package -- BigDecimal is often suggested for Java.
22189402,2,0,2,java.math.BigDecimal,"BigDecimal can handle many more digits of precision, and also -- because it's a decimal representation rather than a 2's-complement representation -- tends to round off in ways that are less surprising to humans who are used to working in base 10."
22189149,2,0,2,java.math.BigDecimal,You have to use BigDecimal instead of double.
22189149,2,0,2,java.math.BigDecimal,"Unfortunately, StrictMath doesn't support BigDecimal, so you will have to use another library, or your own implementation of sin/cos/tan."
22189201,2,1,4,java.math.BigDecimal,"For some operations, especially those relating to money, you can use BigDecimal to eliminate floating-point errors: you can really represent values like 0.1 (instead of a value really really close to 0.1, which is the best a float or double can do)."
22197440,2,1,5,java.math.BigDecimal,Use BigDecimal code.
22212932,2,1,1,java.math.BigDecimal,"For the average, it uses a BigDecimal to avoid the precision problem you can have with double or float."
22224060,1,0,0,java.math.BigDecimal,I have tried new BigDecimal(((Number) o).doubleValue()) and BigDecimal.valueOf(((Number) o).doubleValue()) but these do not work.
22224250,2,0,0,java.math.BigDecimal,or you can use BigDecimal to perform the rounding (I avoid using BigDecimal as it is needelessly slow once you know how to use rounding of doubles) code.
22224250,2,0,0,java.math.BigDecimal,Note: never use new BigDecimal(double) unless you understand what it does.
22225115,1,0,0,java.math.BigDecimal,InstantiationException: java.math.BigDecimal in jaxws:endpoint.
22311085,2,1,2,java.math.BigDecimal,What looks like it's happening is that the marshaller tries to serialize BigDecimal by trying to call it's empty constructor.
22311085,2,1,2,java.math.BigDecimal,"But BigDecimal has no empty constructor, so the serialization mechanism catches the exception and goes on trying to serialize the BigDecimal in another way."
22311085,2,1,2,java.math.BigDecimal,"So the serialization process uses another way to convert the BigDecimal, such as calling a static factory method that it knows about, because we know the serialization eventually succeeds."
22252141,2,0,5,java.math.BigDecimal,But if you really are going to operate on big numbers consider using BinInteger or BigDecimal classes to avoid integer overflow.
22259715,2,0,2,java.math.BigDecimal,"For decimal numbers, use BigDecimal Wolfram Alpha will give you 2.243754834308400900535121747859167616725725368773485418854923..., and our figure is 2.243754834308401, which is same as code."
22723587,2,1,0,java.math.BigDecimal,The plugin which generates Pojos has accepted the feature request for adding an option to represent Double as BigDecimal
24164551,2,0,0,java.math.BigDecimal,Using BigDecimal with that problem won't give you any more precision because the problem here is that the results of sin() and cos() are still only double precision.
22285194,2,1,2,java.math.BigDecimal,According to the documentation BigDecimal will throw an ArithmeticException when the result is a non-terminating decimal.
22285455,2,0,1,java.math.BigDecimal,The BigDecimal by default always tries to return the exact result of an operation.
22289102,2,0,1,java.math.BigDecimal,The closest I can think of is BigDecimal where 0.0 equals 0.00 is false but 0.0 compareTo 0.00 is 0.
22289102,2,0,1,java.math.BigDecimal,and this could be an infinite loop for some values of BigDecimal.
22299173,1,0,1,java.math.BigDecimal,"As the BigDecimal class stores floating-point numbers with practically unlimited precision, I have gone for it."
22299173,1,0,1,java.math.BigDecimal,Now I want to know how can I get more precision in my result using BigDecimal as calculated by WolframAlpha?
22305034,1,0,0,java.math.BigDecimal,Java Hibernate Criteria Average: BigDecimal instead of Double.
22305034,1,0,0,java.math.BigDecimal,How can I force Hibernate to map that function to BigDecimal?
22305787,2,1,1,java.math.BigDecimal,Should be possible to subclass AvgProjection override getTypes to return BigDecimal and use this projection instead.
22305357,2,0,0,java.math.BigDecimal,The BigDecimal class will give you what you need.
22316849,2,0,1,java.math.BigDecimal,Use BigDecimal instead.
22316889,2,1,2,java.math.BigDecimal,"Or, just use Java's BigDecimal class"
22316894,2,0,1,java.math.BigDecimal,"If you want a fixed point arithmetic, use BigDecimal instead."
22550285,2,1,1,java.math.BigDecimal,"If you use BigDecimal, you can represent (almost) arbitrarily large numbers."
22346289,2,1,2,java.math.BigDecimal,Try to get BigDecimal
22367295,2,0,1,java.math.BigDecimal,If you want it to to always have two decimal places then you use BigDecimal.
22367295,2,0,1,java.math.BigDecimal,With BigDecimal you can set scale to 2 decimal places and round down so numbers like 4 prints out 4.00 code.
22367386,2,0,1,java.math.BigDecimal,If you want to handle decimal numbers you have to use BigDecimal or a similar class.
22400470,1,0,1,java.math.BigDecimal,gson.toJson(object) BigDecimal Precision Lost.
22400470,1,0,1,java.math.BigDecimal,"When I converting Object to Json, I have a problem with BigDecimal Precision loosing."
22400470,1,0,1,java.math.BigDecimal,2nd Test - Wrong Output (Lost BigDecimal Precision)  code.
22400470,1,0,1,java.math.BigDecimal,3rd Test - Wrong Output (Lost BigDecimal Precision)  code.
22400470,1,0,1,java.math.BigDecimal,Amazing that whenever BigDecimal value is higher length then it truncate decimal place as well.
22415754,2,0,0,java.math.BigDecimal,"If you really require parsing the value ""0.15"" as something that exactly represents the real value 0.15, then you need to use BigDecimal (http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html): BigDecimal parsed = new BigDecimal(value) Your ""10"" is also not exactly 10, BTW."
22454331,2,0,11,java.math.BigDecimal,"Yes, the BigDecimal class does not take any Locale into account in its constructor that takes a String, as can be read in the Javadoc of this constructor:  the fraction consists of a decimal point followed by zero or more   decimal digits."
22454134,2,1,5,java.math.BigDecimal,The problem is that constructor of BigDecimal requires decimal number format where decimals come right after decimal dot .
22468758,1,0,0,java.math.BigDecimal,Most of the answers suggest using a BigDecimal or printf.
22530875,1,0,0,java.math.BigDecimal,I have one problem in BigDecimal with handling negative value in reverse order.
22531121,2,1,1,java.math.BigDecimal,"Well, I am assuming that your getting your number String with the minus on the end from somewhere else in your actual code, rather than passing a String literal to BigDecimal."
22531121,2,1,1,java.math.BigDecimal,"If so, you can just process the String variable before passing it to BigDecimal, and move the - from the end to the beginning like so."
22531121,2,1,1,java.math.BigDecimal,"And, to state the obvious, If you really are just passing a String literal to BigDecimal as in your example code, then just put the minus on the beginning."
22534514,2,0,0,java.math.BigDecimal,"Rather can converting your Double or BigDecimal to String, convert your currentInput directly to a BigDecimalusing the BigDecimal(String) constructor   If the input is not parsable to a number it will throw a NumberFormatException you will want to catch to force your BigDecimal.ZERO value   Moreover, converting numbers to String should be done like this: String myDouble = String.valueOf(aDouble)  (more on that here)"
22534781,2,0,0,java.math.BigDecimal,"Moreover, the exception shows that you're passing the string ""null"" to the BigDecimal constructor, which fails to parse it as a long."
22579064,2,0,0,java.math.BigDecimal,"Why output of numeric field, at table above, show java.math.BigDecimal?"
22579064,2,0,0,java.math.BigDecimal,"As per Oracle documentation on Datatypes and their Java Mappings:   NUMBER:    The NUMBER class provides conversions between the Oracle Number (lnxnum_t) data type and Java types byte[], byte, short, integer, long, float, double, String, BigInteger, and BigDecimal."
22579064,2,0,0,java.math.BigDecimal,For a data type of NUMBER the return type is java.math.BigDecimal.
22569892,1,0,1,java.math.BigDecimal,"Edit I have used BigDecimal, as recommended."
22569892,1,0,1,java.math.BigDecimal,I have read that BigDecimal should be able to store a value that is roughly 8Gb of memory.
22569985,2,0,4,java.math.BigDecimal,"To get a bigger range, use a BigDecimal to store results with arbitrary precision."
22570002,2,1,2,java.math.BigDecimal,You could have a look at BigDecimal.
22575606,1,0,0,java.math.BigDecimal,Testing BigDecimal for zero In Java.
22575606,1,0,0,java.math.BigDecimal,isn't my BigDecimal getting set to zero?
22575616,2,1,0,java.math.BigDecimal,"Should use equal with another BigDecimal Object, ie code."
22575616,2,1,0,java.math.BigDecimal,"You can read the documentation here http://java.sun.com/j2se/1.5.0/docs/api/java/math/BigDecimal.html#equals(java.lang.Object) ""..Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale.."""
22576208,1,0,1,java.math.BigDecimal,"//-------------------------------------------------------------- Why output of numeric field, at table above, show java.math.BigDecimal ?"
22599882,1,0,0,java.math.BigDecimal,BigDecimal Conversion.
22599882,1,0,0,java.math.BigDecimal,"My question is: If I use BigDecimal to do the divisions and multiplications until I get ""X"" then I convert ""X"" to double in-order to use the .pow() method to get Y, (I know I might loose precision in the last step) but how bad is that idea?"
22599882,1,0,0,java.math.BigDecimal,I am saying so because I have seen people having troubles in raising a BigDecimal to a double value.
22599909,2,1,1,java.math.BigDecimal,You can convert BigDecimal into double for this purpose.
22603475,2,1,2,java.math.BigDecimal,"Why does your MoneyFormatCell extends TableCell<Object, BigDecimal> ?"
28714050,2,0,0,java.math.BigDecimal,You may use java.math.BigDecimal class.
22621569,1,0,0,java.math.BigDecimal,BigDecimal multiplication returns 0?
22621569,1,0,0,java.math.BigDecimal,I already tried using *= without BigDecimal but the result gives me 0.0.
22635945,1,0,20,java.math.BigDecimal,"As you can see, I am summing up the BigDecimals using BigDecimal::doubleValue(), but this is (as expected) not precise."
22636014,2,1,33,java.math.BigDecimal,What it does is:  Obtain a List<BigDecimal>.
22636014,2,1,33,java.math.BigDecimal,Turn it into a Stream<BigDecimal> Call the reduce method.
22636014,2,1,33,java.math.BigDecimal,"We supply an identity value for addition, namely BigDecimal.ZERO."
22636014,2,1,33,java.math.BigDecimal,"We specify the BinaryOperator<BigDecimal>, which adds two BigDecimal's, via a method reference BigDecimal::add."
22636014,2,1,33,java.math.BigDecimal,"It is mostly the same, except that I have added a totalMapper variable, that has a function from Invoice to BigDecimal and returns the total price of that invoice."
22636014,2,1,33,java.math.BigDecimal,"Then I obtain a Stream<Invoice>, map it to a Stream<BigDecimal> and then reduce it to a BigDecimal."
22636538,2,0,3,java.math.BigDecimal,Use this approach to sum the list of BigDecimal: code.
22636538,2,0,3,java.math.BigDecimal,"This approach maps each BigDecimal as a BigDecimal only and reduces them by summing them, which is then returned using the get() method."
22643144,2,1,5,java.math.BigDecimal,"You should, in this case, not be using the version of reduce that can return an Optional<BigDecimal>."
22646612,1,0,1,java.math.BigDecimal,"I heard using BigDecimal is good, but don't know how to write it, or where to put it in my code (I am a beginner)."
22646736,2,0,2,java.math.BigDecimal,"Here's what I think you mean BigDecimal n = new BigDecimal(""1.1111111111111"");  n = n.setScale(2, BigDecimal.ROUND_CEILING);"
22653026,2,0,1,java.math.BigDecimal,No need to call Math.floor() (assuming positive numbers) To avoid this behavior use BigDecimal; http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
22653070,2,0,0,java.math.BigDecimal,If you really need exact decimal calculation use BigDecimal but note that it is much slower.
22653039,1,0,0,java.math.BigDecimal,"Since I am programming in Java, it seems I can solve this kind of big data problems with classes like ""BigDecimal"" or ""BigInteger""."
22653193,2,0,1,java.math.BigDecimal,As far as I know Big data is not like BigDecimal or BigInteger.
22665656,1,0,1,java.math.BigDecimal,Inaccurate multiplication using BigDecimal.
22665656,1,0,1,java.math.BigDecimal,I have decided to use BigDecimal.
22665656,1,0,1,java.math.BigDecimal,"The problem that I ran into was that when I copy the values of stockPrice[1][i] for i = 1, ..., 52 into excel and calculate the product, I get a different value from the BigDecimal value from my code."
22665811,2,1,5,java.math.BigDecimal,BigDecimal is correct.
22665811,2,1,5,java.math.BigDecimal,BigDecimal is designed to provide exact precision.
22666831,2,1,2,java.math.BigDecimal,And for the precise numerical type BigDecimal: code.
22666831,2,1,2,java.math.BigDecimal,"So in your case, one must consider switching to BigDecimal."
22666831,2,1,2,java.math.BigDecimal,"BigDecimal, though, has that unlimited precision."
22666591,2,0,1,java.math.BigDecimal,Why don't you just use BigDecimal and pass it String.valueOf.
22676853,2,0,3,java.math.BigDecimal,"If you want exact decimal addition, you need to use BigDecimal in place of double."
22707998,2,0,1,java.math.BigDecimal,"More information here: https://en.wikipedia.org/wiki/Double-precision_floating-point_format If you need an exact result, you should look into BigDecimal"
22708013,2,0,2,java.math.BigDecimal,"And if you need exact decimal values, you should use java.math.BigDecimal You may check this answer as well for more reasoning and details:  Floating point rounding errors."
22711829,2,0,5,java.math.BigDecimal,You should try using BigDecimal instead: code.
22711829,2,0,5,java.math.BigDecimal,"If you're interested in the actual decimal digits that you're provided with, that's another reason to use BigDecimal."
22716993,2,0,0,java.math.BigDecimal,"BigDecimal does tend to be overkill, and has a significant time penalty if you are doing a lot of mathematical calculations."
22716047,2,0,0,java.math.BigDecimal,"I don't know the context of your code but if decimals are important in your case, I would consider using BigDecimal especially if it's for financial apps."
22715895,2,0,1,java.math.BigDecimal,More on BigDecimal here.
22725089,2,0,0,java.math.BigDecimal,All others from input would be Integer or BigDecimal.
22740253,1,0,0,java.math.BigDecimal,"Adding BigDecimal Value to editText - Android, Java."
22740253,1,0,0,java.math.BigDecimal,I have some edit text fields that i want to populate with a BigDecimal (or whatever data type that im allowed to populate them with ?)
22740253,1,0,0,java.math.BigDecimal,And i want to set this edit text field with a value... (BigDecimal): code.
22752103,2,0,0,java.math.BigDecimal,"To hold the factorial, we have to make use of Java's BigDecimal class (Java Docs)."
22777661,1,0,0,java.math.BigDecimal,How to get a BigDecimal from a HashMap in Drools 5.4.0.
22781431,2,1,0,java.math.BigDecimal,"Assuming that the Entry with key ""dec1"" is always a BigDecimal: code."
22781655,2,1,1,java.math.BigDecimal,But some classes don't even respect that in the JDK (see BigDecimal).
22799560,2,1,1,java.math.BigDecimal,Learn to use the BigDecimal class instead.
22810214,1,0,6,java.math.BigDecimal,Struts2 BigDecimal Converter is not converting to String.
22810214,1,0,6,java.math.BigDecimal,Struts2 internally converts BigDecimal to String and following response is returned.
22824666,1,0,1,java.math.BigDecimal,As a solution I have tried to use BigDecimal and DecimalFormat but no success.
22872294,2,0,4,java.math.BigDecimal,"If you're looking for absolute precision, look into BigDecimal."
22880815,2,1,5,java.math.BigDecimal,"If you want accuracy with exact decimals, use BigDecimal instead."
22903448,1,0,0,java.math.BigDecimal,"I have 2 questions:  Does protocol buffer know built-in Java-defined class such as BigDecimal, BigInteger,…?"
22992297,2,1,0,java.math.BigDecimal,BigDecimal/BigInteger are not.
22910661,1,0,1,java.math.BigDecimal,"Add "".00"" to an integer BigDecimal in Java."
22910661,1,0,1,java.math.BigDecimal,"Given an integer BigDecimal (i.e., with no decimal point), how can I add .00 to it?"
22921454,2,0,1,java.math.BigDecimal,The only place where I see that error being thrown is when Derby fails to convert a BigDecimal into the representation used in the DRDA protocol.
22934527,2,0,2,java.math.BigDecimal,"You haven't provided enough details to the problem, but obviously it should be converted to BigDecimal: code."
22935738,2,0,1,java.math.BigDecimal,then you should either apply direct string processing (replacing comma by dot) or consider java.text.DecimalFormat (or NumberFormat) and then convert any BigDecimal results to double.
22939921,2,0,0,java.math.BigDecimal,You should use BigDecimal in order to have the correct results.
22945517,2,0,0,java.math.BigDecimal,"Have a look at BigDecimal (but also, make sure you know what you are doing before you use it)."
22973420,2,0,0,java.math.BigDecimal,and return new BigDecimal(sb.toString()); or something like that.
22982908,1,0,0,java.math.BigDecimal,WSDL2Java Eclipse plugin BigDecimal Issue.
28987705,2,0,0,java.math.BigDecimal,In Java invoke setCurr132() as folllow java.math.BigDecimal param=new java.math.BigDecimal(3.0E13); setCurr132(param);
22998826,1,0,0,java.math.BigDecimal,Properly scaling BigDecimal.
23007942,1,0,2,java.math.BigDecimal,"Here's the problem: registeredClasses can't be HashMap<String, Dao<T, BigDecimal>> because I'd need to add the type parameter T to the DaoFactory class (it would be class DaoFactory<T>)."
23007942,1,0,2,java.math.BigDecimal,"But it is inside a static mathod (DaoFactory is a singleton), so I can't use T. So I use HashMap<String, Dao<?, BigDecimal>> registeredClasses instead of HashMap<String, Dao<T, BigDecimal>> registeredClasses."
23007942,1,0,2,java.math.BigDecimal,"So I have to cast from Dao<?, BigDecimal> to Dao<T, BigDecimal> and use @SuppressWarnings(""unchecked"")."
23017736,2,1,2,java.math.BigDecimal,"If you need more control over the decimal places and rounding, you'll have to use BigDecimal."
23009480,2,0,0,java.math.BigDecimal,"Anyway, in your example you may solve your problem (hopefully) increasing the number on the digits in nf.setMaximumFractionDigits(<something bigger than 3>);  Or you can switch to BigDecimal or DecimalFormat depending on your needs."
23012604,2,0,1,java.math.BigDecimal,Use BigDecimal.intvalue: code.
23013621,2,0,2,java.math.BigDecimal,"If you want to round a value towards the nearest multiple of step using the semantics of BigDecimal.ROUND_HALF_UP (if exactly halfway between two steps, round up), the necessary calculations are: code."
23017583,1,0,4,java.math.BigDecimal,Is Java's BigDecimal the closest data type corresponding to C#'s Decimal?
23017583,1,0,4,java.math.BigDecimal,"According to the chart here, the equivalent data type in Java to C#'s Decimal is ""BigDecimal""."
23021308,2,0,8,java.math.BigDecimal,A Java BigDecimal can have arbitrarily much precision and therefore can be arbitrarily large.
23021308,2,0,8,java.math.BigDecimal,"If you want to make a BigDecimal with a thousand places of precision, you go right ahead."
23021176,1,0,1,java.math.BigDecimal,How can I write SQLite Real vals to Java BigDecimal values?
23021176,1,0,1,java.math.BigDecimal,"The cost, margin, and listprice columns are ""BigDecimal"" because in the orginal (C#) app they were Decimal  The corresponding SQLite table is defined thus: code."
23021176,1,0,1,java.math.BigDecimal,"The closest SQLite gets to Decimal (C#) or BigDecimal (Java) is REAL, SQLite's only floating point data type."
23021176,1,0,1,java.math.BigDecimal,"Note that I can assign string vals to the DeliveryItem class using ""cursor.getString(N)"" and integer vals using ""Integer.parseInt(cursor.getString(0))"" but as to the BigDecimal values, I run into a problem."
23021176,1,0,1,java.math.BigDecimal,"Java's BigDecimal data type/class has no associated ""parseBigDecimal"" method."
23021176,1,0,1,java.math.BigDecimal,"I get, ""error: no suitable method found for valueOf(String) method BigDecimal.valueOf(long) is not applicable (argument mismatch; String cannot be converted to long) method BigDecimal.valueOf(double) is not applicable (argument mismatch; String cannot be converted to double)"" ...and if I try this: code."
23021176,1,0,1,java.math.BigDecimal,"...I get, ""error: incompatible types: float cannot be converted to BigDecimal"" If I try Double.parseDouble(), I get the similar, ""...double cannot be converted to BigDecimal"" How can I read the REALs from the database and populate the BigDecimal vals with those vals?"
23021176,1,0,1,java.math.BigDecimal,"...as both of them complain with, ""error: incompatible types: double cannot be converted to BigDecimal"" And the same goes for this alternate casting syntax, which Droidio suggested: code."
23022683,2,1,1,java.math.BigDecimal,"I""m not sure why you are trying to cast and/or use valueOf() operations... simply make a new BigDecimal object."
23022683,2,1,1,java.math.BigDecimal,This gets around creating a temporary (and unnecessary)String since you seem to be after getting a BigDecimal in the end anyways.
23022683,2,1,1,java.math.BigDecimal,"Just be aware, if the value your ResultSet returns is not able to be converted into a BigDecimal like it's a string ""abcd"" then it will throw an Exception, but this is probably desired since you are then dealing with bad data."
23023706,1,0,0,java.math.BigDecimal,How can I store a BigDecimal (Java) value in a Real (SQlite) column?
23023706,1,0,0,java.math.BigDecimal,"I'm still having big problems with BigDecimal (the trail of tears started here, and continued to here so far."
23023706,1,0,0,java.math.BigDecimal,Now I've got the opposite problem - going from BigDecimal in the POJO to REAL in the SQLite table.
23023706,1,0,0,java.math.BigDecimal,"For the COLUMN_COST line above (the ""MARGIN"" and ""LISTPRICE"" columns have the same problem), I get, ""error: incompatible types: BigDecimal cannot be converted to Double"" when I try this: code."
23023706,1,0,0,java.math.BigDecimal,"...I get, ""error: no suitable method found for put(String,BigDecimal) method ContentValues.put(String,String) is not applicable (argument mismatch; BigDecimal cannot be converted to String) method ContentValues.put(String,Byte) is not applicable (argument mismatch; BigDecimal cannot be converted to Byte) method ContentValues.put(String,Short) is not applicable (argument mismatch; BigDecimal cannot be converted to Short) method ContentValues.put(String,Integer) is not applicable (argument mismatch; BigDecimal cannot be converted to Integer) method ContentValues.put(String,Long) is not applicable (argument mismatch; BigDecimal cannot be converted to Long) method ContentValues.put(String,Float) is not applicable (argument mismatch; BigDecimal cannot be converted to Float) method ContentValues.put(String,Double) is not applicable (argument mismatch; BigDecimal cannot be converted to Double) method ContentValues.put(String,Boolean) is not applicable (argument mismatch; BigDecimal cannot be converted to Boolean) method ContentValues.put(String,byte[]) is not applicable (argument mismatch; BigDecimal cannot be converted to byte[])"" So how can I manipulate the BigDecimal value in the so that it will be accepted by the ContentValues instance?"
23023886,2,0,1,java.math.BigDecimal,"BigDecimal is Serializable, so this should work."
23023904,2,1,4,java.math.BigDecimal,So how can I manipulate the BigDecimal value in the so that it will be accepted by the ContentValues instance?
23023904,2,1,4,java.math.BigDecimal,"Well, you can call doubleValue() on the BigDecimal to downgrade it to a double, which can go in the ContentValues (after autoboxing it to a Double)."
23024287,2,0,4,java.math.BigDecimal,RoundingMode.UNNECESSARY mandates that a BigDecimal does not need to be rounded to fit the scale specified by it.
23024287,2,0,4,java.math.BigDecimal,"1.1 is an exact result, and when the new BigDecimal is created as a result of setScale, it does not need to round the result to get that precise value."
23024287,2,0,4,java.math.BigDecimal,The reason for that:  you have to round your BigDecimal now in order for you to represent the appropriate scale (1 number after the decimal).
23024287,2,0,4,java.math.BigDecimal,"You wouldn't see the behavior if you had your scale larger than the amount of digits after your decimal, but may see another rounding behavior if it was already established on that instance of your BigDecimal."
23031587,1,0,1,java.math.BigDecimal,"i dont know how to overcome the problem of double that is rounding down, i tried the BigDecimal, maybe i just dont do it right.. i dont need very precise result but i do need the result 1.764."
23054587,1,0,0,java.math.BigDecimal,ex: Integer.parseInt(String) or new BigDecimal(String) Use reflection methods for casting.
23062844,2,0,0,java.math.BigDecimal,By default String.format() uses a precision of 6 for BigDecimal.
23073137,1,0,1,java.math.BigDecimal,Obtaining nth digit of BigDecimal.
23073137,1,0,1,java.math.BigDecimal,Is there any way to get a nth digit from BigDecimal?
23073137,1,0,1,java.math.BigDecimal,Using this article --> generating pi to nth digit java I set up a value of pi using Euler's formula in a BigDecimal.
23073137,1,0,1,java.math.BigDecimal,I was thinking maybe there would be a way that I could take the BigDecimal and store it's values in an array somehow.
23074456,2,1,0,java.math.BigDecimal,You're computing pi as a double and then converting it to BigDecimal.
23074456,2,1,0,java.math.BigDecimal,You need to do the computation of pi in BigDecimal.
23073526,2,0,0,java.math.BigDecimal,"The easiest way is to convert the BigDecimal to a String, and you can simply make use of String#charAt(int) I am not sure why you can't get hold of 47 characters."
23073526,2,0,0,java.math.BigDecimal,The String conversion should convert all digits up to the scale you defined in your BigDecimal.
23073526,2,0,0,java.math.BigDecimal,"The problem most probably is caused by incorrect use of BigDecimal in you Pi calculation logic  Your assumption seems invalid: passing in MathContext with BigDecimal(double, MathContext) does not necessary make the result containing the significant figures declared by MathContext."
23073526,2,0,0,java.math.BigDecimal,"Quoted from Javadoc:  Translates a double into a BigDecimal, with rounding according to the context settings."
23073526,2,0,0,java.math.BigDecimal,The scale of the BigDecimal is the smallest value such that (10^scale × val) is an integer.
23088072,2,1,7,java.math.BigDecimal,"Also, BigInteger (and its floating-point analog, BigDecimal) is much lower slower than primitive types."
23091528,1,0,0,java.math.BigDecimal,Java BigDecimal Rounding.
23091528,1,0,0,java.math.BigDecimal,"I am learning BigDecimal and i want it to retrieve the exact number i entered, the following code is rouding the number and i dont know why code."
23096541,2,0,0,java.math.BigDecimal,"As you are working with prices, the best primitive type is float and the best object is BigDecimal."
23107033,2,0,0,java.math.BigDecimal,"Consider that likely a user will never input an integer or a double: what she types is a decimal number, and you should deal with the input depending on what it's used for (the choice is among String, BigDecimal, Number, Integer, Double and so on...)"
23121312,2,0,0,java.math.BigDecimal,"Note that BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short implements Number interface (these classes will pass is-a Number test), so you don't have to ""findInstance"" of them."
23128165,1,0,1,java.math.BigDecimal,"I have an object wich its first field is a number (BigDecimal, int...)."
23128336,2,0,0,java.math.BigDecimal,"For example if you have new BigDecimal(""2.5"") using longValue() will return 2 but Long.parseLong(""2.5"") will throw an exception."
23289108,2,0,0,java.math.BigDecimal,change BigInteger to BigDecimal
23137719,1,0,1,java.math.BigDecimal,"So I didn't move to BigDecimal since I do this calculation a lot and from what I've read,it's a lot slower then double and float."
23139946,2,0,1,java.math.BigDecimal,"If rounded to two decimal places for display, it would be 549.10, so I don't think your issue is floating point precision, although I do agree BigDecimal would be a better choice for this application."
23139946,2,0,1,java.math.BigDecimal,(I'm only using BigDecimal in my program to get exact printout of the result.)
23138212,2,0,0,java.math.BigDecimal,"For correct precision, use BigDecimal."
23178616,2,1,1,java.math.BigDecimal,"Java has  no operator overloading .For example, BigDecimal would be a lot more popular if you could write a + b instead of a.add(b)."
23191295,2,0,0,java.math.BigDecimal,You can achieve this by using BigInteger/BigDecimal instead of the long datatype.
23191295,2,0,0,java.math.BigDecimal,You can change the BigDecimal to BigInteger also.
23194157,2,1,2,java.math.BigDecimal,If you want exact decimal representations - and particularly if you're using it for currency values - you should use BigDecimal.
23194160,2,0,1,java.math.BigDecimal,"As a fix, you should look into the Java BigDecimal type since it has arbitrary precision ."
23203004,2,0,4,java.math.BigDecimal,Java BigInteger or BigDecimal can be used for large numbers.
23203616,2,0,1,java.math.BigDecimal,"To get the closest integral approximation, convert the double to a BigInteger by way of a BigDecimal: code."
23205775,1,0,0,java.math.BigDecimal,Calculation of BigDecimal.
23205775,1,0,0,java.math.BigDecimal,I'm using Jasper Studio expression editor Both $F{Budget} and $F{Actual} are text fields and Class java.math.BigDecimal Here's the stace trace code.
23205894,2,1,1,java.math.BigDecimal,"${Budget}.subtract($F{Actual}) will return a BigDecimal reference, so you cannot use division symbol / because this is only supported for primitives (and their class wrappers when unboxed)."
23205894,2,1,1,java.math.BigDecimal,"So, you should use BigDecimal#divide instead."
23222449,2,0,7,java.math.BigDecimal,You should use BigDecimal instead of float.
23222449,2,0,7,java.math.BigDecimal,"If the BigDecimal.toString doesn't format the result the way you want, use DecimalFormat to perform the formatting instead."
23223181,1,0,2,java.math.BigDecimal,Super CSV is configured to parse the column as BigDecimal: new ParseBigDecimal(new DecimalFormatSymbols(GERMANY)).
23223181,1,0,2,java.math.BigDecimal,"That works well for numbers below 1k, but the grouping separator is not handled properly: '1.999,00' could not be parsed as a BigDecimal."
23246740,1,0,2,java.math.BigDecimal,"However, none of the solutions solve my exact problem, which is this: I have a value object, similar to BigDecimal."
23259318,1,0,1,java.math.BigDecimal,Since BigDecimal implements Comparable but does not seem to implement Comparator ( it has CompareTo() but no Compare()) I thought that custom Comparator was necessary.
24761333,2,0,0,java.math.BigDecimal,The issue is that most lightly that you have specified you BigDecimal with no digits to the right of the decimal place.
23269517,2,0,1,java.math.BigDecimal,"Note that you should always use BigDecimal for calculating decimal values in Java, else you might get some strange results."
23288451,2,0,3,java.math.BigDecimal,"However, you should also strongly consider using BigDecimal instead of Double anyway, as that's a better match for currency values."
23290777,2,0,2,java.math.BigDecimal,Remember that if you want to have a reliable money calculations you should use BigDecimal instead of double.
23302580,2,1,2,java.math.BigDecimal,"These MySQL Data Types    Can always be converted to these Java types:  CHAR, VARCHAR, BLOB, TEXT, ENUM, and SET:   java.lang.String, java.io.InputStream, java.io.Reader, java.sql.Blob, java.sql.Clob FLOAT, REAL, DOUBLE PRECISION, NUMERIC, DECIMAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT: java.lang.String,   java.lang.Short,    java.lang.Integer, java.lang.Long,   java.lang.Double,    java.math.BigDecimal DATE, TIME, DATETIME, TIMESTAMP:    java.lang.String, java.sql.Date, java.sql.Timestamp   More info Here"
23309341,1,0,0,java.math.BigDecimal,"Edit: main question is Solved, but now I want to use BigDecimal, not Doubles, because they are like 1.000012, and I dunno how."
23311568,2,1,0,java.math.BigDecimal,BigDecimal is redundant if you ask me because id's would ideally NOT be a decimal value but a whole number
23313610,2,0,2,java.math.BigDecimal,Short answers are: use the BigDecimal type or create your own currency implementation with separate integer fields for the Euros and Cents (or Dollars if ou prefer :) ).
23313610,2,0,2,java.math.BigDecimal,Already explained: Using BigDecimal to work with currencies Why not use Double or Float to represent currency?
23314129,2,0,1,java.math.BigDecimal,Use BigDecimal to avoid problems with floating point arithmetic.
23322151,2,0,1,java.math.BigDecimal,"You can, and should, construct a BigDecimal directly from a String that represents a decimal fraction."
23322151,2,0,1,java.math.BigDecimal,"To construct a BigDecimal representing a compile-time constant, you still need to use the String argument constructor: new BigDecimal(""5.2"") not new BigDecimal(5.2)."
23321169,2,0,0,java.math.BigDecimal,Change Doubles to BigDecimals  Look at the constructor BigDecimal(String) code.
23321169,2,0,0,java.math.BigDecimal,Explore other constructors also of BigDecimal.
23327923,2,0,2,java.math.BigDecimal,"where int is type we use as key - account number, and double is value which will be connected with key (in reality double is not best type to store informations about amount of money, you would probably use something like BigDecimal, but for now lets leave double)."
23329008,2,0,3,java.math.BigDecimal,"BigDecimal is a good example of how this should be done in Java: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html note that BigDecimal is a immutable class, this is often a very good idea when you have classes that you in C++ would have operator overload like this for."
23329992,1,0,1,java.math.BigDecimal,How to do BigDecimal modulus comparison.
23329992,1,0,1,java.math.BigDecimal,I basically just want to check if x is a multiple of 20 when x is a BigDecimal.
23338863,2,0,1,java.math.BigDecimal,Note: you need to import java.math.BigDecimal
23347393,2,0,0,java.math.BigDecimal,Java has the BigDecimal type for this purpose.
23351249,2,0,0,java.math.BigDecimal,""", or convert to BigDecimal with scale 2."
23354353,2,0,0,java.math.BigDecimal,Please use a BigDecimal instead.
23358778,1,0,2,java.math.BigDecimal,How to convert BigDecimal to Double in spring-data-mongodb framework.
23358778,1,0,2,java.math.BigDecimal,Spring Data MongoDB mapping by default converts BigDecimal to String.
23379380,2,1,2,java.math.BigDecimal,"Then, the Long generic type would be legal, and your permissible types would be these:  Number Short Integer Double Float Byte BigDecimal BigInteger  ...just to name a few."
23406344,2,0,0,java.math.BigDecimal,"Since you do not treat them as numbers, but as identifiers you should use Java type BigDecimal."
23418382,1,0,0,java.math.BigDecimal,"But that seems to throw some errors with BigDecimal/Integer (although it works if all fields are strings...) Any ideas how I can do this, or how Spring does this (DispatchServlet/RequestMappingHandlerAdapter maybe?)"
23420566,2,1,6,java.math.BigDecimal,"You do some research and find out that it's a bad practice to use double to store monetary values, and that you should be using a class called BigDecimal instead."
23420566,2,1,6,java.math.BigDecimal,"If your other classes accessed your balance field directly, they would all have to change (and all would have to import BigDecimal even though they never use it directly) in order to facilitate this change."
23420566,2,1,6,java.math.BigDecimal,"On the other hand, if they access an account's balance by way of a getter method, you can change the type of balance to BigDecimal in BankAccount  while leaving the return type  of getBalance() as double, by calling BigDecimal's toDouble() method to return the double value your other classes expect: None of your other classes will ever know you've changed the data type."
23441424,2,0,0,java.math.BigDecimal,To read/write the column in java use BigDecimal class.
23441594,2,1,0,java.math.BigDecimal,"RE 1: You should use java.math.BigDecimal in java  RE 2: You should use  DECIMAL(M,D) data type in mysql e.g.for 123.69727407930787989 DECIMAL(20,17) where M 1 to 65 digits and D is 0 to 30 digits RE 3:      (a) Do i need to round of this number if i want to storeit in xxx.xxxxx format?"
23464286,2,1,4,java.math.BigDecimal,You can avoid it by using BigDecimal code.
23494497,2,0,0,java.math.BigDecimal,"In a real-world application, you must use the BigDecimal type for currency values."
23475923,2,0,0,java.math.BigDecimal,Take a look at BigDecimal as well.
23476106,2,0,0,java.math.BigDecimal,"Value types are objects that hold a value like the primitive wrappers Integer, Double, etc., and other classes like BigDecimal."
23476071,2,0,1,java.math.BigDecimal,You can also use BigDecimal code.
23490671,1,0,0,java.math.BigDecimal,BigDecimal CastException in hibernate.
23497033,1,0,0,java.math.BigDecimal,"I tried many things and I can only get it to round to n places behind the comma by using BigDecimal, but I can't seem to find a way for this one."
23498999,2,1,0,java.math.BigDecimal,Lot of answers your can found in SO why you should use BigDecimal instead of double .
23505255,1,0,4,java.math.BigDecimal,BigDecimal.divide() yields extra digit of precision when called with a MathContext.
23505255,1,0,4,java.math.BigDecimal,"Is that a bug, or have I misinterpreted the BigDecimal documentation?"
23505290,2,1,5,java.math.BigDecimal,The second argument to BigDecimal.divide is a scale.
23525760,1,0,6,java.math.BigDecimal,Why doesn't my operation work when I use BigDecimal?
23525760,1,0,6,java.math.BigDecimal,I'm trying to do an operation using BigDecimal but it always return 0.
23525815,2,0,7,java.math.BigDecimal,"When you chain method calls for BigDecimal, the order of operations is not preserved as it is in math, and as with double operators in Java."
23525815,2,0,7,java.math.BigDecimal,"That means that b.subtract(b) happens first, resulting in the BigDecimal 0."
23525828,2,1,7,java.math.BigDecimal,"But when you are running the methods on BigDecimal, the operations are evaluated in the order you are calling them, so  code."
23529587,2,0,1,java.math.BigDecimal,You have to use the BigInteger (or BigDecimal) class for such huge numbers.
23550480,2,1,3,java.math.BigDecimal,"As documented under java.sql.PreparedStatement::setBigDecimal(int, java.math.BigDecimal):  The driver converts this to an SQL NUMERIC value when it sends it to the database."
23549341,1,0,2,java.math.BigDecimal,Java BigDecimal Behaviour.
23549341,1,0,2,java.math.BigDecimal,Also I am having a functionality where I need to compare a row in CSV file with DB record record using some BigDecimal value.
23549341,1,0,2,java.math.BigDecimal,So how can I have 2 as BigDecimal being converted  to 2.0000 Bigdecimal so that I can get same String representation.
23549376,2,0,1,java.math.BigDecimal,BigDecimal is immutable.
23559862,1,0,3,java.math.BigDecimal,"When I try this calculation on Google calculator 1000^10 = 1e+30 Which can be read as 1000,000,000,000,000,000,000,000,000,000 When I try the same calculations using BigDecimal, I got a different result!"
23559862,1,0,3,java.math.BigDecimal,Note that I am not confined to BigDecimal.
23559951,2,1,9,java.math.BigDecimal,Using BigDecimal and doing calculation in double is the same as not using BigDecimal at all.
23559951,2,1,9,java.math.BigDecimal,Use BigDecimal to do calculations: code.
23579499,2,0,2,java.math.BigDecimal,"The Basic annotation can be applied to a persistent property or instance variable of any of the following types: Java primitive types, wrappers of the primitive types, String, java.math.BigInteger, java.math.BigDecimal, java.util.Date, java.util.Calendar, java.sql.Date, java.sql.Time, java.sql.Timestamp, byte[], Byte[], char[], Character[], enums, and any other type that implements java.io.Serializable."
23581083,1,0,0,java.math.BigDecimal,java Double division versus BigDecimal round half_up half_down.
23581083,1,0,0,java.math.BigDecimal,"But when I read the answers to BigDecimal topics, I got confused."
23581083,1,0,0,java.math.BigDecimal,"Question 2: In which case is there a difference in presion, when I compare dividing two doubles and rounding them by force to using BigDecimal HALF_DOWN."
23581212,2,0,0,java.math.BigDecimal,Try with BigDecimal.ROUND_CEILING and BigDecimal.ROUND_FLOOR code.
23587378,1,0,3,java.math.BigDecimal,Diffrentiate between BigDecimal for money and BigDecimal for percentages.
23587378,1,0,3,java.math.BigDecimal,I use BigDecimal throughout my application to handle money and percentages.
23587378,1,0,3,java.math.BigDecimal,"So, my initial thought was to write two classes which behave exactly like BigDecimal so that I could do instanceof tests on them."
23587378,1,0,3,java.math.BigDecimal,"But what's worse, in implementation, this didn't work because I use the static BigDecimal code a lot."
23587378,1,0,3,java.math.BigDecimal,"throws an error, because DollarValue.ONE is actually a BigDecimal, not a DollarValue and DollarValue#valueOf() returns a BigDecimal too."
23587538,2,0,1,java.math.BigDecimal,"Do all the arithmetic in BigDecimal, but have two classes that each has a constructor that takes a BigDecimal argument and a getValue method that returns the BigDecimal."
23591129,2,0,6,java.math.BigDecimal,Use a java.math.BigDecimal instead of a Long.
23598360,1,0,1,java.math.BigDecimal,Attempting to create a Joda-Money Money object from a BigDecimal read from a MySQL database throws an error.
23606414,2,1,1,java.math.BigDecimal,"However it is important to use a PreparedStatement:  easier on the SQL string, escapes special chars in the strings (like apostrophe) you can used typed parameters, like BigDecimal below security SQL injection  I used the try-with-resources syntax to close the stmt."
23612135,1,0,4,java.math.BigDecimal,Is there any wrong with this BigDecimal calculation?
23612135,1,0,4,java.math.BigDecimal,I am new to BigDecimal.
23612297,2,0,0,java.math.BigDecimal,"To my understanding, BigDecimal can represent only certain rational numbers, by no means arbitrary square roots."
23627476,1,0,0,java.math.BigDecimal,"According to javadoc:  void setBigDecimal(String parameterName,                      BigDecimal x)                      throws SQLException   Sets the designated parameter to the given java.math.BigDecimal value."
23627476,1,0,0,java.math.BigDecimal,"I've some mssql stored procedure, that have in parameter of type NUMERIC(10, 0) and I try to pass this value as java.math.BigDecimal in JDBC ..."
23634552,1,0,1,java.math.BigDecimal,"I've skimmed a few articles about BigDecimal, but I'm hesitant to change everything unless I know it's what I need."
23634748,2,0,1,java.math.BigDecimal,You should use BigDecimal because that's its purpose: handling floating point values with arbitrary precision.
23634748,2,0,1,java.math.BigDecimal,"From BigDecimal javadoc:  Immutable, arbitrary-precision signed decimal numbers."
23634748,2,0,1,java.math.BigDecimal,A BigDecimal consists of an arbitrary precision integer unscaled value and a 32-bit integer scale.
23634748,2,0,1,java.math.BigDecimal,"I'm hesitant to change everything unless I know it's what I need  If you want/need to handle these numeric values in the right way, you should change everything to BigDecimal."
23644647,2,1,0,java.math.BigDecimal,Use BigDecimal to avoid precision loss and incorrect answers due to that.
23644647,2,1,0,java.math.BigDecimal,for example deltaT = tf-ti; vf = vi + a*deltaT; If you use BigDecimal or Strings or Wrapper Types such as Double you can check for null instead of keeping a boolean array.
23700736,1,0,2,java.math.BigDecimal,Converting float to BigDecimal then back to float.
23700736,1,0,2,java.math.BigDecimal,I am trying to convert a float to BigDecimal then do some maths.
23700736,1,0,2,java.math.BigDecimal,"From what I known, the only safe way to get a float to become a BigDecimal number is to use the string constructor."
23704134,2,0,1,java.math.BigDecimal,"The new BigDecimal(double) constructor is exact, as is the conversion from float to double, so if you start with a float value num1, new BigDecimal(num1) will give the exact BigDecimal equivalent."
23704134,2,0,1,java.math.BigDecimal,"The BigDecimal addition of 2 is exact, giving 15.84615421295166015625."
23704134,2,0,1,java.math.BigDecimal,"In general, converting a BigDecimal to float will involve rounding to the nearest float."
23704134,2,0,1,java.math.BigDecimal,"If float is not precise enough for your calculations, but you need a float to pass to another method, consider using either BigDecimal or double for the whole calculation except for the final step."
23704134,2,0,1,java.math.BigDecimal,BigDecimal's floatValue() does return the closest float to the exact value of the BigDecimal.
23704134,2,0,1,java.math.BigDecimal,"If you know you want a BigDecimal to be an exact decimal fraction, constructing the BigDecimal from the String representation of the fraction gets it exactly."
23704134,2,0,1,java.math.BigDecimal,"Writing something like new BigDecimal(1.0) gets a BigDecimal whose value is 0.1000000000000000055511151231257827021181583404541015625, the value of the closest double to 0.1."
23700831,2,0,2,java.math.BigDecimal,"If you want to avoid losing any precision, you have to use BigDeciml all the way, using a little bit of BigDecimal is likely to be pointless."
23703148,2,0,1,java.math.BigDecimal,"However, if you were to use an arbitrary precision type (like BigDecimal) you might be able to implement such a test - for example, code."
23724980,2,0,14,java.math.BigDecimal,The BigDecimal parsing and convert to double shows this number is representable.
23753364,1,0,0,java.math.BigDecimal,Cases where it is not working is because BigDecimal created from Double.
23761892,1,0,0,java.math.BigDecimal,"The thing is, from the first few lines, I'd gather it's an error in ""impl.implementationFactory"", but that doesn't help me :s  Executing: java -Xmx1024m -jar win_xmlvm.jar --in=C:\Users\Shai\AppData\Local\Temp\build5510534969425459840xxx\classes --resource=C:\Users\Shai\AppData\Local\Temp\build5510534969425459840xxx\MyApplication\MyApplication\res/ --out=C:\Users\Shai\AppData\Local\Temp\build5510534969425459840xxx\MyApplication\MyApplication\src --target=csharp --app-name=MyApplication [05/20/14 16:36:19.341]    ERROR: Couldn't create node for com.codename1.impl.ImplementationFactory   [05/20/14 16:36:19.341]    ERROR: Couldn't create node for com.codename1.impl.ImplementationFactory   NoSuchFieldError   UnsupportedOperationException   ReadWriteFloatArrayBuffer   XPathFactoryConfigurationException   SAXParser   XMLVMArray   IdFunction   AbstractStringBuilder   Collections_2SingletonMap_21_21   SupplRangeSet   LangFunction   NumberConverter   SAXParser   DeviceRunner   JavascriptContext   Deflate   ResourceBundle_2Control   ReadWriteCharArrayBuffer   HTMLForm_2NamedCommand   AbstractCharClass_2LazyJavaUnicodeIdentifierPart_21   ImageMapData   AccessController   Inflater   ArrayStoreException   AbstractCharClass_2LazyJavaLetter   XmlParser_2EntityInfo   CIDecomposedCharSet   DomHTMLHeadingElement   ProxySelector   Table_2Listener   Collections_2CheckedSortedSet   CloudStorage_21   FileChannel_2MapMode   CloudStorage_22   VirtualKeyboard_2InputField   EmailShare_21   Transition   EncodedImage   DomHTMLEmbedElement   DeflaterOutputStream   Matcher   AbstractCharClass_2LazyPrint   EmptyStackException   TimeZone   DomHTMLMenuElement   CPStringBuilder   DomXPathNSResolver   TreeMap_2BoundedEntryIterator   CompositeRangeSet   AbstractMap_21_21   HangulDecomposedCharSet   BigInteger   SerializablePermission   DomHTMLScriptElement   AdsService   DomHTMLParamElement   Process   SMSShare_21_22_22   IdentityHashMap_2IdentityHashMapIterator   NativeLookup   SMSShare_21_22_21   AtomicJointSet   CodenameOneImplementation_22_22   DomNamedNodeMap   HTMLParser   HTMLEventsListener_21   DateTimeRenderer   HTMLEventsListener_22   FBObject   LinkedHashMap_22   LinkedHashMap_21   DefaultDocumentRequestHandler   CodenameOneImplementation_22_21   FileNotFoundException   BufferedOutputStream   Calendar   SecurityManager   RedTypeMarker   StringBuilder   MultiComboBox   HexStringParser   IdentityHashMap_22_21   Collections_2SingletonSet_21   DomDoctype   DomHTMLAppletElement   Tabs_2TabFocusListener   DomHTMLTableRowElement   DataOutputStream   Collections_2SingletonSet   Preferences   Collections_2CheckedMap   DomHTMLLabelElement   PossessiveAltQuantifierSet   Message   OutOfMemoryError   HashSet   NullPointerException   BigDecimal   Contact   MappedByteBuffer   EmulatedFieldsForDumping   FilterProxyListModel_22   AbstractCharClass_2LazyJavaDigit_21   FilterProxyListModel_21   TextField   EmulatedFields   ValidationConsumer_2ChildrenRecognizer   Array   LSException   DomHTMLLinkElement   AbstractCharClass_2LazyDigit   GenericSignatureFormatError   AbstractCharClass_2LazyAlpha   LowHighSurrogateRangeSet   HashMap_2AbstractMapIterator   Object   DomHTMLUListElement   SMSShare   PropertyPermissionCollection   EmailShare_21_22_22   EmailShare_21_22_21   ContentHandler   TreeMap_2AscendingSubMapIterator   MathUtil   DomHTMLDocument   DomHTMLHeadElement   TreeMap_2UnboundedValueIterator   MultiButton   SideMenuBar_28_21_22   DomHTMLBRElement   InvalidObjectException   SideMenuBar_28_21_21   ReadWriteLongArrayBuffer   VirtualKeyboard_23   XPathParser_2YyTableClass   VirtualKeyboard_22   LinkedHashMap_2EntryIterator   VirtualKeyboard_21   GlassTutorial   String   FacebookShare_22_21   CoderMalfunctionError   FacebookShare_22_22   NumberFunction   CoderResult   DomHTMLMetaElement   AbstractCharClass_2LazyJavaTitleCase_21   AbstractCharClass_2LazyXDigit   PropertyResourceBundle   ThreadGroup   CSSBgPainter   DTDAttributeTypeInfo   Long   UnknownServiceException   MultiLineEOLSet   SequenceSet_2IntHash   PrivilegedActionException   DomConsumer   AbstractList_2SubAbstractList_2SubAbstractListIterator   UnicodeReader   Timer   CRLFReader   TranslateFunction   ConnectionRequest   HTMLComponent_2HTMLComboBox   HighSurrogateCharSet   Logical   InfBlocks   AndExpr   TreeMap_2Node   Error   TreeMap_2UnboundedEntryIterator   VirtualKeyboard   GridBagLayout_21   VariableReference   ObjectInputStream_21   ObjectInputStream_22   Dialog   GroupLayout_2SpringDelta   Container   List_2Listeners   Collections_2SynchronizedSortedMap   WeakHashMap_2HashIterator   XMLParser_2Attribute   CloudListModel_21   Element   CloudListModel_22   ValidationConsumer   LinkedHashMap_2ValueIterator   FileChannelFactory   FloatArrayBuffer   XMLParser_2ContentParticle   HTMLInputFormat_2FormatConstraint   CacheMap   GroupLayout_21   Capture_2CallBack   Hashtable_24_21   FloatToByteBufferAdapter   Proxy   DomNSResolverContext   JSONParser_2KeyStack   XmlReader   XPathConstants   IntToByteBufferAdapter   DomHTMLSelectElement   AbstractCharClass   DateSpinner_21   BackReferencedSingleSet   XMLParser_2Input   InfCodes   LinkedList_2Link   XPathParser_2YySindexClass   ResourceBundle_2NoFallbackControl   InetAddress   BufferFactory   ObjectStreamField_21   Collections_2UnmodifiableCollection_21   ActionEvent   DefaultHTMLCallback   ResultTokenizer"
23767505,1,0,5,java.math.BigDecimal,0.0000051234 becomes 0.0000051234 0.000000000000120006130031 becomes 0.00000000000012001     I need to play this rounding while working with BigDecimal because it is a requirement for my needs.
23768108,2,1,4,java.math.BigDecimal,If d is a BigDecimal that contains the number: code.
23778696,1,0,3,java.math.BigDecimal,"If I have an object with BigDecimal property, I want to display it in a Table with a specific formatting: 2 fractions, and a ""+"" or ""-"" sign according to the amount."
23778696,1,0,3,java.math.BigDecimal,"There is a method table.setConverter(..), but this would actually force to convert between eg a BigDecimal.class and a String.class."
23799021,2,0,6,java.math.BigDecimal,You hard-wire conversion code (BigDecimal to String) to the concrete implementation of some UI component.
23799021,2,0,6,java.math.BigDecimal,"What if you need that conversion in some other place, say when you display a BigDecimal on a Label?"
23799021,2,0,6,java.math.BigDecimal,The objection that the Converter which can be set with Table.setConverter() only converts from BigDecimal to String is not justified in this case.
23779499,1,0,2,java.math.BigDecimal,"I have a vaadin Table and would like to align all columns that have number class types (eg BigDecimal, Integer, Double to the right."
23783248,1,0,0,java.math.BigDecimal,"I can persist using this without any problem, BUT I read this,  http://docs.oracle.com/javaee/6/tutorial/doc/bnbqa.html#bnbqf  It says there that primarykey should be one of  Java primitive types Java primitive wrapper types java.lang.String java.util.Date (the temporal type should be DATE) java.sql.Date java.math.BigDecimal java.math.BigInteger  So what did I do wrong here?"
23796377,2,0,1,java.math.BigDecimal,"As for question 2, you can get ArithmeticExceptions when trying to produce a BigDecimal whose decimal representation doesn't end: code."
23812764,1,0,0,java.math.BigDecimal,I don't want to use BigDecimal data type.
23812837,2,1,8,java.math.BigDecimal,"If you want to retain exactly your original value, you should be using BigDecimal."
23833158,2,0,1,java.math.BigDecimal,Consider changing your grade's type to BigDecimal.
23833158,2,0,1,java.math.BigDecimal,"For cases when there is no calculation involved, and you don't want any difference between what you entered and what the program shows you, it's simpler to use BigDecimal."
23835197,1,0,0,java.math.BigDecimal,"Is there API methods to convert BigDecimal(seconds) to years, months, days, hours, minutes, seconds?"
23835197,1,0,0,java.math.BigDecimal,"If I have BigDecimal seconds = new BigDecimal(""32365423.56""); Is there API methods that convert this to: n years, n months, n days, n hours, n minutes, n seconds."
23841947,2,0,0,java.math.BigDecimal,": BigDecimal Cons  Performance impact  As you can imagine, a new object is required for every state/data."
23841947,2,0,0,java.math.BigDecimal,": BigDecimal.ZERO Being said that, you should try to create your user domain object as immutable as possible (by providing limited setter methods) because the advantage of easily maintaining an immutable object outnumbers the performance of mutable object."
23851348,1,0,0,java.math.BigDecimal,I am new to Hibernate and asked to work with a database with tables that has these columns  Table : tbl_product    //List of Inventory Items    Columns:    key_product             key_category            fld_product_name            fld_inventory_qty            fld_unit_price            fld_product_image  Table: tbl_order_detail //Shopping Cart   Columns:    key_order_detail    key_order (reference to tbl_order.key_order)    key_product (reference to tbl_product.key_product)    fld_unit_price    fld_quantity  Table tbl_order //Pivot table for Shopping Cart and User -- with total price of shopping cart    Columns:    key_order    key_user    fld_total_amount   And my models (objects) looks like this:  Model: InventoryItem    Fields:    Product product;    int quantity; Model: Product    Fields:    int productKey;    String name;    Category category;    BigDecimal unitPrice;    String productImage;  Model: Cart Item    Fields:    Product product;    int quantity;  I am faced with the problem as to how to map the tables with the corresponding models.
23859791,2,0,0,java.math.BigDecimal,"Since you're storing date data and decimal data in your map, you should make it a TreeMap<Date,BigDecimal> instead of a TreeMap<String,String>."
23861459,1,0,2,java.math.BigDecimal,Why is BigDecimal.divide() giving me a wrong answer?
23861459,1,0,2,java.math.BigDecimal,"I am currently using BigDecimal types for a project, and they've been working great."
23861459,1,0,2,java.math.BigDecimal,However the BigDecimal divide is giving me an even 70000000000000.
23866198,2,1,1,java.math.BigDecimal,(This is not valid for finance and maybe scientific calculations) Use BigDecimal.
23866888,1,0,0,java.math.BigDecimal,"On  use of BigDecimal it is giving exponential value , but how to get exact value without exponent."
23866926,2,1,3,java.math.BigDecimal,Try BigDecimal in place of BigInteger
23867384,2,0,1,java.math.BigDecimal,"You may be able to coax BigDecimal to give the correct answer, but the performance will almost certainly be terrible."
23897889,2,0,1,java.math.BigDecimal,Depending on what your application is doing with these numbers you may not care about these differences or maybe you want to look at using something like BigDecimal.
23897904,2,0,2,java.math.BigDecimal,"However, if it is accuracy what you're looking for stay away from native floating point representations and go for classes like BigInteger and BigDecimal."
23900328,1,0,0,java.math.BigDecimal,How would I construct an IEEE-like representation for arbitrary-precision Decimals (like java.math.BigDecimal)?
23907230,2,0,0,java.math.BigDecimal,"An example of very good reason is BigDecimal class where equals compares both value of the object and its scale, while compareTo compares only values."
23933140,1,0,0,java.math.BigDecimal,BigDecimal precision above 1E22.
23942120,2,0,1,java.math.BigDecimal,You could use BigDecimal instead.
23950564,1,0,0,java.math.BigDecimal,How Objective-C support Java BigDecimal via Hessian?
23950564,1,0,0,java.math.BigDecimal,"Server has a Java Bean, it has a instance variable type BigDecimal, but Objective-C cannot map it!"
23957369,2,1,3,java.math.BigDecimal,Changing to AbstractValidator<BigDecimal> solves the error.
23975691,2,0,1,java.math.BigDecimal,"For exact calculations, you could use BigDecimal: code."
23988837,1,0,0,java.math.BigDecimal,Set BigDecimal RoundingMode according to user option without if statements?
23991368,2,1,5,java.math.BigDecimal,It then creates a BigDecimal parsing NumberFormat instance.
23990875,2,0,3,java.math.BigDecimal,"BigDecimal used properly is probably better suited, although dramatically slower."
23990875,2,0,3,java.math.BigDecimal,Then construct your BigDecimal: code.
23990875,2,0,3,java.math.BigDecimal,"For instance, as Peter Lawrey pointed out in the comments, a naive use of BigDecimal will give you runtime exceptions: code."
23994075,2,0,0,java.math.BigDecimal,"Its not only the case with String, but it happens the same way with Integer, BigDecimal etc."
24011385,2,0,1,java.math.BigDecimal,"Think to use BigDecimal instead of double , if you are using a java api make sure that the method that you are using use BigDecimal instead of Double.you could use an open source project and edit it like these one here."
24015599,2,0,4,java.math.BigDecimal,"BigDecimal#divide accepts another BigDecimal, not a String."
24038665,1,0,0,java.math.BigDecimal,"Storing currency as BigDecimal in Hibernate/JPA - decimal(19,2)."
24038665,1,0,0,java.math.BigDecimal,"I changed the fields in my java application that hold currency values from double to BigDecimal to prevent strange double rounding issues like ""0.20000000000001""."
24039936,2,0,0,java.math.BigDecimal,If you don't want to loose precision value then you should use BigDecimal instead of BigInteger (in your Entity class in hibernate / JPA) Consider following demo: code.
24052173,2,0,2,java.math.BigDecimal,for rounding either use Math.round or BigDecimal.setScale
24061770,1,0,0,java.math.BigDecimal,"I have managed to do that but the problem is that while the table is displaying the rounded values, the actual values stored are not the rounded values (I use BigDecimal because I want to be able to control the rounding behaviour of the cells)."
24068734,2,1,2,java.math.BigDecimal,"When you have some monetary value in your application (usually it should be an instance of BigDecimal class, as double is not suitable for this purpose), it represents some value in a specific currency."
24066016,2,0,0,java.math.BigDecimal,You can use java.math.BigDecimal class if you need to represent numbers with great precision.
24066294,2,0,1,java.math.BigDecimal,If you insist on precision of over microseconds (or nano if you're concerned with last century only) - BigDecimal or BigInteger are your friends.
24145753,1,0,1,java.math.BigDecimal,Java BigDecimal / Double precision error.
24145753,1,0,1,java.math.BigDecimal,I tried both Double and BigDecimal for processing: code.
24145753,1,0,1,java.math.BigDecimal,are they both due to a precision rounding error (I thought BigDecimal does not have this problem) or am I doing something wrong?
24145947,2,0,0,java.math.BigDecimal,""", add a ""1"", create a BigDecimal from it and divide that by 100."
24146017,2,0,2,java.math.BigDecimal,"After each key press append the new character to the end of it, and format the number by creating a BigDecimal and dividing it by 100. code."
24146064,2,0,1,java.math.BigDecimal,Java BigDecimal has a constructor that takes a double and another that takes a string.
24146064,2,0,1,java.math.BigDecimal,"BigDecimal addend = new BigDecimal(""0.01""); For more information, see The Evil Big Decimal Constructor."
24180429,2,1,1,java.math.BigDecimal,You should use BigDecimal for calculations  code.
24180429,2,1,1,java.math.BigDecimal,Output: difference between 2.15 and 1.0 using double is: 1.0499999999999998 difference between 2.15 and 1.0 using BigDecmial is: 1.05 This answer is adapted from http://javarevisited.blogspot.in/2012/02/java-mistake-1-using-float-and-double.html Also you can read a very good article on the need for BigDecimal  http://www.javaworld.com/article/2071332/the-need-for-bigdecimal.html
24185747,1,0,2,java.math.BigDecimal,Rounding with DecimalFormat: BigDecimal vs Double.
24186024,2,0,0,java.math.BigDecimal,"It is a limitation of how the BigDecimal is created when trying to parse the Double value, because Doubles are represented as binary which is not exact for every number."
24186024,2,0,0,java.math.BigDecimal,"When the BigDecimal is created from a String, it parses it digit by digit and so is an exact representation of the number in the String."
24186024,2,0,0,java.math.BigDecimal,"I'm afraid I don't have more detail, but I know we went through and changed all of our BigDecimal creations to use String and it solved a lot of weird bugs!"
24188610,2,0,2,java.math.BigDecimal,"This method will return sane results for all primitive wrapper types, but not for all instances of BigDecimal, BigInteger and anything else that offers precision beyond the limits of long/double."
24193788,1,0,0,java.math.BigDecimal,Perhaps there is a way to manipulate the unsigned value using Double.doubleToLongBits() or the BigDecimal class?
24199264,2,0,1,java.math.BigDecimal,"Something wrong, Elliott Frisch It alway return the same result for different store/function: Catalog Name = , Schema Name = , Table Name = , Column Name = PROCEDURE_CAT, Column Label = PROCEDURE_CAT, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = PROCEDURE_SCHEM, Column Label = PROCEDURE_SCHEM, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = PROCEDURE_NAME, Column Label = PROCEDURE_NAME, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = COLUMN_NAME, Column Label = COLUMN_NAME, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = COLUMN_TYPE, Column Label = COLUMN_TYPE, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = DATA_TYPE, Column Label = DATA_TYPE, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = TYPE_NAME, Column Label = TYPE_NAME, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = PRECISION, Column Label = PRECISION, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = LENGTH, Column Label = LENGTH, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = SCALE, Column Label = SCALE, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = RADIX, Column Label = RADIX, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = NULLABLE, Column Label = NULLABLE, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = REMARKS, Column Label = REMARKS, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = SEQUENCE, Column Label = SEQUENCE, Column Data Type = 2, Column Class Name = java.math.BigDecimal, Column Return Type Name = NUMBER Catalog Name = , Schema Name = , Table Name = , Column Name = OVERLOAD, Column Label = OVERLOAD, Column Data Type = 12, Column Class Name = java.lang.String, Column Return Type Name = VARCHAR2 Catalog Name = , Schema Name = , Table Name = , Column Name = DEFAULT_VALUE, Column Label = DEFAULT_VALUE, Column Data Type = -1, Column Class Name = java.lang.String, Column Return Type Name = LONG"
24203112,2,1,0,java.math.BigDecimal,"Another way is to use a class that extends the BigDecimal, say MyBigDecimal and define a method that does the division."
24212480,2,0,0,java.math.BigDecimal,You could construct a BigDecimal and use stripTrailingZeros().
24212132,2,0,0,java.math.BigDecimal,Try BigDecimal with a scale of 1 and ROUND_HALF_UP rounding (if that works for you): code.
24217080,2,0,0,java.math.BigDecimal,"Or  double d = 12345.2145; BigDecimal bd = new BigDecimal(d).setScale(3, RoundingMode.HALF_EVEN); d = bd.doubleValue(); Change the 1st argument in setScale method as per the precision required."
24218034,2,0,1,java.math.BigDecimal,"If you want arbitrary precision and you are in Java, you can use BigDecimal."
24233389,1,0,0,java.math.BigDecimal,Obviously the API does not work with BigDecimal because it would be a big overhead for the purpose to just pass the price.
24272849,1,0,2,java.math.BigDecimal,How to truncate a BigDecimal without rounding.
24272849,1,0,2,java.math.BigDecimal,"After a series of calculations in my code, I have a BigDecimal with value 0.01954 I then need to multiply this BigDecimal by 100 and I wish the calculated value to be 1.95 I do not wish to perform any rounding up or down, I just want any values beyond two decimal places to be truncated I tried setting scale to 2, but then I got an ArithmeticException saying rounding is necessary."
24278515,2,0,0,java.math.BigDecimal,"(Also, I'd question the need for a BigDecimal in the first place - particularly since you're converting it from an Integer, but that's not the subject of your question.)"
24278690,2,1,2,java.math.BigDecimal,Maybe you can use java.math.BigDecimal for your calculation.
24279553,2,1,3,java.math.BigDecimal,Better use somthing like java.math.BigDecimal or (I like that even better) a custom-class for storing fixed-point-values that internally uses an ìnt or a long and a some scale.
24286850,1,0,0,java.math.BigDecimal,This column is mapped as List<BigDecimal> in its respective entity.
24289469,2,1,3,java.math.BigDecimal,You can use BigDecimal.multiply to multiply your BigDecimal.
24289469,2,1,3,java.math.BigDecimal,"Finally, you can alter the how the BigDecimal is represented in terms of fractional digits by using a NumberFormat instance and formatting your Number."
24289475,2,0,2,java.math.BigDecimal,BigDecimal's are objects.
24289475,2,0,2,java.math.BigDecimal,"Instead of a normal multiplication operator like x*10, you need to call the method multiply in BigDecimal: code."
24325486,2,0,0,java.math.BigDecimal,Use BigDecimal.valueOf() to convert the Double value to BigDecimal.
24349876,2,1,1,java.math.BigDecimal,"Doubles are not made for precise calculations (see Round to 2 decimal places) - for precise calculations, use BigDecimal instead."
24365638,2,0,0,java.math.BigDecimal,A much easier solution using BigDecimal: code.
24389131,2,0,1,java.math.BigDecimal,That implementations parses a given String and if it is a valid BigDecimal the validator returns true.
24392815,1,0,0,java.math.BigDecimal,"Output: 370889.63 Actual: 371019.16 I would use BigDecimal, but I'm raising double values to the power of double values; BigDecimal, to my knowledge, only raises doubles to an int value."
24392815,1,0,0,java.math.BigDecimal,I have rewritten my function to include BigDecimal functionality:  code.
24649992,2,1,1,java.math.BigDecimal,"Also even if you could get Integer, Float and Double to work you would find that because BigDecimal does not map directly to a Java primitive it does not work with the standard primitive arithmetic operators and because of this has it's own add method on the object."
24649992,2,1,1,java.math.BigDecimal,As we have seen before BigDecimal is a little different to the others and has its own pow()  method whose result type is a BigDecimal value.
27238313,2,0,1,java.math.BigDecimal,the BigDecimal(char[]) constructor to parse numbers.
24427356,2,1,16,java.math.BigDecimal,The situation is that it thinks the decimal digits 6.0289 are already rounded (which is correct when comparing to the equivalent BigDecimal representation 6.208899…) and decides to not round up again.
24427356,2,1,16,java.math.BigDecimal,"The reason why this doesn’t happen to the other number is that 6.2088 is not the result of rounding up (again, compare to the BigDecimal output 6.208800…)."
24480484,2,1,4,java.math.BigDecimal,Try double or BigDecimal instead.
24482653,2,0,0,java.math.BigDecimal,"You really want to be using BigDecimal here, rather than Double."
24482653,2,0,0,java.math.BigDecimal,BigDecimal type can.
24482653,2,0,0,java.math.BigDecimal,"BigDecimal gives you precise control over precision, and rounding."
24482653,2,0,0,java.math.BigDecimal,"When operating on things such as dollar values, BigDecimal is a much better data type."
24482701,2,0,0,java.math.BigDecimal,"You can use long or BigDecimal as alternatives, for example... code."
24486766,2,0,2,java.math.BigDecimal,There are three fields use type 'BigDecimal' which may grow larger.
24498011,1,0,0,java.math.BigDecimal,Reading BigDecimal with Morphia.
24498011,1,0,0,java.math.BigDecimal,I have a POJO that uses BigDecimal.
24498011,1,0,0,java.math.BigDecimal,What is the proper form to add a decimal value in string form to mongodb such that morphia can read that value into a Java BigDecimal ?
24522207,2,1,0,java.math.BigDecimal,"As @evanchooly references, I already had the BigDecimal code to be able to use that that of object in Morphia."
24503445,2,0,4,java.math.BigDecimal,"It sounds like really it's a List<BigDecimal>... so either you need to change what getResultList() does, or you need to handle the fact that it's a List<BigDecimal> and deal with the BigDecimal values."
24503789,2,0,2,java.math.BigDecimal,"While it seems that your list contains BigDecimal entries as opposed to Long entries, there's actually a couple of ways to go about getting the long data you're interested in."
24503789,2,0,2,java.math.BigDecimal,"First, you can cast the result to a List<BigDecimal>, but this feels like you're taking away one of the major benefits to generics - you don't really need to cast all that often."
24503789,2,0,2,java.math.BigDecimal,"If it really is returning a List<BigDecimal>, then simply capturing that outright wouldn't be the end of the world."
24503789,2,0,2,java.math.BigDecimal,"BigDecimal is a subclass of Number, so this declaration is legal: code."
24503789,2,0,2,java.math.BigDecimal,"extends Number is a upper-bounded wildcard; it will allow you to create a list that contains anything that is a subclass of Number, which again, includes BigDecimal."
24503548,2,0,1,java.math.BigDecimal,"Based on message of exception, your fetching result return java.math.BigDecimal object."
24503548,2,0,1,java.math.BigDecimal,BigDecimal is larger than java.lang.Long and used for huge numbers.
24539889,1,0,1,java.math.BigDecimal,Issue with java BigDecimal storing garbage value.
24539941,2,0,3,java.math.BigDecimal,BigDecimal is just showing you what the value really is.
24539941,2,0,3,java.math.BigDecimal,If you want to convert from a double to a BigDecimal and have it round the way you expect use code.
24539941,2,0,3,java.math.BigDecimal,Another solution is to not use BigDecimal.
24545241,2,0,0,java.math.BigDecimal,"If you really care about precision, may be you want to use java.math.BigDecimal."
24545241,2,0,0,java.math.BigDecimal,See more in How to Use Java BigDecimal: A Tutorial.
24546572,2,0,2,java.math.BigDecimal,Unfortunately in these cases one has to use BigDecimal instead of double.
24546572,2,0,2,java.math.BigDecimal,BigDecimal is an immutable value type.
24546694,2,0,0,java.math.BigDecimal,If you have 0.01 euro make it as 1 Cent and perform calculation and convert them back to Euro by Using BigDecimal and rounding modes.
24557708,1,0,0,java.math.BigDecimal,How to format BigDecimal with 2 fractions?
24557708,1,0,0,java.math.BigDecimal,I'd like to format and display BigDecimal numbers with always to fractions.
24571166,1,0,0,java.math.BigDecimal,I have a function that converst a BigDecimal into a String plus the currency.
24576128,2,0,0,java.math.BigDecimal,"Inside your method that converts a BigDecimal into a String, you can use BigDecimal.setScale() to set the number of digits after the decimal point."
24577328,1,0,3,java.math.BigDecimal,Now I'd like to use the Java 8 Stream API to create the following result (simply calling BigDecimal::add for each currencyUnit's amount): code.
24577714,2,1,6,java.math.BigDecimal,"For BigDecimal, you can fall back to Collectors::reducing: code."
24601148,2,0,1,java.math.BigDecimal,Never use double but rather use BigDecimal when representing money in Java.
24601837,2,0,1,java.math.BigDecimal,"You could use BigDecimal like so, code."
24641919,1,0,2,java.math.BigDecimal,"I am aware that my code is not complete as I do not have a restriction on the number of digits after the decimal point, which I was going to try and get from using BigDecimal."
24665568,2,1,0,java.math.BigDecimal,It is a bit different to bind BigDecimal because you have to make an ObjectBinding.
24661909,1,0,3,java.math.BigDecimal,Perhaps its constructor is Apple(BigDecimal price) and when it's instantiated I need to pass the price.
24662844,2,1,5,java.math.BigDecimal,* java.math.BigDecimal java.math.BigInteger java.net.
24678582,2,0,1,java.math.BigDecimal,Consider BigDecimal instead.
24691221,1,0,1,java.math.BigDecimal,Optimize code for rounding off of a BigDecimal number.
24695196,1,0,0,java.math.BigDecimal,Is it possible that sum(bpds.amount) should be store in any desired fields of BillPaidDetails like added a field private BigDecimal totalAmount; where sum will stored.
24719898,1,0,1,java.math.BigDecimal,Using MathContext objects in BigDecimal divide method.
24719898,1,0,1,java.math.BigDecimal,"I am writing test cases with the JavaScript BigDecimal library by Daniel Trebbien (specifically the BigDecimal-all-last.min.js) and I can't seem to use the MathContext object in the divide method without throwing the error ""MathContext() Bad form value"" Since this library is a direct port from Java, I am using this documentation."
24722554,2,0,0,java.math.BigDecimal,"In conclusion, I would suggest you to checkout BigInt and BigDecimal documentation."
24722400,2,0,4,java.math.BigDecimal,"When you need both huge numbers and arithmetics which are precise to the last digit, you should use the classes BigInteger or BigDecimal (depending on whether or not you want decimal places)."
24730278,2,0,0,java.math.BigDecimal,"If your requirement does not fit any primitive data types you can use BigInteger, BigDecimal also"
24741479,2,1,2,java.math.BigDecimal,The one which is present is defined for BigDecimal code.
24770790,2,0,0,java.math.BigDecimal,Edit - in agreement with @scary-wombat - use BigDecimal - it has a constructor that takes a String.
24774917,1,0,1,java.math.BigDecimal,"Sample of I/O Input: 3.14 3.143111 Output: 6.283111 I'm trying to use objects called BigDecimals, but I can't use typical scanner function since the object BigDecimal has to be 'initiated' by some value, and I would like to leave it empty so that user will be able to type in the exact floating point."
24774917,1,0,1,java.math.BigDecimal,I would like to use BigDecimal instead of float type since it's more accurate.
24776658,2,0,5,java.math.BigDecimal,"If you want to keep your exact digits, you should use the String constructor of BigDecimal: code."
24776689,2,0,0,java.math.BigDecimal,use BigDecimal code.
24788707,1,0,0,java.math.BigDecimal,BigDecimal is not rounding good with ROUND_HALF_UP.
24788707,1,0,0,java.math.BigDecimal,"I am creating an app to calculate a mark average with percents, but the problem is that BigDecimal not always rounding the average, for example if the mark average is 3.85 BigDecimal ROUND_HALF_UP in scale 1 should round to 3.9 but it show the average like 3.8, that happened with only some specific times, sometimes BigDecimal round 4.95 like 5.0 and its good, but I don't know why happened and where is the problem."
24788887,2,0,2,java.math.BigDecimal,"You should use BigDecimal for calculations, not just for rounding."
24791446,1,0,0,java.math.BigDecimal,"I also got precision errors when trying to subtract the coordinates, since they are doubles, so I tried to use BigDecimal, but still with no success."
24851702,2,0,4,java.math.BigDecimal,"That String does not represent a long value but a floating point value, better represented as a double, float or BigDecimal."
24860745,2,0,0,java.math.BigDecimal,"As stated in the answers of the question proposed by Keppi, you could try to use BigDecimal class that avoid rounding errors accumulation and offers true decimal value accuracy."
24860745,2,0,0,java.math.BigDecimal,It allows you to use float or double in all your operations which can be simpler and faster than BigDecimal.
24860745,2,0,0,java.math.BigDecimal,"But I strongly advice you not to use that trick but to stick to BigDecimal if you do operations other than add or substract, for example VAT or any other per cent operation."
24909866,2,0,1,java.math.BigDecimal,You should replace double with BigDecimal.
24909963,2,0,1,java.math.BigDecimal,Use BigDecimal instead of double.
24910020,2,0,0,java.math.BigDecimal,"As long as primitive type double can only have a maximum value of ""1.7976931348623157e+308"" (64bit precision) you'll need to use BigDecimal in order to achieve precision http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"
24912666,2,0,0,java.math.BigDecimal,"Probably you want just to make minDistanceTotal = minDistanceCurrent just at beginning of the loop, and probably you want to use BigDecimal instead of double to avoid overflowing and inaccurate calculations, but I can't really say as I don't get the idea behind your algorithm."
24912666,2,0,0,java.math.BigDecimal,Maybe use BigDecimal instead of Double.
24936978,2,1,3,java.math.BigDecimal,"As for using an entirely different set of decimal fractions as values, see java.math.BigDecimal."
24948851,1,0,0,java.math.BigDecimal,Morphia ArrayStoreException BigDecimal and Integer Array.
24948851,1,0,0,java.math.BigDecimal,The document has a BigDecimal field that seem to be parsed successfully when running on the debugger.
24948851,1,0,0,java.math.BigDecimal,I note the use of BigDecimal because there are other posts mentioning BigDecimal and ArrayStoreException.
24948851,1,0,0,java.math.BigDecimal,"But, if I add the BigDecimal as a string it shows this error."
24948851,1,0,0,java.math.BigDecimal,This is the TypeConverter I use for the BigDecimal  code.
24954341,1,0,0,java.math.BigDecimal,BigDecimal Substract with negative result.
24986768,1,0,2,java.math.BigDecimal,Lack of precision using float and BigDecimal while setting opacity of JFrame.
24986768,1,0,2,java.math.BigDecimal,"I tried using BigDecimal, hoping to somehow keep precision, but it failed."
25014727,1,0,2,java.math.BigDecimal,Java rounding issue with BigDecimal and calculations [Solved].
25014727,1,0,2,java.math.BigDecimal,I have a data set which consists of BigDecimal numbers.
25014727,1,0,2,java.math.BigDecimal,"The report has to be accurate as well, hence the usage of BigDecimal."
25027467,1,0,0,java.math.BigDecimal,The way I found is to use BigDecimal.valueOf(testVO.getValue()) to parse it.
25028591,2,0,1,java.math.BigDecimal,"I use BigDecimal for calcuation process, and keep it as string and (numeric for sqlserver) in database."
25035813,2,1,2,java.math.BigDecimal,Note that this does not cover the case where value is a very large BigDecimal or BigInteger that cannot be expressed as double either.
25062826,1,0,2,java.math.BigDecimal,I think the solution to this question might ended up in either  How to find the digit of the factorial without calculating the factorial How to compute the factorial more efficiently (BigInteger or BigDecimal is preferable)  I would prefer 1. rather than 2. since I just want to know how many digits of the factorial.
25075078,2,1,3,java.math.BigDecimal,"If you want exactness, use BigDecimal: code."
25128029,2,0,0,java.math.BigDecimal,"You can parse it as a double or BigDecimal for validation and when you need it as input to arithmetic, but always output it using the original."
25108171,2,0,2,java.math.BigDecimal,"If, by any chance, you are not bound to using Double as the container of your numeric values, you may also consider BigDecimal, which can exactly represent an arbitrary value in decimal notation."
25108171,2,0,2,java.math.BigDecimal,"A larger issue is that the division of BigDecimal is an involved process because, by default, the API will insist on producing an exact result, which will fail for things as simple as 1/3."
25116197,2,0,2,java.math.BigDecimal,"Use the ResultSetMetaData for the column type, if it is Number (Integer, BigDecimal, ...) then use that type instead of Object for the column type: gives a right aligned column."
25117350,1,0,0,java.math.BigDecimal,//EDIT  public BigDecimal eval() { code.
25132632,2,1,2,java.math.BigDecimal,A prominent example is BigDecimal representing an immutable value object and where the add operation returns a newly constructed BigDecimal representing the old value plus the new value.
25137063,2,0,2,java.math.BigDecimal,"First, as Jon Skeet said in the comments, you could use arbitrary-precision arithmetic like BigDecimal."
25146631,1,0,0,java.math.BigDecimal,Writing custom code to compute BigDecimal powers.
25146631,1,0,0,java.math.BigDecimal,I've written my own code to calculate powers with BigDecimal parameters.
25146631,1,0,0,java.math.BigDecimal,"How can I determine whether my BigDecimal parameter op2 has digits to the right of the decimal point, and then determine what the value is?"
25146631,1,0,0,java.math.BigDecimal,"I am aware of the scale() function of BigDecimal, but I'm unsure of how it works."
25146794,2,0,1,java.math.BigDecimal,You can check use bd.remainder(BigDecimal.ONE): code.
25147344,2,0,1,java.math.BigDecimal,You should use BigDecimal.valueOf() for a start.
25147344,2,0,1,java.math.BigDecimal,"However, if you need more accuracy, you should use a library to use BigDecimal for the calculation."
25147344,2,0,1,java.math.BigDecimal,"To calculate power, a^b = exp(log(a)*b)  Have a look at this as an example Logarithm of a BigDecimal"
25154641,2,1,1,java.math.BigDecimal,"By the way you might introduce many types: BigDecimal, Integer and so on, allimplement Number, which might be used as ((Number)obj).longValue()."
25164304,2,0,2,java.math.BigDecimal,"If you want decimal precision in Java, use BigDecimal."
25164600,2,0,1,java.math.BigDecimal,"If one wants a precision with the value, one needs BigDecimal: code."
25164600,2,0,1,java.math.BigDecimal,"Using a String in the constructor, BigDecimal can set the precision."
25164600,2,0,1,java.math.BigDecimal,Not so nice writing expressions in BigDecimal though.
25179127,1,0,29,java.math.BigDecimal,Multiplying two numbers using BigDecimal returns a wrong value.
25179147,2,1,47,java.math.BigDecimal,You're not multiplying two numbers using BigDecimal.
25179147,2,1,47,java.math.BigDecimal,"You're multiplying them using double arithmetic, and passing the result to the BigDecimal constructor."
25203487,2,0,1,java.math.BigDecimal,"As Jon Skeet writes above, the reason why you are getting 0.179999999999999993338661852249060757458209991455078125 instead of 0.18 is because 0.06 * 3 is computed as an IEEE 754 double and then this double value is converted to a BigDecimal."
25179369,2,0,1,java.math.BigDecimal,Working better with BigDecimal#valueOf: code.
25182975,1,0,3,java.math.BigDecimal,BigInteger power of a BigDecimal in Java.
25182975,1,0,3,java.math.BigDecimal,"I cannot find an equivalent for that (BigInteger.modPow()) in java for  BigDecimal  , or i'm missing that."
25187030,2,0,0,java.math.BigDecimal,"As Gábor Bakos pointed out, the resulting value would most likely contain too many digits to even be represented as a BigDecimal."
25200453,2,0,3,java.math.BigDecimal,Converting an imprecise value to BigDecimal cannot make it precise.
25202456,1,0,2,java.math.BigDecimal,I tried to find the later using BigDecimal stripTrailingZeros() method but it is only removing zeros after decimal for eg  1200.000 is converted to 1200 by stripTrailingZeros() method but i want 12 as output any idea how to solve this problem?
25203022,1,0,0,java.math.BigDecimal,BigDecimal to String in java?
25203022,1,0,0,java.math.BigDecimal,"My idea was to use the BigDecimal(""String x"") constructor to convert the string back to BigDecimal."
25203067,2,1,5,java.math.BigDecimal,"From the docs:  The BigDecimal returned by this call has value (this × 10n) and scale max(this.scale()-n, 0)."
25210423,2,0,3,java.math.BigDecimal,You can use BigDecimal to manage your decimals.
25210423,2,0,3,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
25251460,1,0,1,java.math.BigDecimal,Java - How To Show Decimals with BigDecimal pow.
25251638,2,1,2,java.math.BigDecimal,"Since double cannot accurately represent the result of 2 - 1.11, the precision has already been lost by the time the constructor is used.Therefore you need to chain BigDecimal using the String based constructor code."
25252441,1,0,5,java.math.BigDecimal,"I want anyone to be able to pass it any of the classes that extend Number (BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, or Short) So far, I've attempted to use instanceof to find out what type the number is, then compare it to an equivalent type code."
25256885,1,0,2,java.math.BigDecimal,It came down to these two choices:  BigDecimal Double  Can you explain me a bit more what is the best choice for this endeavor?
25257222,2,0,0,java.math.BigDecimal,"I was looking at the BigDecimal API, and the class provide a high precision for the operation of rounding and converting."
25257222,2,0,0,java.math.BigDecimal,The BigDecimal class gives its user complete control over rounding   behavior.
25256980,2,1,2,java.math.BigDecimal,My suggestion is BigDecimal Check this out.
25256980,2,1,2,java.math.BigDecimal,In here they also used BigDecimal.
25256980,2,1,2,java.math.BigDecimal,And again it is helpful you to Rounding and Scaling in BigDecimal.
25257311,2,0,1,java.math.BigDecimal,"You must use a decimal radix, therefore BigDecimal."
25261979,2,0,0,java.math.BigDecimal,"Among others, Java has the BigDecimal class, and C# has the decimal type."
25288799,2,0,0,java.math.BigDecimal,should try using BigDecimal
25273271,2,0,0,java.math.BigDecimal,"For this problem you might want to look at the BigDecimal class, which can represent the numbers in your example."
25280455,2,1,1,java.math.BigDecimal,Following words from JPA spec apply   A simple primary key or a field or property of a composite primary key should be one of the following   types: any Java primitive type; any primitive wrapper type; java.lang.String;   java.util.Date; java.sql.Date; java.math.BigDecimal; java.math.BigInteger.
25293186,1,0,0,java.math.BigDecimal,"Research says I need to use the BigDecimal class, but I cannot cast a double into this."
25302464,2,0,2,java.math.BigDecimal,For example a String or BigDecimal is immutable and Date should have been.
25304003,2,0,3,java.math.BigDecimal,Use BigDecimal code.
25304770,1,0,0,java.math.BigDecimal,In particular I would like to be able to provide a value (double or preferably BigDecimal) and round down to the nearest multiple of a significance I provide.
25304770,1,0,0,java.math.BigDecimal,I am aware of BigDecimal but I might have missed the correct function.
25305084,2,0,0,java.math.BigDecimal,"To round a BigDecimal, you can use setScale()."
25314368,2,0,6,java.math.BigDecimal,Additional Info: Some people are telling you to use BigDecimal instead of double.
25314428,2,0,2,java.math.BigDecimal,BigDecimal can do this.
25315327,2,0,0,java.math.BigDecimal,I don't normally recommend BigDecimal but it seems to be what you want.
25315327,2,0,0,java.math.BigDecimal,In particular you want a BigDecimal with a scale of 6.
25327390,1,0,0,java.math.BigDecimal,"I already tried change the fields types to BigDecimal, Number, Long, Integer, Double, Float and everyone give me the same error."
25356854,2,0,1,java.math.BigDecimal,"In Java, you can use the BigDecimal class for decimal calculations."
25379698,2,0,2,java.math.BigDecimal,You can use BigDecimal easily code.
25381052,1,0,0,java.math.BigDecimal,Add pattern for BigDecimal type.
25381052,1,0,0,java.math.BigDecimal,I'd like to read that number as a BigDecimal.
25381052,1,0,0,java.math.BigDecimal,Or if I use Double instead of BigDecimal.
25381052,1,0,0,java.math.BigDecimal,"The Camel Bindy Documentation mentions that the grouping separater for BigDecimal can be set, but the table beneath that information says that the pattern is only supported for Decimals not the BigDecimal type."
25381052,1,0,0,java.math.BigDecimal,Also the source code of the used FormatFactory class shows that the pattern is not used for BigDecimal types.
25381052,1,0,0,java.math.BigDecimal,So my question is: how can I set and use a grouping separator for a BigDecimal type (like the docu mentioned).
25411096,2,0,3,java.math.BigDecimal,The @DataField of Camel bindy model proposes the parameter precision like also a pattern but not a grouping separator to parse data into a BigDecimal Example code.
25386098,2,0,1,java.math.BigDecimal,"If you want something more exact, you should use the BigDecimal class, which is an arbitrary precision decimal number."
25386098,2,0,1,java.math.BigDecimal,"You can set the number of places a BigDecimal stores by setting its scale using one of its setScale functions, which can also be used to set which rounding mode it uses when you do math operations on it."
25386098,2,0,1,java.math.BigDecimal,"Be aware that BigDecimal is an object type, so you need to use its methods to do math operations with it (.add, .subtract, .multiply, .divide)."
25386098,2,0,1,java.math.BigDecimal,"BigDecimal has constructors for creating a BigDecimal from a double, long, or int."
25398968,2,0,1,java.math.BigDecimal,use BigDecimal to prevent E notation from number code.
25405435,1,0,0,java.math.BigDecimal,JTDS Ignoring OpenJPA scale annotation on BigDecimal.
25405435,1,0,0,java.math.BigDecimal,I am persisting BigDecimal to MS SQL Server using OpenJPA and the JTDS driver.
25426456,1,0,1,java.math.BigDecimal,"In which cases the return type is java.math.BigDecimal for a native query with ""Select count(columnName) ...""."
25426456,1,0,1,java.math.BigDecimal,Today I got a ClassCastException because query.getSingleResult() returned a BigDecimal.
25426456,1,0,1,java.math.BigDecimal,"The hint in this answer tells Note that in some cases result type may depend on the database, i.e. it can be something like BigDecimal In which cases?"
25431210,1,0,1,java.math.BigDecimal,"I carefully started to compare to see if one of my BigDecimal variables in the domain doesn't have the correct precision, but after spending a lot of time, I realized this was not the case."
25434148,1,0,1,java.math.BigDecimal,"After searching the stack overflow, I noticed that if you are dealing with financial calculations, you need to use BigDecimal and not double."
25434148,1,0,1,java.math.BigDecimal,"To follow up on that, say for example, a Tip Calculator, Is it recommended to  use double or BigDecimal?"
25434148,1,0,1,java.math.BigDecimal,"If we use BigDecimal, how would save the data  to a file."
25434148,1,0,1,java.math.BigDecimal,I want to write the BigDecimal data to a file using FileUtils library.
25434683,2,0,0,java.math.BigDecimal,"BigDecimal has a string constructor, so it is easy to go back and forth (BigDecimal/String)."
25434618,2,0,0,java.math.BigDecimal,"Also, why is your query returning a List<BigDecimal> and List<Long>?"
25445500,1,0,0,java.math.BigDecimal,The problem is when the type is java.math.BigDecimal code.
25454734,1,0,10,java.math.BigDecimal,What is the difference between BigDecimal movePointRight and scaleByPowerOfTen?
25504720,1,0,0,java.math.BigDecimal,"following: Object which getClass() returns java.util.Vector and, when: java.util.Vector vector = (java.util.Vector)object; following: vector.get(0).getClass() returns java.math.BigDecimal vector.get(1).getClass() returns java.math.BigDecimal Is is possible Long to be returned for these 2 fields i.e. where the default mapping from sql columns to java is defined?"
25505046,2,1,0,java.math.BigDecimal,NUMERIC types is mapped to java.math.BigDecimal.
25509810,1,0,1,java.math.BigDecimal,BigDecimal format with DecimalFormat.
25509810,1,0,1,java.math.BigDecimal,I'm trying to get predictable behavior with rounding BigDecimal numbers to 15th digit.
25510494,2,0,2,java.math.BigDecimal,You're not actually using the BigDecimal for which you set the scale: code.
25510385,2,0,1,java.math.BigDecimal,You're setting the rounding mode for the BigDecimal.
25510385,2,0,1,java.math.BigDecimal,But what is rounding the last part of your output is not the BigDecimal.
25518280,2,1,2,java.math.BigDecimal,"The @NumberFormat annotation only applies to subclasses of java.lang.Number (Integer, Float, Double, BigDecimal, etc."
25532487,2,0,1,java.math.BigDecimal,"Therefore, I'd consider using BigInteger or BigDecimal, although I realize that change would require a lot more effort."
25534594,2,0,1,java.math.BigDecimal,valueOf in BigDecimal only works with double or long.
25534594,2,0,1,java.math.BigDecimal,But you can reassign a BigDecimal to another BigDecimal no matter how it was created.
25534361,2,0,1,java.math.BigDecimal,"If you mean can you recover the String that you started with, then sort of: you can turn the BigDecimal into a String again with toString()."
25534361,2,0,1,java.math.BigDecimal,"If you create a BigDecimal by passing it ""00"", you'll get back ""0"", but it represents the same number."
25542023,2,0,5,java.math.BigDecimal,It's BigDecimal.
25542023,2,0,5,java.math.BigDecimal,Note: It is important to use the BigDecimal constructor that takes a String.
25544441,2,1,0,java.math.BigDecimal,BigDecimal.toString() provides a canonical representation: code.
25555831,1,0,1,java.math.BigDecimal,Grails dbmigration plugin - Exception Unknown object type java.math.BigDecimal using dbm-gorm-diff.
25570485,2,0,4,java.math.BigDecimal,Use java's BigDecimal instead.
25570503,2,0,2,java.math.BigDecimal,"If it isn't enough, use BigDecimal."
25570546,2,1,2,java.math.BigDecimal,"However, another better option is to use BigDecimal which provides a method out-of-the box: code."
25570546,2,1,2,java.math.BigDecimal,"Note that, given BigDecimal class has arbitrary precision, you might well get long string there."
25597894,2,1,5,java.math.BigDecimal,But using BigDecimal is better.
25610866,2,0,0,java.math.BigDecimal,"It seems that your InvoiceItem class has String fields for  item type, for article number, for description, an int field for quantity, a BigDecimal field for price and a BigDecimal field for VAT."
25612414,1,0,2,java.math.BigDecimal,"new BigDecimal(""1.00"") correctly produces a BigDecimal with a scale of 2."
25612414,1,0,2,java.math.BigDecimal,"I'm doing it this way because the BigDecimal constructor can't handle strings with grouping separators, e.g., ""1,234.56""."
25613694,1,0,1,java.math.BigDecimal,"In fact, I have found that if I want to set an int or String or BigDecimal, setObject does the right thing for them as well."
25619142,1,0,1,java.math.BigDecimal,"$F{rate1}?new DecimalFormat(""##0.0000"").format(new   BigDecimal(""""+$F{rate1})):""-""  But if value of rate1 is 0 then also it is displaying ""-"" instead of 0.0000 What can be issue ?"
25638639,1,0,0,java.math.BigDecimal,Separate BigDecimal Fraction Part.
25638639,1,0,0,java.math.BigDecimal,I need to separate fractional part from BigDecimal and convert to Integer.
25653672,1,0,0,java.math.BigDecimal,"I have researched and found that by changing from BigDecimal to Formatdeciaml solves the problem, but I can't do that because then my mapper needs to be changed as well."
25673555,2,1,1,java.math.BigDecimal,Based on your comments this question is ultimately about taking unknown input and parsing it into a BigDecimal.
25658769,2,0,0,java.math.BigDecimal,Use BigDecimal like this code.
25726358,2,0,0,java.math.BigDecimal,"I'd also recommend using a BigDecimal instead of a double as suggested by Jon Skeet and Michael, due to the precision loss."
25730971,2,1,1,java.math.BigDecimal,"BigInteger, BigDecimal) go a tiny step farther and encapsulate their types into (usually immutable) value objects that (still) carry operations as standard method calls."
25730971,2,1,1,java.math.BigDecimal,"That makes usage a little more compact/shorter, since the compiler will provide a little more type checking and you would not need to qualify method names with a class name BigDecimal sum = a.add(b);."
25731778,1,0,0,java.math.BigDecimal,BigDecimal adding in java.
25731838,2,1,1,java.math.BigDecimal,"Even with BigDecimals, you are still performing integer division before the value even goes into the BigDecimal, with 1/sorted[i][j]."
25731838,2,1,1,java.math.BigDecimal,Then you'll find that BigDecimal is unnecessary and a double denom will work well.
25768000,2,0,0,java.math.BigDecimal,"Basically @PeterLawrey has correct solution, however I would use BigDecimal class for calculation and take double value as result (example : Using BigDecimal to work with currencies)."
25777378,2,0,0,java.math.BigDecimal,"As @Laf pointed out, use BigDecimal instead."
25777378,2,0,0,java.math.BigDecimal,"Hint: BigDecimal has a method divideAndRemainder() which returns a BigDecimal[], where the first part is the quotient, and the second part is the remainder."
25777378,2,0,0,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#divideAndRemainder%28java.math.BigDecimal%29
25774353,2,0,2,java.math.BigDecimal,Short version: Use BigDecimal and it's scale() method.
25774353,2,0,2,java.math.BigDecimal,"Long version:  You specifically mentioned that you prefer the solution you use to be  ""Math only"" (ambiguous but I can guess what you mean) Get the number of digits from a double, presumably the fractional part (based on your expected output)  Here is a solution that uses java.math.BigDecimal to do so:  code."
25774353,2,0,2,java.math.BigDecimal,Note that instantiating BigDecimal from double like this will eventually give you surprising results.
25774353,2,0,2,java.math.BigDecimal,"Consider the scale() of BigDecimal.valueOf(0.1 + 0.1 + 0.1), which is 17."
25773845,2,0,2,java.math.BigDecimal,You need to use the BigDecimal class which specifies a precision.
25778185,1,0,0,java.math.BigDecimal,Why does int + BigDecimal not work?
25778185,1,0,0,java.math.BigDecimal,"I encountered this problem, which was that I couldn't add an integer to a BigDecimal."
25778185,1,0,0,java.math.BigDecimal,How do I add integer to BigDecimal?
25778204,2,0,0,java.math.BigDecimal,"You can create a BigDecimal out of an integer using the BigDecimal(int) constructor, as in new BigDecimal(1) or BigDecimal.ONE (thanks, Herp Derpington)."
25778204,2,0,0,java.math.BigDecimal,"Like Integer and Double, `BigDecimal instances are immutable, which means that any one BigDecimal instance will never change value, and thus you can share or reuse instances that represent the same number."
25778204,2,0,0,java.math.BigDecimal,"Unlike Integer and Double, BigDecimal does not participate in autoboxing, which is the translation from int primitives to Integer object instances (and likewise across other types)."
25778204,2,0,0,java.math.BigDecimal,"In Java, operators like + and / apply only to primitives; though you can call sqf.add(BigDecimal.ONE), there is no way to use + or call sqf.add(1)."
25778204,2,0,0,java.math.BigDecimal,"To operate on BigDecimal instances, you'll need to constrain yourself to its methods (such as add and divide), passing in BigDecimal instances (newly-created, if necessary)."
25778216,2,0,1,java.math.BigDecimal,BigDecimal is immutable.
25778216,2,0,1,java.math.BigDecimal,You can add by constructing a new BigDecimal class.
25778222,2,0,1,java.math.BigDecimal,BigDecimal bd = BigDecimal.ONE.add(sqf).divide(new BigDecimal(2))  Standard operators apply to primitives only.
25778546,2,0,0,java.math.BigDecimal,You can also use BigDecimal object's intvalue() function like this: BigDecimal bd = new BigDecimal((1 + sqf.intValue()) / 2);
25778346,2,0,0,java.math.BigDecimal,"Java doesn't have operator overloading, thus any standard operator applies to primitive type only BigDecimal isn't included in the autoboxing mechanism, because it doesn't have primitive type representation Read up BigDecimal API, it implements mathematical operators as methods (which mostly requires another BigDecimal instance as operand."
25778372,2,0,0,java.math.BigDecimal,"BigDecimal and BigInteger are not primitive types, so you can not use math signs directly with them."
25793549,1,0,0,java.math.BigDecimal,"That is, for example, when the user enters a String for a parameter that should be a BigDecimal."
25807693,2,0,0,java.math.BigDecimal,Using BigDecimal is a possible solution.
25807717,2,0,0,java.math.BigDecimal,IDEONE Using BigDecimal is good alternative.
25810916,1,0,2,java.math.BigDecimal,Castor generate BigDecimal type for integer type in xsd.
25810916,1,0,2,java.math.BigDecimal,But Castor generate only BigDecimal type for this schema : code.
25811316,2,0,1,java.math.BigDecimal,From http://castor.codehaus.org/1.2/srcgen-example.html  Schema decimal type is mapped to a java.math.BigDecimal.
25815537,1,0,1,java.math.BigDecimal,"It would be really nice if the end user were to pass, say, a String instead of a BigDecimal, that the response would return a json with the response code, status, and whatever else I'd like it to contain, rather than just a 400."
25815537,1,0,1,java.math.BigDecimal,"Also, there is a way to handle this quite easily with a Bean type that I could create on my own, but what about standard types like BigDecimal?"
25816002,2,0,0,java.math.BigDecimal,Create a form backing object and nest a BigDecimal field code.
25818298,2,0,0,java.math.BigDecimal,"Or use another number type, like BigDecimal."
25822991,1,0,0,java.math.BigDecimal,"{serializeNulls:falsefactories:[Factory[typeHierarchy=com.google.gson.JsonElement,adapter=com.google.gson.internal.bind.TypeAdapters$25@1626cd8], com.google.gson.internal.bind.ObjectTypeAdapter$1@d8130f, com.google.gson.internal.Excluder@1cb79b7, Factory[type=java.lang.String,adapter=com.google.gson.internal.bind.TypeAdapters$13@1a3e88e], Factory[type=java.lang.Integer+int,adapter=com.google.gson.internal.bind.TypeAdapters$7@1f8f4b6], Factory[type=java.lang.Boolean+boolean,adapter=com.google.gson.internal.bind.TypeAdapters$3@18a01be], Factory[type=java.lang.Byte+byte,adapter=com.google.gson.internal.bind.TypeAdapters$5@17892f9], Factory[type=java.lang.Short+short,adapter=com.google.gson.internal.bind.TypeAdapters$6@f92fba], Factory[type=java.lang.Long+long,adapter=com.google.gson.internal.bind.TypeAdapters$8@1ac9a62], Factory[type=java.lang.Double+double,adapter=com.google.gson.Gson$3@577d32], Factory[type=java.lang.Float+float,adapter=com.google.gson.Gson$4@1dc64f9], Factory[type=java.lang.Number,adapter=com.google.gson.internal.bind.TypeAdapters$11@11c9201], Factory[type=java.lang.Character+char,adapter=com.google.gson.internal.bind.TypeAdapters$12@b590a2], Factory[type=java.lang.StringBuilder,adapter=com.google.gson.internal.bind.TypeAdapters$16@2aaa34], Factory[type=java.lang.StringBuffer,adapter=com.google.gson.internal.bind.TypeAdapters$17@10c5fe9], Factory[type=java.math.BigDecimal,adapter=com.google.gson.internal.bind.TypeAdapters$14@16cc7de], Factory[type=java.math.BigInteger,adapter=com.google.gson.internal.bind.TypeAdapters$15@b5e57b], Factory[type=java.net.URL,adapter=com.google.gson.internal.bind.TypeAdapters$18@1ecf0a7], Factory[type=java.net.URI,adapter=com.google.gson.internal.bind.TypeAdapters$19@ab85c1], Factory[type=java.util.UUID,adapter=com.google.gson.internal.bind.TypeAdapters$21@da57c9], Factory[type=java.util.Locale,adapter=com.google.gson.internal.bind.TypeAdapters$24@b97fd2], Factory[typeHierarchy=java.net.InetAddress,adapter=com.google.gson.internal.bind.TypeAdapters$20@76ebc2], Factory[type=java.util.BitSet,adapter=com.google.gson.internal.bind.TypeAdapters$2@17010de], com.google.gson.internal.bind.DateTypeAdapter$1@6394e6, Factory[type=java.util.Calendar+java.util.GregorianCalendar,adapter=com.google.gson.internal.bind.TypeAdapters$23@1c4a703], com.google.gson.internal.bind.TimeTypeAdapter$1@1b0cd6e, com.google.gson.internal.bind.SqlDateTypeAdapter$1@7f168d, com.google.gson.internal.bind.TypeAdapters$22@1a1bfc2, com.google.gson.internal.bind.ArrayTypeAdapter$1@346299, com.google.gson.internal.bind.TypeAdapters$26@1353425, Factory[type=java.lang.Class,adapter=com.google.gson.internal.bind.TypeAdapters$1@1f28052], com.google.gson.internal.bind.CollectionTypeAdapterFactory@692098, com.google.gson.internal.bind.MapTypeAdapterFactory@1dae9ba, com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory@126d002, com.google.gson.internal.bind.ReflectiveTypeAdapterFactory@1225df4],instanceCreators:{}}"
25831817,1,0,1,java.math.BigDecimal,"If the number appears to be a floating point value, then I need to return the smallest type I can use without sacrificing precision (Float, Double or BigDecimal)."
25831817,1,0,1,java.math.BigDecimal,"If below 53 I return a Double, otherwise a BigDecimal."
25831817,1,0,1,java.math.BigDecimal,"Another idea I had was to convert the string to a BigDecimal and scale down using floatValue() and doubleValue(), testing for overflow (which is represented by infinite values)."
25834542,2,0,0,java.math.BigDecimal,BigDecimal can store any finite length decimal fraction exactly and do arithmetic on it: Convert the String to the nearest float x.
25834542,2,0,0,java.math.BigDecimal,Convert the String exactly to BigDecimal y.
25834542,2,0,0,java.math.BigDecimal,"If not, convert the float x to BigDecimal, z."
25834542,2,0,0,java.math.BigDecimal,"Calculate, in BigDecimal to a reasonable number of decimal places, the absolute value of (y-z)/z."
25848183,2,0,0,java.math.BigDecimal,There are two alternatives for real numbers: double (an approximation of a real number) or BigDecimal (maintaining a precission).
25893830,2,0,2,java.math.BigDecimal,It is the call to the BigDecimal constructor with a string that cannot be interpreted as a decimal that is blowing up.
25877821,1,0,0,java.math.BigDecimal,What's the best way to fail String to BigDecimal conversion hard?
25878979,1,0,0,java.math.BigDecimal,Using BigDecimal in number factorisation.
25879572,2,1,1,java.math.BigDecimal,"Use idx = idx.add(BigDecimal.ONE) By the way, you can also replace i <= input by (idx.compareTo(input)) < 1 code."
25900724,2,0,1,java.math.BigDecimal,To convert to double value use BigDecimal class doubleValue().
25905519,1,0,0,java.math.BigDecimal,"I've tried almost everything, BigDecimal, NumberFormat DecimalFormat(##.###) I already have a String in the program and would not know how to add another."
25905609,2,0,0,java.math.BigDecimal,Use BigDecimal instead.
25910271,2,1,0,java.math.BigDecimal,You can use BigDecimal for this type of comparison: code.
25916289,1,0,0,java.math.BigDecimal,"When I change the access modifier of BigDecimal of BaseClazz to public from protected, I see that everything works as expected."
25942313,1,0,0,java.math.BigDecimal,"I have tried DecimalFormat (appears to return a string, I need a numerical value that can be used in another stage of calculations) I have tried BigDecimal (cannot seem to figure out how to construct it and setScale)."
25942378,2,0,0,java.math.BigDecimal,change  slope1 = new BigDecimal((8 - 8) / (20 - 5));  to  slope1 = new BigDecimal(((double)8 - 8) / ((double)20 - 5));
25956540,1,0,0,java.math.BigDecimal,Estimate BigDecimal Calculation time.
25956540,1,0,0,java.math.BigDecimal,I have made a scientific calculator which uses BigDecimal.
25956540,1,0,0,java.math.BigDecimal,Is there anyway to pre-calculate the time that each BigDecimal operation takes?
25964754,1,0,1,java.math.BigDecimal,Calculating PI with BigDecimal.
25964754,1,0,1,java.math.BigDecimal,This is my first time using a BigDecimal and I am having some troubles with it.
25964774,2,1,3,java.math.BigDecimal,"From the first line from the BigDecimal API  Immutable, arbitrary-precision signed decimal numbers."
25985543,2,1,1,java.math.BigDecimal,"Not to mention that other type like BigDecimal in java, you need to convert it as well."
25981473,2,0,2,java.math.BigDecimal,You are converting BigDecimal back to double which essentially trim the trailing zeros.
25981473,2,0,2,java.math.BigDecimal,You can return either BigDecimal or BigDecimal.toPlainString().
25981630,2,1,4,java.math.BigDecimal,"First, casting double to BigDecimal in order to round it is very inefficient approach."
25986452,2,1,0,java.math.BigDecimal,As stated by @dasblinkenlight you can use methods from BigDecimal and combine them with a splitter.
25986452,2,1,0,java.math.BigDecimal,"I wouldn't count the decimal points though, easier to stick with BigDecimal."
25985991,2,0,1,java.math.BigDecimal,"To fix this problem, you could use BigDecimal or even a String data type."
25985991,2,0,1,java.math.BigDecimal,"If you use BigDecimal, simply rewrite your algorithm using the methods of BigDecimal."
26011325,2,1,0,java.math.BigDecimal,So in the end I went with passing in BigDecimal from Java and using NUMBER in plsql (though integer would have worked as well).
25997383,2,0,0,java.math.BigDecimal,If you don't want to use BigDecimal this will work if you still want to use primitive type double.
25997387,2,0,1,java.math.BigDecimal,Use BigDecimal instead of double.
25997387,2,0,1,java.math.BigDecimal,"Use new BigDecimal(""12.34"") to let BigDecimal know the precision."
25999498,1,0,0,java.math.BigDecimal,String value from a JTable to BigDecimal throws Java.lang.NumberFormatException.
25999498,1,0,0,java.math.BigDecimal,I have created an object named Numbers3 which in its attributes has a BigDecimal variable.
25999498,1,0,0,java.math.BigDecimal,"The problem comes when I am trying to retreive the data from a JTable; I convert the object to String, but when it faces BigDecimal(String) it throws an exception: code."
25999961,2,1,0,java.math.BigDecimal,Try to normalize string to fit BigDecimal requirements: code.
25999961,2,1,0,java.math.BigDecimal,Above code removes all whitespace characters from input string (which are not allowed in BigDecimal constructor).
26011598,2,0,0,java.math.BigDecimal,If you want to have huge number you can use BigDecimal easily code.
26024766,2,1,5,java.math.BigDecimal,If you give it a BigDecimal for example it will print it even though C doesn't have a BigDecimal.
26068146,2,0,2,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal class instead."
26068146,2,0,2,java.math.BigDecimal,Numbers and Strings covers BigDecimal and other useful classes provided by the Java platform.
26068146,2,0,2,java.math.BigDecimal,"Use BigDecimal, it also have the rounding functionalities that you're looking for."
26069522,1,0,0,java.math.BigDecimal,How to set specific precision to BigDecimal in Java?
26069522,1,0,0,java.math.BigDecimal,I have BigDecimal value.
26077775,1,0,0,java.math.BigDecimal,I am trying to figure out which 'Library'  the BigDecimal Class resides in.
26077775,1,0,0,java.math.BigDecimal,"I assume this is entirely different - so here are my sub-questions: First - am I correct in saying that the java Math class resides in the java.lang library second -  Does java.math.BigDecimal extend java.lang.Number, and if not, how are they related?"
26077853,2,0,1,java.math.BigDecimal,"in the context of BigDecimal ""math"" is just a package name."
26077853,2,0,1,java.math.BigDecimal,"The package java.math contains math related classes like BigDecimal.java and BigInteger.java While the class java.lang.Math is an actual Java class which resides in the packae 'java.lang' So BigDecimal.java and Math.java are both Java classes that resides in two different 'packages' (think of folders) even if they're both ""Math"" related ."
26081284,2,0,1,java.math.BigDecimal,"If you would like to perform precise operations on decimal values Java, use BigDecimal type instead of `double."
26081402,2,0,0,java.math.BigDecimal,All you can do is to use data types with higher precision (bits) like   java.math.BigDecimal.
26081402,2,0,0,java.math.BigDecimal,Read The need for BigDecimal by John Zukowski for more information.
26083337,2,0,7,java.math.BigDecimal,"not being able to represent 0.1 exactly)... use BigDecimal, or store an integer number of cents (or whatever currency unit you're using)."
26087030,2,0,1,java.math.BigDecimal,"You should then convert the number to a double or BigDecimal, and make sure you get the radix point back in place, by dividing by the correct number."
26104022,2,1,2,java.math.BigDecimal,Look at the binary representations of those BigDecimal values (I used my Decimal/Binary Converter): code.
26092611,2,1,1,java.math.BigDecimal,will print : 24 suppose your input is 4.241 then you have to add 1 extra 0 in BigDecimal bd formula i.e. instead of 100 it ll be 1000.
26101918,1,0,0,java.math.BigDecimal,Java format BigDecimal numbers with comma and 2 decimal place.
26101918,1,0,0,java.math.BigDecimal,I want to format BigDecimal Numbers with comma and 2 decimal points.
26102362,1,0,1,java.math.BigDecimal,Round up BigDecimal to Integer value.
26102362,1,0,1,java.math.BigDecimal,"I have a BigDecimal which value is 450.90, I want to round up to next hole integer value, and then print the Integer value without any decimal points, like this; Val: 450.90 -> Rounded: 451.00 -> Output: 451 Val: 100.00001 -> Rounded: 101.00000 Output: 101 Checked some solutions but I'm not getting the expected result, heres my code; code."
26102434,2,1,6,java.math.BigDecimal,"setScale returns a new BigDecimal with the result, it doesn't change the instance you call it on."
26102446,2,0,1,java.math.BigDecimal,"note that BigDecimal is invariant   Scaling/rounding operations (setScale and round) return a BigDecimal   whose value is approximately (or exactly) equal to that of the   operand, but whose scale or precision is the specified value; that is,   they increase or decrease the precision of the stored number with   minimal effect on its value."
26102742,2,0,0,java.math.BigDecimal,"From method description:  Note that since BigDecimal objects are immutable, calls of setScale   method do not result in the original object being modified, contrary   to the usual convention of having methods named setX mutate field X."
26109204,2,1,4,java.math.BigDecimal,"Of course, neither double or float are ""correct"" for money, which should be dealt with using a fixed precision type, such as that provided by BigDecimal."
26109204,2,1,4,java.math.BigDecimal,BigDecimal and Money
26120449,2,1,141,java.math.BigDecimal,"For example 0.1 is not exactly 0.1 i.e. new BigDecimal(""0.1"") < new BigDecimal(0.1) but 0.5 is exactly 1.0/2 This program shows you the true values involved."
26130797,1,0,0,java.math.BigDecimal,Grails UnitTest Ensure BigDecimal not a string.
26130797,1,0,0,java.math.BigDecimal,"I get the error org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'ss' with class 'java.lang.String' to class 'java.math.BigDecimal' I want to ensure that a string cannot be entered, and the hours field is in whole or half hour increments."
26131510,2,1,2,java.math.BigDecimal,You are assigning a String value to a property of type BigDecimal.
26136352,1,0,0,java.math.BigDecimal,With Calendar instead of GregorianCalendar and Number instead of Integer and BigDecimal.
26138548,1,0,1,java.math.BigDecimal,"Java, BigDecimal: How do I unit-test for rounding errors?"
26138859,2,1,1,java.math.BigDecimal,"The trick is to give up when you're confident that you know enough :-) In your case, a few simple test cases are:  Empty arrays Create a second algorithm which uses precise arithmethics (like BigDecimal input arrays) to calculate error margins for selected inputs Two arrays which are filled with the same values."
26152692,1,0,2,java.math.BigDecimal,Each Object[] in the list has a BigDecimal at index 0 and a Long at index 1.
26152692,1,0,2,java.math.BigDecimal,"The BigDecimal is actually a date, something like 20141001."
26183291,2,0,0,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal class instead."
26183291,2,0,0,java.math.BigDecimal,Numbers and Strings covers BigDecimal and other useful classes provided by the Java platform.
26183291,2,0,0,java.math.BigDecimal,So use BigDecimal and you'll have no problem.
26183041,2,0,5,java.math.BigDecimal,BigDecimal is probably your best bet for exact decimal representations.
26183041,2,0,5,java.math.BigDecimal,"It's immutable, so every operation you do to it will result in you creating a new BigDecimal instance, but its precision is also likely what you need."
26198241,2,0,0,java.math.BigDecimal,"It's really better to use BigDecimal rather than double for financial calculations, if you want exact answers."
26198241,2,0,0,java.math.BigDecimal,I'm not sure whether or not you've learnt about BigDecimal in your course.
26204306,1,0,1,java.math.BigDecimal,String to BigDecimal.
26204306,1,0,1,java.math.BigDecimal,I have a problem with BigDecimal.
26204306,1,0,1,java.math.BigDecimal,"If I want to store the values ​​in BigDecimal, I get this error message:   10-05 17:58:51.759: E/AndroidRuntime(28053): FATAL EXCEPTION: main   10-05 17:58:51.759: E/AndroidRuntime(28053): Process: com.XXX.XXXX, PID: 28053   10-05 17:58:51.759: E/AndroidRuntime(28053): java.lang.NumberFormatException: Invalid long: ""0,3""   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.lang.Long.invalidLong(Long.java:124)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.lang.Long.parse(Long.java:361)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.lang.Long.parseLong(Long.java:352)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.lang.Long.parseLong(Long.java:318)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.math.BigDecimal."
26204306,1,0,1,java.math.BigDecimal,(BigDecimal.java:344)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.math.BigDecimal.
26204306,1,0,1,java.math.BigDecimal,(BigDecimal.java:425)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at com.XXX.XXXX.ListeActivity$1.onItemClick(ListeActivity.java:288) 10-05 17:58:51.759: E/AndroidRuntime(28053):  at android.widget.AdapterView.performItemClick(AdapterView.java:299)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.widget.AbsListView.performItemClick(AbsListView.java:1113)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.widget.AbsListView$PerformClick.run(AbsListView.java:2911)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.widget.AbsListView$3.run(AbsListView.java:3645)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.os.Handler.handleCallback(Handler.java:733)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.os.Handler.dispatchMessage(Handler.java:95)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.os.Looper.loop(Looper.java:136)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at android.app.ActivityThread.main(ActivityThread.java:5001)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.lang.reflect.Method.invokeNative(Native Method)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at java.lang.reflect.Method.invoke(Method.java:515)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:785)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:601)   10-05 17:58:51.759: E/AndroidRuntime(28053):    at dalvik.system.NativeStart.main(Native Method)  My proceed as: code.
26204306,1,0,1,java.math.BigDecimal,"I only work with String and BigDecimal, but the error is float."
26218508,2,0,0,java.math.BigDecimal,As others have said: Either use BigDecimal or -- the better solution in most cases -- do your calculations in pennies rather than dollars.
26218483,2,0,1,java.math.BigDecimal,"Due to the inherent uncertainty involved with floating point arithmetic, you should always use BigDecimal for mathematical operations where knowing you have the ""right"" answer is important (tax program would be a good example where that's important)."
26218483,2,0,1,java.math.BigDecimal,"This question has a good example, take good note of the first answer: Using BigDecimal to work with currencies"
26218485,2,0,1,java.math.BigDecimal,Use BigDecimal instead.
26227402,1,0,0,java.math.BigDecimal,Previously I had stored the value internally as a BigDecimal value and then converted that to and from a double value when moving in and out of the database.
26227402,1,0,0,java.math.BigDecimal,Unfortunately Realm.io doesn't support storage and retrieval of BigDecimal objects.
26230705,2,1,1,java.math.BigDecimal,"We don't support BigDecimal for now, and before we do we will have to see how that plays in relation to all other language bindings since we want realm files to be compatible across all the supported platforms."
26230705,2,1,1,java.math.BigDecimal,If you don't need the arbitrary precision property of BigDecimal you could use long and multiply/divide by the factor your required precision calls for.
26230227,2,0,1,java.math.BigDecimal,"That could work, but would probably be suboptimal if do calculations on your current BigDecimal objects."
26230227,2,0,1,java.math.BigDecimal,"I would also suggest going to https://github.com/realm/realm-java/issues and make a feature request for this as BigDecimal is probably one of those java classes used by so many that it could warrant native Realm support, just like Date has."
26231788,1,0,0,java.math.BigDecimal,This makes using floating point primitives a real pain in Java (Yes I am aware of BigDecimal etc.)?
26234067,1,0,4,java.math.BigDecimal,where Foo class has a constructor which accepts a BigDecimal.
26234067,1,0,4,java.math.BigDecimal,Is using NumberTemplate the correct way to select BigDecimal literals?
26244636,2,0,1,java.math.BigDecimal,"But more important is the type safe setting of fields: I altered the salary field to use BigDecimal, appropriate for numeric values with decimals (SQL column type DECIMAL or so)."
26258493,1,0,0,java.math.BigDecimal,How to parse BigDecimal into Text with EU decimal separator but no decimal numbers at the end?
26258493,1,0,0,java.math.BigDecimal,"I need to be able to be able to parse a ""1.000,"" string into a BigDecimal with value 1000 and then parse that same BigDecimal back into a ""1.000,"" string."
26260423,1,0,6,java.math.BigDecimal,"The structure of these objects is controlled by another group and they changed a field type from BigDecimal to a Long, but the data in our database remains the same."
26264035,2,1,1,java.math.BigDecimal,BigDecimal to Long sounds like a retrograde step anyway.
26280573,2,0,0,java.math.BigDecimal,BigDecimal is more accurate than double.
26280573,2,0,0,java.math.BigDecimal,If you need precise calculations BigDecimal should be used rather than float and double.
26295682,1,0,0,java.math.BigDecimal,"On tomcat 7 (debian stable) submitting this form raises an error because Spring doesn't resolve value 1,173 as BigDecimal value."
26306173,1,0,0,java.math.BigDecimal,"Where I live the money fields follow the pattern: XXX.XXX.XXX,XX In my database I have a Decimal field represented in model with BigDecimal."
26312985,1,0,10,java.math.BigDecimal,Why this weird output with truncate and BigDecimal?
26312985,1,0,10,java.math.BigDecimal,I tried it with BigDecimal too.
26317166,2,0,3,java.math.BigDecimal,"If decimal truncation is central to the problem, and more important than performance and space, use BigDecimal."
26316975,2,1,3,java.math.BigDecimal,It is highly recommended that you use BigDecimal and BigInteger instead.
26316975,2,1,3,java.math.BigDecimal,In my answer I want to elaborate on how you are using BigDecimal wrongly and how you can use it correctly.
26316975,2,1,3,java.math.BigDecimal,"Even though you are trying to use BigDecimal here, you are still performing the addition using regular floating point calculations."
26316975,2,1,3,java.math.BigDecimal,"Here, two BigDecimal objects are created to match exactly 0.7 and 0.1, then the add method is used to calculate their sum and produce a third BigDecimal object (which will be 0.8 exactly)."
26316975,2,1,3,java.math.BigDecimal,"Using the valueOf static method instead of the constructor ensures the created BigDecimal object represents the exact double value as it is shown when converted to a string (0.7 as a string is ""0.7""), rather than the approximate value stored by the computer to represent it (the computer stores 0.7 as 0.699999999 ad infinitum)."
26319367,2,0,8,java.math.BigDecimal,It's exactly the same as with BigInteger or BigDecimal.
26319367,2,0,8,java.math.BigDecimal,"Would more people be happy if they could write x += BigDecimal.valueOf(""123456.654321"") + 10;, or spouse[""Paul""] = ""Mary"";, or use 2D arrays without the boilerplate, or what?"
26329747,2,0,0,java.math.BigDecimal,Though if accuracy is important I reccomended using the BigDecimal class.
26339519,2,1,6,java.math.BigDecimal,"You have to use BigDecimal, because you can have problems with loss of precision."
26340688,1,0,4,java.math.BigDecimal,I have a class Foo with these fields:   id:int / name;String / targetCost:BigDecimal / actualCost:BigDecimal  I get an arraylist of objects of this class.
26345170,2,1,0,java.math.BigDecimal,Note that I have replaced float/double with BigDecimal in order to address floating point precision/representation issues.
26345170,2,1,0,java.math.BigDecimal,Further note that I have used the String constructor of BigDecimal to avoid an insipid form of the same precision/representation issues.
26348679,1,0,5,java.math.BigDecimal,Canonical representation of a BigDecimal.
26348679,1,0,5,java.math.BigDecimal,What is the simplest way to reduce a Java BigDecimal containing an arbitrary value to a canonical form so that two BigDecimal's representing the same number will compare equal using the equals() method?
26349412,2,1,2,java.math.BigDecimal,It specifically recommends this in the Javadoc  Two BigDecimal objects that are equal in value but have a different scale (like 2.0 and 2.00) are considered equal by this method.
26349412,2,1,2,java.math.BigDecimal,"If you actually want to convert the BigDecimal so that .equals() will work, just use the setScale method."
26348853,1,0,0,java.math.BigDecimal,Convert java.math.BigDecimal to scala.math.BigDecimal?
26348853,1,0,0,java.math.BigDecimal,"I am trying to convert a java.math.BigDecimal to a scala.math.BigDecimal, and I can't find a method to do it."
26348853,1,0,0,java.math.BigDecimal,"I've tried to convert a List[BigDecimal] in the following way, code."
26358929,2,0,1,java.math.BigDecimal,"/**The abstract class Number is the superclass of classes BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, and Short."
26364667,1,0,4,java.math.BigDecimal,BigDecimal.ZERO vs. new BigDecimal(0).
26364667,1,0,4,java.math.BigDecimal,"The reason I ask is that it is improper to declare it the first way since you are not supposed to create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)."
26364667,1,0,4,java.math.BigDecimal,Instead of me having to create a variable zero or something that is equal to BigDecimal.ZERO.
26365081,2,0,5,java.math.BigDecimal,"BigDecimal doesn't have a constructor that takes a BigDecimal as an argument, so that explains why Eclipse would not be happy with that."
26365081,2,0,5,java.math.BigDecimal,"BigDecimal is immutable, which means once you create an object its state never changes."
26365081,2,0,5,java.math.BigDecimal,"Also BigDecimal's equals and hashcode methods are overridden to go by value, as opposed to Object's default implementation, which compares references."
26365081,2,0,5,java.math.BigDecimal,"So there is no difference between BigDecimal.ZERO and new BigDecimal(""0"") from the point of view of how they are used, except that creating a new instance is more work for the JVM (and will generate more garbage when you don't need that object any more)."
26365081,2,0,5,java.math.BigDecimal,BigDecimal's being immutable and value-based means what specific reference is used won't matter to the code using the BigDecimal.
26365081,2,0,5,java.math.BigDecimal,"Because BigDecimal.ZERO is already created for you and comparisions between BigDecimals are by value, it makes sense to minimize the number of values you use so that your programs create less garbage."
26365081,2,0,5,java.math.BigDecimal,That's why you're getting encouraged to use BigDecimal.ZERO.
26365086,2,1,7,java.math.BigDecimal,"As soon as you perform some operation on your totalCurrentSales instance, you'll actually be creating a new BigDecimal and reassigning the totalCurrentSales reference to the new value."
26365086,2,1,7,java.math.BigDecimal,"In the OpenJDK 6b14 implementation, for example, BigDecimal.ZERO is created by invoking the private new BigDecimal(BigInteger, long, int) constructor with values BigInteger.ZERO, 0, and 0."
26365086,2,1,7,java.math.BigDecimal,"From a code quality perspective, using BigDecimal.ZERO is preferable to new BigDecimal(0) as you avoid the extra instantiation and having a literal in your code."
26375442,2,0,0,java.math.BigDecimal,TL:DR;  Use BigDecimal for high precision floating point numbers Use Comparable and Collections.sort() for sorting  Full Answer It looks like you have a class that looks a little like this: code.
26375442,2,0,0,java.math.BigDecimal,"If that is the case, then I'd be tempted to change it up a bit and work with BigDecimal."
26375442,2,0,0,java.math.BigDecimal,BigDecimal is an object designed for working with decimal numbers when high precision is required.
26375442,2,0,0,java.math.BigDecimal,"Since one of your sample distances has 13 decimal places, I'd be heading straight for BigDecimal."
26375442,2,0,0,java.math.BigDecimal,"From here, you can rely on the fact that BigDecimal implements the Comparable interface, so it has a compareTo method."
26375442,2,0,0,java.math.BigDecimal,So you can implement Comparable for Track and then just delegate to the compareTo method on BigDecimal.
26375442,2,0,0,java.math.BigDecimal,you can replace all of your checking of the distances (because the compareTo on BigDecimal is doing it for you) and just call Collections.sort() on a list of the Track objects.
26375442,2,0,0,java.math.BigDecimal,"Also, here's some documentation for some of the things I've mentioned in case they're new concepts:  BigDecimal Comparable Collections.sort()"
26409235,1,0,1,java.math.BigDecimal,Java's BigDecimal doesn't seem like good enough.
26409345,2,1,1,java.math.BigDecimal,"There is not (if you don't like BigDecimal); however, you can make a class to represent it using BigInteger and BigDecimal."
26409243,1,0,1,java.math.BigDecimal,Convert BigDecimal to String with no trailing zeros.
26409243,1,0,1,java.math.BigDecimal,I want to remove all trailing zeros from a BigDecimal and print it.
26430189,1,0,2,java.math.BigDecimal,Java Double Trouble - How can I ensure 4.45 is 4.45 without using BigDecimal?
26430189,1,0,2,java.math.BigDecimal,The target code is high performance with a LOT of data so we don't want to use BigDecimal.
26430189,1,0,2,java.math.BigDecimal,The accuracy involved in using BigDecimal is major overkill.
26430331,2,0,2,java.math.BigDecimal,"If you want to be exact, I don't see any way around using BigDecimal."
26430403,2,0,0,java.math.BigDecimal,"As mentioned in the other answer though, BigDecimal will be your best bet to ensure accuracy."
26434588,2,1,1,java.math.BigDecimal,"If this is supposed to represent money, then I would only use BigDecimal to avoid floating-point representation and calculation issues."
26434592,2,0,0,java.math.BigDecimal,"To work with arbitrary length numbers in Java, you can use BigDecimal or BigInteger."
26451094,2,0,0,java.math.BigDecimal,I would recommend converting this code to us BigDecimal to avoid this problem.
26452994,2,0,2,java.math.BigDecimal,Use it in a method which would convert those string into a new BigDecimal and return this BigDecimal value.
26452994,2,0,2,java.math.BigDecimal,"If you have a lot of those, what you can do also in store those BigDecimal in a data structure like a list."
26453049,2,0,7,java.math.BigDecimal,"The expressions new BigDecimal(""176100000"") and new BigDecimal(""1761e+5"") are not equal."
26453049,2,0,7,java.math.BigDecimal,"BigDecimal keeps track of both value, and precision."
26453049,2,0,7,java.math.BigDecimal,"BigDecimal(""176100000"") has 9 digits of precision and is represented internally as the BigInteger(""176100000""), multiplied by 1."
26453049,2,0,7,java.math.BigDecimal,"BigDecimal(""1761e+5"") has 4 digits of precision and is represented internally as the BigInteger(""1761""), multiplied by 100000."
26453049,2,0,7,java.math.BigDecimal,"When you a divide a BigDecimal by a value, the result respects the digits of precision, resulting in different outputs for seemingly equal values."
26453159,2,1,15,java.math.BigDecimal,"As specified in javadoc, a BigDecimal is defined by an integer value and a scale."
26453159,2,1,15,java.math.BigDecimal,The value of the number represented by the BigDecimal is therefore   (unscaledValue × 10^(-scale)).
26453159,2,1,15,java.math.BigDecimal,"So BigDecimal(""1761e+5"") has scale -5 and BigDecimal(176100000) has scale 0."
26453159,2,1,15,java.math.BigDecimal,The division of the two BigDecimal is done using the -5 and 0 scales respectively because the scales are not specified when dividing.
26453159,2,1,15,java.math.BigDecimal,"Returns a BigDecimal whose value is (this / divisor), and whose preferred scale is (this.scale() - divisor.scale()); if the exact quotient cannot be represented (because it has a non-terminating decimal expansion) an ArithmeticException is thrown."
26453159,2,1,15,java.math.BigDecimal,Parameters: divisor - value by which this BigDecimal is to be divided.
26453159,2,1,15,java.math.BigDecimal,"dividendo.divide(BigDecimal.valueOf(1000), 0, RoundingMode.HALF_UP) you will get the same result."
26481520,2,0,4,java.math.BigDecimal,"Or if floating point imprecision could be an issue, use BigDecimal for the parsing and division, then format the resulting BigDecimal: code."
26482093,2,0,0,java.math.BigDecimal,You can do this using BigDecimal easy.
26483349,2,1,1,java.math.BigDecimal,You can use BigDecimal to get String value.
26500144,1,0,0,java.math.BigDecimal,"i want to print the 1477th fibonacci number in java but i am getting ""Infinity"" or NumberFormatException when using BigDecimal, please help 1477th fibonacci number: 211475298697902185255785861961179135570552502746803252174956226558634024323947666637137823932524397611864671566211908330263377425204552074188208686993669123754004340250943108709212299180422293009765404930508242975773774612140021599477983006713536106549441161323499077298115887067363710153036315849480388057657"
26500224,2,1,0,java.math.BigDecimal,It should work with BigDecimal See the following code code.
26500224,2,1,0,java.math.BigDecimal,Use BigDecimal constructor with String as input
26547823,2,0,1,java.math.BigDecimal,"except for String, there are BigInteger, BigDecimal and Integer, Long, Double, Float, Short, Byte ."
26568494,2,0,0,java.math.BigDecimal,"In Java, it's best to use BigDecimal to represent numbers with a certain number of decimal places."
26568918,2,0,2,java.math.BigDecimal,"You have a few options, you might use a DecimalFormat, or a BigDecimal or even a String.format() like code."
26569992,2,0,1,java.math.BigDecimal,For more about this issue read this and this Instead some very smart people have created something that's perfect for modeling calculators:  java.math.BigDecimal; If you're the visual type let me show you something that might make the difference between BigDecimal and float and double clear:  These rulers both show inches.
26569992,2,0,1,java.math.BigDecimal,The top can be perfectly modeled by BigDecimal.
26586077,2,1,2,java.math.BigDecimal,The 40 decimal place BigDecimal results are: code.
26580735,2,0,1,java.math.BigDecimal,If you want perfect calculations of non whole numbers in base 10 check out BigDecimal.
26583154,2,0,1,java.math.BigDecimal,Use BigDecimal and setScale() code.
26583001,2,0,0,java.math.BigDecimal,You can use BigDecimal here code.
26586679,2,1,2,java.math.BigDecimal,Use java.math.BigInteger or java.math.BigDecimal.
26595011,2,0,0,java.math.BigDecimal,Here is how you can do that in a few simple steps:  Add an import of java.math.BigDecimal at the top of your program Replace all variables of type double with variables of type BigDecimal Replace all value initializations with calls of BigDecimal constructors; use fields ZERO and ONE for zero and one.
26595011,2,0,0,java.math.BigDecimal,Rewrite expressions using BigDecimal's methods.
26599125,2,1,0,java.math.BigDecimal,"NOTE: I agree with MarsAtomic in that you should stick with BigDecimal class for monetary transactions in order to not lose precision but as you state this is some kinda of assignment, I will take in assumption that the BigDecimal is beyond the scope of what your teacher taught you so I just used double."
26601412,1,0,1,java.math.BigDecimal,Using BigDecimal to Print Pi: Code is inefficient and doesn't work.
26601412,1,0,1,java.math.BigDecimal,"I've been playing around with BigDecimal today, and ended up with the code below."
26628509,2,0,1,java.math.BigDecimal,Use BigDecimal for currencies.
26634324,1,0,1,java.math.BigDecimal,"String 999999999.9999999999 is rounded to 1,000,000,000 BigDecimal."
26634324,1,0,1,java.math.BigDecimal,"I have a problem where my 999999999.9999999999 String is being rounded to 1,000,000,000 BigDecimal when I parse it."
26634324,1,0,1,java.math.BigDecimal,Result: number = 1.0E9 If I use the same format to parse the result BigDecimal back to String: code.
26634652,2,1,3,java.math.BigDecimal,"Unless there's some code you've omitted, parse is returning a Double, not a BigDecimal."
26634652,2,1,3,java.math.BigDecimal,"If you want a BigDecimal, you have to use setParseBigDecimal to tell it to return a BigDecimal."
26643280,1,0,1,java.math.BigDecimal,Using the BigDecimal data type: Why is my math coming out incorrectly?
26643280,1,0,1,java.math.BigDecimal,I am required to use the BigDecimal data type for all of my calculations for the sake of rounding.
26644853,1,0,1,java.math.BigDecimal,"I know how to manually set the scale of BigDecimals (Set specific precision of a BigDecimal) - but in this case I want to be able to use an arbitrary pattern string (including non-numeric pattern elements), so I won't know in advance what scale to use."
26768515,2,0,2,java.math.BigDecimal,The BigDecimal is converted internally via  new MathContext(compPrec) or plain HALF_UP.
26648014,2,0,0,java.math.BigDecimal,"Set the scale with the rounding mode you like, and include the values in the format string as strings, using BigDecimal#toString()."
26652997,2,0,3,java.math.BigDecimal,"A cast on an object doesn't change the type of the object, only the type of the expression you use to refer to it, so it can't convert a BigDecimal to a Double, since a BigDecimal isn't a Double."
26652997,2,0,3,java.math.BigDecimal,"Instead, call the doubleValue() method of the BigDecimal."
26653002,2,0,2,java.math.BigDecimal,You can use the BigDecimal.doubleValue() method.
26653002,2,0,2,java.math.BigDecimal,public double doubleValue() Converts this BigDecimal to a double.
26653002,2,0,2,java.math.BigDecimal,"This conversion is similar to the narrowing primitive conversion from double to float as defined in section 5.1.3 of The Java™ Language Specification: if this BigDecimal has too great a magnitude represent as a double, it will be converted to Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY as appropriate."
26653002,2,0,2,java.math.BigDecimal,"Note that even when the return value is finite, this conversion can lose information about the precision of the BigDecimal value."
26653015,2,0,0,java.math.BigDecimal,Use doubleValue() of the BigDecimal.
26653015,2,0,0,java.math.BigDecimal,BigDecimal class has a doubleValue() that will return the equivalent double value.
26653015,2,0,0,java.math.BigDecimal,But I wouldn't reccommend casting to double if precision is important you will lose precision with double vs. BigDecimal.
26653016,2,0,1,java.math.BigDecimal,"I'll teach you to fish, I guess: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html Go to methods, check for which one returns a double, et voila: doubleValue()"
26675620,1,0,1,java.math.BigDecimal,Oracle ADF: Cannot convert 1 of type class java.math.BigDecimal to class oracle.jbo.domain.Number.
26675620,1,0,1,java.math.BigDecimal,Cannot convert 1 of type class java.math.BigDecimal to class oracle.jbo.domain.Number How to convert   oracle.jbo.domain.Number into java.math.BigDecimal java.math.BigDecimal into oracle.jbo.domain.Number  I get the Answer number one:  code.
26675708,2,1,1,java.math.BigDecimal,"Even better, if you checkout the javadoc, you will see that there's a Number(BigDecimal bigDecimal) constructor: code."
26688674,2,0,0,java.math.BigDecimal,"Of course, what you've written works for small numbers, but factorials grow quite rapidly, and so too will your fractions, so it might be a better plan to use the BigDecimal class to represent the fractions rather than a double if you want the precision of the floating point number to be as accurate as possible."
26707760,2,0,1,java.math.BigDecimal,"If you are not required to use double, consider switching to BigDecimal with scale 2."
26707760,2,0,1,java.math.BigDecimal,"Unlike double, BigDecimal can represent all your inputs and results exactly."
26708139,2,0,0,java.math.BigDecimal,"I suggest you read on working with Currency in java -- one of the things it mentions is to avoid using float or double to represent money, since these data types are not as well-suited to rounding off as, say, the recommended BigDecimal."
26706400,1,0,0,java.math.BigDecimal,Two Dimensional Arrays with BigDecimal in Java.
26716431,2,0,0,java.math.BigDecimal,Use BigDecimal which allows you to specify a precision (the 50 in the divide() below): code.
26716396,2,0,1,java.math.BigDecimal,As one of the commentors already mentioned you can use BigDecimal.
26733258,1,0,0,java.math.BigDecimal,BigDecimal bigDecimal = new BigDecimal(localizedNumber); I want numeric values to be localized but I cannot return string as putting number as string shows below error in excel Number in this cell is formatter as text or preceded by an apostrophe Is there any way by which I can return back numeric value(BigDecimal / Integer / BigInteger etc) in localized format So that I won't get above error in excel and I can perform filter operations on excel data.
26742403,2,0,0,java.math.BigDecimal,Furthermore: BigDecimal might be a better choice than the lossy double.
26742403,2,0,0,java.math.BigDecimal,BigDecimal must use methods like add but double is just an approximation of a real number.
26753414,1,0,13,java.math.BigDecimal,"Fields of Type Number(19,0) should be of Type Long instead of BigDecimal or similar  I wonder if there is a way to change those entity templates?"
26754268,2,0,1,java.math.BigDecimal,"The - operator can be only applied to numeric types, but at compile-time the compiler cannot be aware of the runtime type of the generic type T.   As a workaround I can suggest using the BigDecimal type and it's nested arithmetic methods (like .subtract()) code."
26754268,2,0,1,java.math.BigDecimal,"In order to use the method properly, you will be forced to convert your numeric variables to BigDecimal and vice-versa"
26756049,1,0,0,java.math.BigDecimal,How to format a BigDecimal as currency without symbol in Play Framework (or Java)?
26756049,1,0,0,java.math.BigDecimal,I want to format a BigDecimal as a currency in one Locale but use the currency symbol of another.
26764459,1,0,1,java.math.BigDecimal,BigDecimal operations precision overflow.
26764459,1,0,1,java.math.BigDecimal,I expects: 19.89 The unexpected result creates other undesirable outputs to perform operations on the field type BigDecimal
26764491,2,0,3,java.math.BigDecimal,The precision is already lost once you use the BigDecimal constructor that accepts double values.
26765291,2,0,0,java.math.BigDecimal,"If you have a double and you need to make a BigDecimal out of it, without adding all the extra precision, try something like code."
26765291,2,0,0,java.math.BigDecimal,This creates a BigDecimal whose toString() returns code.
26765045,2,1,1,java.math.BigDecimal,"result in the BigDecimal getting initialized with the entire contents of d, which the BigDecimal reproduces faithfully out to the last trailing digit."
26765045,2,1,1,java.math.BigDecimal,"When println is passed the BigDecimal, the BigDecimal's toString method returns a string showing the digits it stored, and println writes that string to the console."
26765045,2,1,1,java.math.BigDecimal,"will result in the actual decimal value 19.89 getting stored in the BigDecimal, because no floating point evaluation is involved."
26769232,1,0,1,java.math.BigDecimal,"new BigDecimal(""0"") NumberFormatException."
26769232,1,0,1,java.math.BigDecimal,I'm having a weird problem with BigDecimal.
26769232,1,0,1,java.math.BigDecimal,Looking at the BigDecimal source code it looks like it falls while parsing the exponent: code.
26773572,1,0,6,java.math.BigDecimal,How to add to a BigDecimal.
26773572,1,0,6,java.math.BigDecimal,"I have the following function that itterates over an array, calls a method on each 'Refund' object that returns a BigDecimal that contains some value e.g."
26773572,1,0,6,java.math.BigDecimal,PS - 'getAmountPayble()' return a value of type BigDecimal
26773595,2,1,12,java.math.BigDecimal,"You need to use the return value of add, because BigDecimal is immutable."
26773713,2,0,0,java.math.BigDecimal,"Here is the API javadoc for BigDecimal#add:   Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale())."
26778406,2,0,3,java.math.BigDecimal,"You can use Math.round to get a correctly rounded value, or BigDecimal for a choice of 8 different rounding modes."
26792222,1,0,0,java.math.BigDecimal,BigDecimal setScale being ignored?
26792253,2,0,4,java.math.BigDecimal,"If you read the javadocs, you will see that setScale returns a new BigDecimal"
26813595,2,0,0,java.math.BigDecimal,"To avoid precision loss, use BigDecimal instead (see Javadoc)."
26813595,2,0,0,java.math.BigDecimal,You can also read this post where people explained perfectly the reasons for using BigDecimal.
26818471,1,0,0,java.math.BigDecimal,"It will then pass those to moneyConversion(), which does math, converts to BigDecimal, and returns the result as variable bookPriceDisp."
26818692,2,0,1,java.math.BigDecimal,Note that you can't use BigDecimal to simply multiple or subtract double values as regular operations.
26818692,2,0,1,java.math.BigDecimal,You need to use the methods available in BigDecimal such as subtract() and multiply() to be able to do your calculations.
26822830,2,0,0,java.math.BigDecimal,"If you want to have more flexibility with rounding values,you can use the BigDecimal class and RoundingMode:   code."
26828777,1,0,0,java.math.BigDecimal,Camel Bindy converts BigDecimal inappropriately.
26828777,1,0,0,java.math.BigDecimal,"I've got the following example of using Camels Bindy, but eventually it raises assertion error because bindy transforms BigDecimal in wrong way (using comma instead of dot for number delimiter)."
26897940,2,0,1,java.math.BigDecimal,"There are float, double, BigInteger and BigDecimal."
26897940,2,0,1,java.math.BigDecimal,"BigDecimal is the same as BigInteger, but also can have decimals after the comma, i.e. 3.14"
26905362,2,1,3,java.math.BigDecimal,The other option might be BigDecimal.
26905362,2,1,3,java.math.BigDecimal,"But the problem is that 10^10002.3443 is irrational - it's not a terminating decimal, so it can't be represented correctly in a BigDecimal."
26949125,2,1,0,java.math.BigDecimal,"I would start with the smallest and go to bigger, for instance:   Byte Integer Long BigDecimal Boolean Char and last String"
26996600,1,0,0,java.math.BigDecimal,Check if BigDecimal value is in range.
26996600,1,0,0,java.math.BigDecimal,How to do it right using BigDecimal type.
26996658,2,0,0,java.math.BigDecimal,"Use BigDecimal.compareTo(val) to compare if your Number is bigger, smaller or equal."
26996658,2,0,0,java.math.BigDecimal,"returns -1, 0, or 1 as this BigDecimal is numerically less than, equal to, or greater than val."
26996681,2,0,0,java.math.BigDecimal,"use compareTo method   java.math.BigDecimal.compareTo(BigDecimal val)  This method returns -1 if the BigDecimal is less than val, 1 if the BigDecimal is greater than val and 0 if the BigDecimal is equal to val"
26996695,2,0,0,java.math.BigDecimal,"Eventually you could wrap it into a nice design pattern, but BigDecimal has only one method for comparing."
26998681,1,0,0,java.math.BigDecimal,((1 << (bitsCount)) - 1 evaluates to 0 How can I pass value = 2^64 - 1 into BigDecimal constructor?
26999235,2,1,1,java.math.BigDecimal,If you are testing a BigDecimal it would be safer to not use long at all here.
27010610,1,0,0,java.math.BigDecimal,My problem is that my collection can have anything ranging from Integer to BigDecimal to String returned in the collection.
27048438,1,0,4,java.math.BigDecimal,I've created custom Converter for when I output java.math.BigDecimal.
27048438,1,0,4,java.math.BigDecimal,When the BigDecimal is 0.00 or null I want output a dash.
27048438,1,0,4,java.math.BigDecimal,I'm saying its not called because I get no errors and no println statement output when the BigDecimal is null.
27048438,1,0,4,java.math.BigDecimal,"When the BigDecimal is not null it works as expected and ""Class=class java.math.BigDecimal"" gets printed out and when the BigDecimal is 0.00 I do get -- outputted on the page."
27052681,1,0,0,java.math.BigDecimal,The Java class libraries include classes called BigInteger and   BigDecimal that use a strategy similar to what we are asking you to   implement in this program.
27052681,1,0,0,java.math.BigDecimal,You are not allowed to solve this problem   using BigInteger or BigDecimal.
27090061,2,0,3,java.math.BigDecimal,"The compiler is saying ""cannot find symbol"" because it doesn't know what RoundingMode and BigDecimal are."
27090061,2,0,3,java.math.BigDecimal,You need to tell it by importing both RoundingMode and BigDecimal from the java.math library: code.
27115177,2,0,1,java.math.BigDecimal,You could use BigDecimal or you could use formatted output like code.
27115177,2,0,1,java.math.BigDecimal,"Or, using BigDecimal code."
27115178,2,0,1,java.math.BigDecimal,"If you use the BigDecimal class in place of double, you won't get this imprecision."
27115178,2,0,1,java.math.BigDecimal,"Note that when you create a BigDecimal, it's best to pass in the value as a String, so that there's never any rounding."
27122671,1,0,0,java.math.BigDecimal,How to use BigDecimal to achieve following code instead of using double or float?
27122671,1,0,0,java.math.BigDecimal,"But Due to loss of accuracy in precision in the above code I have to change it by giving type as BigDecimal instead of double for lat1, lon1, lat2, lon2."
27122671,1,0,0,java.math.BigDecimal,But problem is if I use BigDecimal how can I achieve all those operations?
27122846,2,0,0,java.math.BigDecimal,Inspired from this post: How to convert BigDecimal to Double in Java?
27131418,1,0,1,java.math.BigDecimal,"Float, Double, Long, Integer, Short, Byte, BigDecimal and BigInteger) and simple type (i.e. float, double, long, int, short, byte) are marshaled into AS3 Number type."
27134819,2,1,1,java.math.BigDecimal,"In the case that you have an ID of type BigDecimal, it's necessary to double click the attribute to make appear ""Edit Attribute"" Popup, then in browse for the Type label, and search oracle.jpo.doman.DBSequence, then do OK."
27141899,1,0,0,java.math.BigDecimal,Java BigDecimal setScale and rounding with half_even.
27141899,1,0,0,java.math.BigDecimal,I am using the following code with the java BigDecimal setScale method with half_even rounding mode and am getting the following results.
27141999,2,1,0,java.math.BigDecimal,"Once the number is a BigDecimal, no precision is lost and rounding works properly."
27141999,2,1,0,java.math.BigDecimal,But you have to make sure the number gets into the BigDecimal intact (and has not already lost precision before that by forcing it through a floating point type).
27171901,1,0,0,java.math.BigDecimal,How to get Integer of BigDecimal without separator.
27171901,1,0,0,java.math.BigDecimal,"I got the following BigDecimal from a Money-Object: BigDecimal 49.99 and I need this as Integer 4999, so everything I ask for is getting rid of the separator."
27171901,1,0,0,java.math.BigDecimal,"I could get this BigDecimal as String and remove the separator and parse it to an Integer, but I do not think that this is pretty."
27172138,2,0,2,java.math.BigDecimal,javadoc link: http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#movePointRight(int) example: code.
27174461,2,0,1,java.math.BigDecimal,It's not necessary to do any math on the BigDecimal; you can just call myBigDecimal.unscaledValue() to get the underlying unscaled BigInteger directly.
27177059,2,1,0,java.math.BigDecimal,"The reason it works is that ArrayList<BigDecimal> implements List<BigDecimal>, and so is assignment-compatible with it."
27177059,2,1,0,java.math.BigDecimal,That means that a variable declared as List<BigDecimal> is allowed to haev a reference of type ArrayList<BigDecimal> assigned to it.
27200030,2,1,4,java.math.BigDecimal,"Also note that this grouping would produce a Map<String, List<Transaction>>, not Map<String, List<BigDecimal>>."
27198533,1,0,1,java.math.BigDecimal,What does the definition of BigDecimal mean?
27198533,1,0,1,java.math.BigDecimal,"The first paragraph of the javadoc for BigDecimal says:  Immutable, arbitrary-precision signed decimal numbers."
27198533,1,0,1,java.math.BigDecimal,A BigDecimal consists of an arbitrary precision integer     unscaled value and a 32-bit integer scale.
27198533,1,0,1,java.math.BigDecimal,"The value of the number represented by the BigDecimal     is therefore (unscaledValue × 10-scale)   Can someone explain what this means, especially the bit starting 'If negative', but preferably all of it?"
27198571,2,1,2,java.math.BigDecimal,BigDecimal stores the magnitude of the number as an arbitrarily large integer.
27208782,1,0,0,java.math.BigDecimal,I have List<Transaction> where Transaction has amount as BigDecimal.
27209023,1,0,1,java.math.BigDecimal,"I am aware of the inanity of the first example (BigDecimal is immutable); the problem is not here:  Stream's forEach() takes a Consumer as an argument, and the signature of the SAM (note: Single Abstract Method) says that it returns void; yet, BigDecimal's .add() returns a BigDecimal, and Set's .add() (Collection's, in fact) returns a boolean; therefore the signature of both methods above don't match a Consumer; yet both examples compile."
27228032,2,0,0,java.math.BigDecimal,"If you want to deal with currency data, you may want to put it in a BigDecimal."
27228032,2,0,0,java.math.BigDecimal,Constructing a BigDecimal with a String that does not contain a valid decimal number throws a NumberFormatException.
27227238,2,0,3,java.math.BigDecimal,You should use BigInteger or BigDecimal for this purpose.
27234273,1,0,14,java.math.BigDecimal,How to convert big hex number (with decimal point) to BigDecimal.
27234273,1,0,14,java.math.BigDecimal,I have a big number in hex format (with decimal point) in a String and I want to convert it to a BigDecimal.
27234273,1,0,14,java.math.BigDecimal,"Example value: 0xcc.ccdp+1600 In BigDecimal class, I don't see any function which takes string representing number in hex format as input and returns corresponding BigDecimal."
27234273,1,0,14,java.math.BigDecimal,Is there a way to convert a big hex number from String to BigDecimal?
27235713,2,1,6,java.math.BigDecimal,I'm surprised that BigDecimal doesn't already support this.
27241002,2,1,1,java.math.BigDecimal,Why not float or BigDecimal?
27291952,1,0,0,java.math.BigDecimal,BigDecimal division issue.
27295798,2,0,1,java.math.BigDecimal,"This is counter intuitive behaviour, but I think it is the way that the EL spec (LInk to oracle EL spec) for division, i.e. the coercion of variables to BigDecimal, is being done."
27295798,2,0,1,java.math.BigDecimal,"will coerce totalQuota the 1024 values to BigDecimal and then perform the operations, returning a BigDecimal The second line  code."
27295798,2,0,1,java.math.BigDecimal,"This will then be coerced to a BigDecimal (becuase totalQuota is a BigDecimal), and then perform A.divide(B, BigDecimal.ROUND_HALF_UP)."
27295798,2,0,1,java.math.BigDecimal,The presicion of the output of this depends on the scale of the BigDecimal variables (affects which decimal place the rounding up occurs).
27295798,2,0,1,java.math.BigDecimal,The problem step is BigDecimal coerced_d = (new BigDecimal(d));: that coercion of Double to BigDecimal is being done using a BigDecimal constructor that gives a BigDecimal with scale 0.
27295798,2,0,1,java.math.BigDecimal,"If construction was done using, say BigDecimal coerced_d = (new BigDecimal(d.toString()));, you would get the value you expect (i.e. 0.625 as result of the divisions and 62.5 displayed) It is arguable whether this is expected behaviour or a bug - it is not clear from the spec how coercion from a Double to a BigDecimal should be done."
27295798,2,0,1,java.math.BigDecimal,that should avoid the problematic coercion of a Double to a BigDecimal.
27310530,2,1,0,java.math.BigDecimal,"So if getValue() would return for example a BigDecimal or Integer object, etc, you could just use return this.getValue().compareTo(o.getValue()); Then, when using the method, change the line code."
27334387,1,0,1,java.math.BigDecimal,Java BigDecimal formating.
27334387,1,0,1,java.math.BigDecimal,I have a class with BigDecimal field.
27334387,1,0,1,java.math.BigDecimal,"And I need to display BigDecimal field without zero in decimal (20.00 like 20), that's why my getter method looks like code."
27334441,2,0,0,java.math.BigDecimal,"If you can control the formatting method from BigDecimal to String (the framework is displaying the string returned from BigDecimal.toString()), you can use NumberFormat for better control of the displayed string."
27344772,2,0,2,java.math.BigDecimal,"I believe this is covered in this stack overflow article: Why does new BigDecimal(""0.0"").stripTrailingZeros() have a scale of 1?"
27344772,2,0,2,java.math.BigDecimal,You can get away with it by doing a compareTo(BigDecimal.ZERO)==0 and using BigDecimal.ZERO in that case.
27337148,1,0,1,java.math.BigDecimal,"If my calculations are corrected, my NodeBean would use about 25B (4 * 32 bits (4 int fields) + ~72-80 bits (String field containing about 10-15 characters, formula taken from here) and my ConnectionBean would use about 75-80B (4B for int + ~40B for BigDecimal (pattern from here) + 2 * 64 bits (for NodeBean references) + 64 bits (for boolean - taken from here) implying I have 64-bit VM)."
27337366,2,1,0,java.math.BigDecimal,Edit: You can convert a BigDecimal to double with the method .doubleValue().
27355894,2,0,1,java.math.BigDecimal,"Convert to a BigDecimal, and then check that if you round to two decimal places, you end up with the same BigDecimal that you started with."
27363470,2,1,2,java.math.BigDecimal,"Or you could switch to something like a BigDecimal which can hold bigger values: https://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html (watch out: BigDecimal works very different from a normal int, so read the documentation wisely, and Google for examples if necessary) EDIT: you can parse it to Long as well, if you want that: Long.parseLong(INPUT, 10);."
27384910,1,0,0,java.math.BigDecimal,The impala table that has DBType BigInt has JavaType BigDecimal.
27384910,1,0,0,java.math.BigDecimal,How do I convert the string I have to a BigDecimal.
27385103,2,0,1,java.math.BigDecimal,"Assuming I've understood your question correctly, you just want to instantiate a BigDecimal from a String, in which case: code."
27422121,1,0,1,java.math.BigDecimal,What I read was BigDecimal should be used when working with currency as precision is imiport.
27435419,2,0,1,java.math.BigDecimal,"Also, consider using BigDecimal instead of float or double when dealing with currency."
27435660,2,0,1,java.math.BigDecimal,You can look up BigDecimal or BigInteger for use in this case.
27450797,2,0,2,java.math.BigDecimal,You must use BigDecimal an MathContext look here: http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html http://docs.oracle.com/javase/6/docs/api/java/math/MathContext.html http://docs.oracle.com/javase/6/docs/api/java/math/BigDecimal.html#ROUND_HALF_DOWN Summary of Rounding Operations Under Different Rounding Modes Using these classes the round works has follows code.
27450834,2,1,4,java.math.BigDecimal,You can use BigDecimal as follows: code.
27454846,1,0,0,java.math.BigDecimal,BigDecimal division.
27454846,1,0,0,java.math.BigDecimal,I'm trying to use BigDecimal to calculate the GST tax rate.
27454846,1,0,0,java.math.BigDecimal,So I thought I should probably use the BigDecimal to give the most accurate representation.
27454880,2,0,0,java.math.BigDecimal,In your case TAX_RATE equals 0 because of BigDecimal.ROUND_HALF_UP.
27454880,2,0,0,java.math.BigDecimal,See http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#ROUND_HALF_UP
27484088,1,0,1,java.math.BigDecimal,My question is about of toString() and toPlainString() methods of the BigDecimal dataTypewhich produces the output like  code.
27485393,2,0,3,java.math.BigDecimal,returns a new BigDecimal objectWhen you invoke setScale method it returns a new BigDecimal object and it doesn't modify the existing object.
27485393,2,0,3,java.math.BigDecimal,Then a new BigDecimal variable is created with value 1500.0000 and scale 0 and then you  call toPlainString on it.
27487375,2,1,13,java.math.BigDecimal,"Using a BigDecimal, we can see the difference between the two values: code."
27501678,1,0,0,java.math.BigDecimal,The obtained object (from the getTotImponibile() method) is a BigDecimal  In the td of my table it is shown a value as: 447.93.
27508174,1,0,0,java.math.BigDecimal,I am using this method to convert a Number (as a BigDecimal) to a formatted string: code.
27522369,2,0,0,java.math.BigDecimal,"From A Change is Gonna Come Java Puzzlers:  Avoid Float and Double where exact   answers are required   Rather use BigDecimal, int, or long instead  Translates a double into a BigDecimal which is the exact decimal representation of the double's binary floating-point value."
27557590,1,0,1,java.math.BigDecimal,inconsistent behavior from BigDecimal and MathContext.
27557590,1,0,1,java.math.BigDecimal,I am Seeing some strange behavior from BigDecimal When I do division using mathContext the output is different than when I do the division by directly providing the scale and rounding mode Here is an example that I think should provide the same output code.
27557617,2,1,1,java.math.BigDecimal,"The divide method of BigDecimal lets you specify the scale of the result, which loosely speaking is number of decimal places."
27563873,2,0,3,java.math.BigDecimal,Use BigDecimal instead code.
27567639,1,0,5,java.math.BigDecimal,So in Java I am making use of the BigDecimal class in getting my calculations accurate.
27567761,2,1,1,java.math.BigDecimal,Pass a String step (and a String value) to the BigDecimal constructor.
27567761,2,1,1,java.math.BigDecimal,"Edit Or as noted below, use BigDecimal.valueOf(double) code."
27588193,2,0,1,java.math.BigDecimal,Now a day BigDecimal you will get Java.Please read and learn it about BigDecimal code.
27588058,2,1,1,java.math.BigDecimal,"If this is not desireable you can use BigDecimal which does not have rounding errors, but has its own headaches IMHO."
27596153,2,1,1,java.math.BigDecimal,If you're able to withstand a bit of temporary inconsistency in your data then you can eliminate the read lock entirely: use an AtomicReference<BigDecimal> for the balance (getBalance() simply becomes return balance.get()).
27591772,2,0,0,java.math.BigDecimal,I like to use BigDecimal for these kind of operations.
27598164,2,1,24,java.math.BigDecimal,"If you require accuracy - for instance, you can't have a decimal value that is inaccurate (like 1/10 + 2/10), or you're doing anything with currency (for example, representing $10.33 in the system), then use a BigDecimal, which can support an arbitrary amount of precision and handle situations like that elegantly."
27603704,2,0,0,java.math.BigDecimal,The same thing can be achieved using the BigDecimal class and its setScale method: code.
27612226,1,0,1,java.math.BigDecimal,I use BigDecimal to store the price in Java.
27616294,1,0,2,java.math.BigDecimal,Using BigDecimal in Java to calculate PI number up to 200 decimal digits.
27616294,1,0,2,java.math.BigDecimal,I have used BigDecimal but it shows 49 decimal digits and put zero number for the rest.
27616388,2,0,3,java.math.BigDecimal,"Use BigDecimal everywhere, if you want to go further."
27679330,1,0,0,java.math.BigDecimal,using BigDecimal for very large numbers.
27679419,2,0,1,java.math.BigDecimal,You need to use a BigDecimal to represent it: a number with an arbitrary number of bytes to represent numbers.
27679438,2,0,1,java.math.BigDecimal,"Yes, the only thing which you should use here is BigDecimal class."
27681019,2,0,0,java.math.BigDecimal,You can use BigDecimal for such calculations and not lose precision in converting between types: code.
27705636,1,0,0,java.math.BigDecimal,"So its result in java side was  BigDecimal, not String:  But inside BigDecimal exists stringCache field with String value, and every time when I call that query as result of exection its creating new String Object with ""1"" or ""0"" value."
27705636,1,0,0,java.math.BigDecimal,"I tried that way, but I think this didnt work, because qr.getSingleResult() already created new String Object as stringCache field of BigDecimal: code."
27705897,2,0,0,java.math.BigDecimal,"1) You could modify the SQL query to return a string instead of an integer 2) You could cache (""manually intern"") the BigDecimal object itself - by replacing them with the BigDecimal.ONE and BigDecimal.ZERO static cached values 3) The private field stringCache in BigDecinal will be calculated only if you call toString() on the BigDecinal object - but if you need toString(), then you can probably throw away the BigDecinal object 4) (not recommended!)"
27707070,1,0,1,java.math.BigDecimal,Printing the values as it is using BigDecimal in Java.
27707070,1,0,1,java.math.BigDecimal,So making use of BigDecimal to store money values.
27707692,2,0,2,java.math.BigDecimal,"There are two ways to solve this issue:  Use a BigDecimal; or Round the result up to the number of digits ""repairing"" the double yourself."
27707692,2,0,2,java.math.BigDecimal,You can use a BigDecimal to solve this problem.
27734974,2,0,1,java.math.BigDecimal,"What you should do is to store the value you want as a String, and then compare the String value you're reading in with the one you've stored, or else use the BigDecimal.equals() method to test for equality between two BigDecimal instances."
27734974,2,0,1,java.math.BigDecimal,"Comparing two BigDecimal instances will work provided that you have values that can be represented exactly as a BigDecimal, and since you're reading your values from a text file, that really ought to be the case!"
27747395,2,0,1,java.math.BigDecimal,"Note that pow here takes an int, not another BigDecimal."
27747263,2,0,5,java.math.BigDecimal,try to use BigDecimal example: code.
27775949,1,0,1,java.math.BigDecimal,BigDecimal.valueOf caching mechanism.
27775949,1,0,1,java.math.BigDecimal,I heard that the BigDecimal.valueOf() method is better than calling new BigDecimal() because it caches common values.
27778759,2,1,1,java.math.BigDecimal,Tips: - use Long instead of integer as PrimaryKey - use BigDecimal instead of Double for price property - double is not goag when it comes to precision.
27780673,2,0,2,java.math.BigDecimal,Obviously priceSpinner.getValue() returns BigDecimal and you're trying to convert it to double and then back to BigDecimal.
27781227,2,0,0,java.math.BigDecimal,This program illustrates conversion in both directions between Double and BigDecimal: code.
27787831,2,1,3,java.math.BigDecimal,"Your stack trace indicates that your software is expecting a Double, but gets a BigDecimal."
27787831,2,1,3,java.math.BigDecimal,"""Double"" is a ""Number"", ""BigDecimal"" too, but ""Double"" isn't a ""double"", although both are somewhat related and easily assignable to each other."
27785603,2,0,0,java.math.BigDecimal,The method BigDecimal.add(BigDecimal) returns a BigDecimal.
27787905,1,0,3,java.math.BigDecimal,How to parse String to BigDecimal without getting error.
27787905,1,0,3,java.math.BigDecimal,When I want to parse value from String array to BigDecimal I have this error: code.
27787905,1,0,3,java.math.BigDecimal,It was not my idea to use BigDecimal but unfortunately I have to.
27787905,1,0,3,java.math.BigDecimal,I founded some code which supposed to change value from String to BigDecimal and return it: code.
27787905,1,0,3,java.math.BigDecimal,This work for me with Strings and Integers but I have got problem with BigDecimal.
27788063,2,1,3,java.math.BigDecimal,Instead of dealing with the parsing yourself you could make use of the BigDecimal(String val) constructor.
27804241,2,0,0,java.math.BigDecimal,I believe the issue is that BigDecimal cannot use a comma like that.
27804438,1,0,0,java.math.BigDecimal,"Rounding BigDecimal to always have two decimal places Using DecimalFormat  They all seem to simply truncate the number at the third decimal place, then round it from there, which is not what I am trying to do."
27808411,1,0,0,java.math.BigDecimal,"Below is the implementation for BigDecimal, however this also didn't worked."
27828909,1,0,0,java.math.BigDecimal,BigDecimal is losing precision.
27828909,1,0,0,java.math.BigDecimal,"I'm using BigDecimal, and it lost precision when it print rate and add the rate."
27828998,2,0,1,java.math.BigDecimal,"Assuming these are supposed to be currency figures (to the hundredths), I think you wanted to use BigDecimal.setScale(int, RoundingMode) and something like code."
27840001,2,0,4,java.math.BigDecimal,The solution to not dropping precision is using a number format that has a potentially growing precision like BigDecimal - which is not limited to a fixed number of bits.
27847846,2,0,3,java.math.BigDecimal,Before Java 8 you can use a java.math.BigDecimal to store the number of days since epoch plus fractional time of day.
27856598,1,0,0,java.math.BigDecimal,"Maybe working with BigDecimal will prevent the data from corrupting, but this is just a workaround."
27872300,2,1,3,java.math.BigDecimal,"You can determine the true binary value you're actually getting by writing System.out.println(new BigDecimal(4.45));  When I do that, I get 4.45000000000000017763568394002504646778106689453125, which is the actual value being rounded to the nearest 0.1 -- which is definitely going to be 4.5."
27875180,2,1,1,java.math.BigDecimal,"a String is parsed into a double which is converted into a String, into a BigDecimal and finally a String again."
27876982,2,0,2,java.math.BigDecimal,Or you can use the slightly less clunky BigDecimal: code.
27894828,2,1,5,java.math.BigDecimal,or using BigDecimal code.
27894828,2,1,5,java.math.BigDecimal,or without BigDecimal code.
27896584,1,0,0,java.math.BigDecimal,"One of the problems is, that the amount has to converted from Long (in minor unit) to a BigDecimal (in major unit with decimal digits)."
27896584,1,0,0,java.math.BigDecimal,I achieved this by writing my own Long to BigDecimal converter.
27908357,1,0,2,java.math.BigDecimal,"This object has a BigDecimal, so: code."
27908357,1,0,2,java.math.BigDecimal,"The question is, does this effectively set bob or is it returning a completely new MyValueObject with an entirely new BigDecimal as expected?"
27923504,2,1,1,java.math.BigDecimal,"Subclasses of Number If you are sure that all your variables are of a Class that extends Number i.e. AtomicInteger, AtomicLong, BigDecimal, BigInteger, Byte, Double, Float, Integer, Long, Short, you can use the following: code."
27923504,2,1,1,java.math.BigDecimal,"EDIT In response to comment discussion with OP - we noted that using Double as the base class for the Number comparison might give spurious equality if comparing two BigDecimal or BigInteger numbers that are beyond the range of Double (therefore .doubleValue() returns Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY as appropriate) If this is a concern, compareNumbers() could be altered as follows: code."
27923466,2,0,0,java.math.BigDecimal,"First, you do not want to store your ""money"" as double value, but either as long or as Money instance (if you have Java 8, otherwise you could use a BigDecimal)."
27956131,2,1,2,java.math.BigDecimal,Instead of double try with BigDecimal  code.
27963819,1,0,0,java.math.BigDecimal,java - compare BigInteger with BigDecimal.
27963819,1,0,0,java.math.BigDecimal,I want to compare a BigInteger with a BigDecimal.
27963819,1,0,0,java.math.BigDecimal,How can I correctly compare a BigInteger with a BigDecimal in the mathematical/human definition (10 == 10.0)?
27963857,2,1,1,java.math.BigDecimal,For BigInteger and BigDecimal you should use the compareTo method to check if their value is the same code.
27964075,2,0,0,java.math.BigDecimal,"BigDecimal has kind fo constants ZERO, ONE, ONE to avoid permanent recreation of the popular objects."
27982184,2,0,10,java.math.BigDecimal,"Use BigInteger for integers, and BigDecimal for floating point values."
27982200,2,0,1,java.math.BigDecimal,Utilize the BigDecimal class For instance: code.
27982224,2,0,1,java.math.BigDecimal,BigInteger(for integers) and BigDecimal(for exact floating point numbers) is what you need.
27989896,2,1,0,java.math.BigDecimal,"For example (rude): 0.5 it will represent as 1/2 0.25 it will represent as 1/2² 0.1 it will represent as 1/2^4 but in this case it will mutiply the number by 1.600000023841858 (mantissa) and it will give a number closer but not equal to 1  (1/2^4 x 1.600000023841858 = 0,100000001 Now you can see why after some loops the value changes to nonsense values For rich detail of how it works read floating points IEEE 754  If you want precision you should use for example a BigDecimal from Java that uses another architecture to represent decimal numbers."
27991332,1,0,0,java.math.BigDecimal,"Input: 2.26 Output:  225.99999999999997 System.out.println(value); 9 quarters 0 dime 0 nickels 0 pennies How do I specifically use BigDecimal to solve this, since the problem appears to be value = 225.99999999999997 when it should be 226?"
27992868,2,0,1,java.math.BigDecimal,The BigDecimal rounding you show is working exactly as designed.
28005309,2,0,1,java.math.BigDecimal,Instead use BigDecimal.
28010430,2,1,1,java.math.BigDecimal,"Noticed that I used Number, because some database return Long while other return a BigDecimal."
28012894,2,0,3,java.math.BigDecimal,For some of the other problems you are dealing with large non-integer numbers and you need the related class java.math.BigDecimal: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
28024437,2,0,2,java.math.BigDecimal,"I can suggest you to use BigDecimal instead of float, it provides more accurate computations."
28040754,2,0,1,java.math.BigDecimal,Preffered is using BigDecimal.
28042644,2,1,6,java.math.BigDecimal,"Note: this treats Byte, Short, BigInteger and BigDecimal as numbers."
28042644,2,1,6,java.math.BigDecimal,"If you look at the Javadoc for Integer you can see its parent is Number which in turn has the sub-classes AtomicInteger, AtomicLong, BigDecimal, BigInteger, Byte, Double, DoubleAccumulator, DoubleAdder, Float, Integer, Long, LongAccumulator, LongAdder, Short so instance Number will match any of these."
28051844,1,0,4,java.math.BigDecimal,How to sum BigDecimal properties of objects in Java8 lambda expression?
28059663,1,0,0,java.math.BigDecimal,converting exponential value to BigDecimal or Long using Gson.
28059794,2,0,0,java.math.BigDecimal,"You don't need to use another library, because the E notation is supported by the built-in java.math.BigDecimal: code."
28060854,1,0,0,java.math.BigDecimal,BigDecimal behavior in Java.
28060870,2,0,4,java.math.BigDecimal,You pass a double when you construct the BigDecimal so the precision is already lost.
28060904,2,1,1,java.math.BigDecimal,I think the BigDecimal.java best explains this feature.
28060904,2,1,1,java.math.BigDecimal,API say's  Translates a double into a BigDecimal which is the exact decimal   representation of the double's binary floating-point value.
28060904,2,1,1,java.math.BigDecimal,The scale   of the returned BigDecimal is the smallest value such that (10scale ×   val) is an integer.
28060904,2,1,1,java.math.BigDecimal,"One   might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
28060904,2,1,1,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which   is exactly equal to 0.1, as one would expect."
28060904,2,1,1,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that   this constructor provides an exact conversion"
28064032,1,0,0,java.math.BigDecimal,How to get precision of BigDecimal type data in an @Entity class.
28064183,2,0,1,java.math.BigDecimal,as told by the BigDecimal JavaDoc?
28064143,1,0,2,java.math.BigDecimal,I think the solution would be a mix between the use of DecimalFormat and a BigDecimal.
28064543,1,0,0,java.math.BigDecimal,"BigDecimal Rounding discrepancy using string and (int, long, double) constructors."
28064543,1,0,0,java.math.BigDecimal,Are there any more differences when using rounding off with BigDecimal?
28064694,2,0,3,java.math.BigDecimal,You can use BigDecimal.valueOf(double) to create the BigDecimal value which effectively parses the double value's canonical string representation instead - then you'd get the same results as for String.
28065158,1,0,0,java.math.BigDecimal,Java: BigDecimal and Double.NaN.
28065158,1,0,0,java.math.BigDecimal,Is there a way to repsensent Double.NaN in BigDecimal?
28065309,2,0,1,java.math.BigDecimal,"BigDecimal.valueOf(Double.NaN) It trying to convert Double.NaN to BigDecimal, and result is number can not be converted in to BigDecimal i.e. java.lang.NumberFormatException."
28065194,2,0,2,java.math.BigDecimal,"Its not a number, so it cant be converted to BigDecimal"
28066001,2,0,1,java.math.BigDecimal,Is there a way to repsensent Double.NaN in BigDecimal?
28066001,2,0,1,java.math.BigDecimal,"The BigDecimal class provides no representation for NaN, +∞ or -∞."
28066001,2,0,1,java.math.BigDecimal,"You could consider creating a subclass of BigDecimal that handles these ""special"" values, but it may be simpler to treat as special cases and implement your ""numbers"" as a wrapper for BigDecimal."
28065254,2,0,1,java.math.BigDecimal,"According to the docs it is not possible, see http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal%28double%29"
28078794,1,0,1,java.math.BigDecimal,Round BigDecimal to match C++ sprintf.
28078794,1,0,1,java.math.BigDecimal,And when I try to round the number to BigDecimal.ROUND_HALF_EVEN: code.
28078794,1,0,1,java.math.BigDecimal,"When I replaced the double[] to String[], your test produces expected values for BigDecimal.ROUND_HALF_EVEN: code."
28094964,2,1,4,java.math.BigDecimal,The problem is that XMLGregorianCalendar has two setYear methods: setYear(int year) and setYear(BigDecimal year).
28099901,1,0,0,java.math.BigDecimal,How do You Find the Number of Places After the Decimal Point with BigDecimal?
28110704,1,0,0,java.math.BigDecimal,"Also it is difficult to store a huge 2D grid of interpolated weights (in double or 2-decimal precision BigDecimal), say 1000*1000, which runs out the heap space."
28117653,2,0,0,java.math.BigDecimal,"You can also use BigDecimal, so for other ratio's You can manipulate scale: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html This is especially recommended for currencies."
28120568,1,0,0,java.math.BigDecimal,"I get the error: Operator '/' cannot be applied to 'java.math.BigInteger','java.math.BigInteger'  I tried using long, double, BigInteger and BigDecimal in all cases, my IDE complains about some error."
28121560,1,0,0,java.math.BigDecimal,Java's BigDecimal setScale.
28121569,2,1,1,java.math.BigDecimal,"Because BigDecimal is immutable you have to assign the result of the call to setScale() to c, code."
28121569,2,1,1,java.math.BigDecimal,the linked Javadoc says (in part) Returns a BigDecimal whose scale is the specified value.
28122270,2,0,1,java.math.BigDecimal,"To format a decimal use: http://docs.oracle.com/javase/tutorial/i18n/format/decimalFormat.html In this case the format you want is ###.## An example of using this would be   float f = 123456.78f; DecimalFormat format = new DecimalFormat(""###.##'); String formatted = format.format(f); Note that if you are using this for monetary calculations you should use BigDecimal instead."
28122270,2,0,1,java.math.BigDecimal,Here is an example of using BigDecimal:  BigDecimal bd = new BigDecimal(123456.78f); bd = bd.add(3.4f); bd = bd.divide(4.3f);//this division with floats may have returned an inexact answer bd.setScale(2);//Makes sure we only care about 2 decimal places String strValue = bd.toString();
28124829,2,0,0,java.math.BigDecimal,"And it is not easy to cheat, unlike BigInteger.toString(),  BigDecimal.toString() does not take a radix."
28132721,2,0,1,java.math.BigDecimal,as BigDecimal numbers are immutable?
28158728,1,0,0,java.math.BigDecimal,Not display in XML unset BigDecimal.
28158728,1,0,0,java.math.BigDecimal,I have a java class wherein I initialize currency values using BigDecimal such as this.
28158728,1,0,0,java.math.BigDecimal,The Setter is String and the getter returns BigDecimal code.
28158728,1,0,0,java.math.BigDecimal,"The issue is, the business wants unset BigDecimal values to not appear in the XML."
28171653,2,0,0,java.math.BigDecimal,Use the setter to set it to BigDecimal.
28210023,2,0,1,java.math.BigDecimal,"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html You can see that ""Note: For values other than float and double NaN and ±Infinity, this constructor is compatible with the values returned by Float.toString(float) and Double.toString(double)."
28210023,2,0,1,java.math.BigDecimal,"This is generally the preferred way to convert a float or double into a BigDecimal, as it doesn't suffer from the unpredictability of the BigDecimal(double) constructor."""
28210023,2,0,1,java.math.BigDecimal,"So, if you want to set up a BigDecimal by a float number, you should code."
28210023,2,0,1,java.math.BigDecimal,You may also check the note of the constructor public BigDecimal(double val)   The results of this constructor can be somewhat unpredictable.
28210023,2,0,1,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
28210023,2,0,1,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which is exactly equal to 0.1, as one would expect."
28210023,2,0,1,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the same result as converting the double to a String using the Double.toString(double) method and then using the BigDecimal(String) constructor."
28209840,2,0,3,java.math.BigDecimal,"as you see discarded fraction is > 0.5, not equal as you expected if you declare your initial variable as BigDecimal bd1 = new BigDecimal(""1.245""); you will get expected result"
28209869,2,0,1,java.math.BigDecimal,"If you are interested in high precision you must use BigDecimal, but unitialize it with a string value, so that you won't loose presicion due to float casting."
28210602,1,0,1,java.math.BigDecimal,As you can see I made a custom annotation @Quantity which should check if the input value(s) can be parsed as BigDecimal: code.
28212598,2,0,0,java.math.BigDecimal,"Note also that, when dealing with money BigDecimal is the preferred type over double."
28216251,1,0,0,java.math.BigDecimal,BigDecimal scale not working.
28216527,2,1,5,java.math.BigDecimal,"The important part of the #setScale documentation is this:  Note that since BigDecimal objects are immutable, calls of this method do not result in the original object being modified, contrary to the usual convention of having methods named setX mutate field X."
28216527,2,1,5,java.math.BigDecimal,You need to store the returned BigDecimal instance of the #add call in a variable.
28228475,2,0,0,java.math.BigDecimal,Consider using BigDecimal.
28235526,1,0,1,java.math.BigDecimal,BigDecimal rounding issue.
28235526,1,0,1,java.math.BigDecimal,"I want to convert 1256.3648 to 126.36 (up to 2 decimal places) To implement this thing, I am using .setScale(2, BigDecimal.ROUND_HALF_UP)); But for some reasons, it doesn't work  Any idea?"
28235610,2,0,2,java.math.BigDecimal,"Assuming you are calling it on the BigDecimal object will o/p   1256.36  If your input is 1256.3648   Remember, java.math.BigDecimal.setScale(int newScale, RoundingMode   roundingMode) returns a BigDecimal whose scale is the specified   value, and whose unscaled value is determined by multiplying or   dividing this BigDecimal's unscaled value by the appropriate power of   ten to maintain its overall value."
28235766,2,0,2,java.math.BigDecimal,Here is a test program demonstrating the rounding: import java.math.BigDecimal; code.
28242717,1,0,5,java.math.BigDecimal,How to bring BigDecimal to fractional power?
28242717,1,0,5,java.math.BigDecimal,BigDecimal was the choice to store numbers that have up to 5 digits after decimal point.
28242717,1,0,5,java.math.BigDecimal,I need to raise the BigDecimal to fractional power (up to 2 digits after decimal point).
28242717,1,0,5,java.math.BigDecimal,Do I need some conversions from/to BigDecimal?
28242717,1,0,5,java.math.BigDecimal,EDIT: I cannot use 3rd party libraries as described in Java's BigDecimal.power(BigDecimal exponent): Is there a Java library that does it?
28242717,1,0,5,java.math.BigDecimal,"Is there more elegant, succint way for this case than described in How to do a fractional power on BigDecimal in Java?"
28264242,2,1,1,java.math.BigDecimal,"Instead of returning Number.class, you need to return something which actually implements Comparable, such as Integer.class, Double.class, or BigDecimal.class."
28264587,1,0,4,java.math.BigDecimal,Should cast of xs:double to xs:decimal be implemented as BigDecimal.valueOf(double) or new BigDecimal(double)?
28264587,1,0,4,java.math.BigDecimal,Implementations done in Java seem to implement xs:double using the Java double data type and xs:decimal using the java.math.BigDecimal class.
28264587,1,0,4,java.math.BigDecimal,"That class supports two ways of converting a double into a BigDecimal, namely doing BigDecimal.valueOf(doubleValue) and new BigDecimal(doubleValue)."
28264587,1,0,4,java.math.BigDecimal,"According to http://stackoverflow.com/a/7186298/252228, the former gives the more intuitive result while the latter gives the more correct result, as for instance BigDecimal.valueOf(1.1) results in 1.1 while new BigDecimal(1.1) results in 1.100000000000000088817841970012523233890533447265625."
28264587,1,0,4,java.math.BigDecimal,"I suppose the difference results from the different implementations, BaseX doing BigDecimal.valueOf(1.1), Saxon and Exist doing new BigDecimal(1.1)."
28276874,2,0,2,java.math.BigDecimal,"However, thanks to your hint that BigDecimal.valueOf(d) and new BigDecimal(d) are not equivalent, the next release of BaseX (Version 8.0) will return the more accurate result."
28291544,1,0,0,java.math.BigDecimal,"I have attempted to use BigDecimal and a MathContext with 2 digits of precision and RoundingMode.CEILING to do this, but my unit test shows that 0.11000 rounds to 0.12."
28291681,2,1,2,java.math.BigDecimal,"In either event, main issue is that you're using doubles in one spot (and introducing floating-point inaccuracies), and BigDecimal in another (if used correctly, is less impacted by those inaccuracies)."
28291681,2,1,2,java.math.BigDecimal,"The main takeaway here is:  if you're going to use BigDecimal,  be consistent with it throughout."
28291681,2,1,2,java.math.BigDecimal,"There's no real reason to interlace or interweave working with raw doubles and BigDecimal, as it will only lead to headaches like this."
28292895,2,0,0,java.math.BigDecimal,"Consider BigDecimal:   Immutable, arbitrary-precision signed decimal numbers."
28292895,2,0,0,java.math.BigDecimal,"So using the BigDecimal API,  code."
28294071,2,0,0,java.math.BigDecimal,"As already suggested, if exact handling of decimal fractions is especially important, use BigDecimal or scale by a power of ten and do integer arithmetic."
28298518,2,0,0,java.math.BigDecimal,"Try printing out the BigDecimal value to see that you have 2650.5 and not 2650.499999 for example given you're using Number(26,6)."
28304473,1,0,0,java.math.BigDecimal,monetary precision in java (not BigDecimal its HFT!!!).
28304473,1,0,0,java.math.BigDecimal,"We know that using float, or double is not the option correct precision is necessary, and we know there is the BigDecimal for that purpose but we also know that its like 100 times slower than regular primitive operations... Now what we do if speed is critical for us and we do really need precision?"
28305196,2,1,4,java.math.BigDecimal,"Also, making a workalike of BigInteger or BigDecimal without recreating an object for each new op result is an option."
28304697,2,0,1,java.math.BigDecimal,Your options are: BigDecimal - Accurate and effective - slower than primitives but probably no measurably so - mostly immutable (i.e. can change accuracy but not value).
28324482,2,0,0,java.math.BigDecimal,If you need that kind of precision use BigDecimal.
28328713,2,0,1,java.math.BigDecimal,The scale property affects BigDecimal.toString()
28338180,2,0,7,java.math.BigDecimal,"Additionally, you might want to consider using BigDecimal - the value ""15.00"" sounds like it might be a financial value (e.g."
28338180,2,0,7,java.math.BigDecimal,a price) - and those should be stored in BigDecimal as that can represent exact decimal values.
28345036,1,0,0,java.math.BigDecimal,"to four decimal places, 1.234567 -> ""1.2346"" I know I can do this with BigDecimal, DecimalFormat or String.format(), but in my project I'm constrained and not able to use them or any third-party library."
28360310,2,0,0,java.math.BigDecimal,"you can use: @Column(name=""price"") private BigDecimal getPrice = 0; Hope this might help."
28365100,2,0,3,java.math.BigDecimal,BigDecimal.valueOf() uses new to create a BigDecimal object.
28371179,1,0,4,java.math.BigDecimal,QueryDSL is returning a Double for any number with a precision up to 16 and a BigDecimal thereafter.
28371179,1,0,4,java.math.BigDecimal,Why does it use a Double rather than a BigDecimal?
28371179,1,0,4,java.math.BigDecimal,"Is it safe to retrieve the Double and construct a BigDecimal, or is there a chance that a number with a precision of less than 16 could be incorrectly represented?"
28399786,2,0,3,java.math.BigDecimal,"Now back to your questions:   Is it safe to retrieve the Double and construct a BigDecimal, or is   there a chance that a number with a precision of less than 16 could be   incorrectly represented?"
28399786,2,0,3,java.math.BigDecimal,"When performing arithmetic operations you must always take into consideration the monetary rounding anyway, and that applies to BigDecimal as well."
28399786,2,0,3,java.math.BigDecimal,"So if you can guarantee that the database value doesn't loose any decimal when being cast to a java Double, you are fine to create a BigDecimal from it."
28399786,2,0,3,java.math.BigDecimal,Using BigDecimal pays off when applying arithmetic operations to the database loaded value.
28434097,2,0,1,java.math.BigDecimal,"Is it safe to retrieve the Double and construct a BigDecimal, or is there a chance that a number with a precision of less than 16 could be incorrectly represented?"
28434097,2,0,1,java.math.BigDecimal,The BigDecimal value of foo is 1000.1000000000000227373675443232059478759765625.
28434097,2,0,1,java.math.BigDecimal,1000.1 has a precision of 1 and is being misrepresented from precision 14 of the BigDecimal value.
28434097,2,0,1,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal class instead."""
28434097,2,0,1,java.math.BigDecimal,"Interestingly, calling BigDecimal.valueOf(someDouble) appeared at first to magically resolve things but upon realising that it calls Double.toString() then reading Double's documentation it became apparent that this is not appropriate for exact values either."
28434097,2,0,1,java.math.BigDecimal,"As such, in my mind, ORMs / DSLs should be mapping to BigDecimal unless otherwise specified, given that most database use will involve the calculation of exact values."
28471222,2,1,1,java.math.BigDecimal,"But new BigDecimal(1000.1d) has the value 1000.1000000000000227373675443232059478759765625, why not 1000.1?"
28471222,2,1,1,java.math.BigDecimal,"new BigDecimal(1000.1d, new MathContext(15))   Is it safe to use a double for arbitrary arithmetic on precise values?"
28471222,2,1,1,java.math.BigDecimal,Using a BigDecimal is much less likely to have unexpected consequences and should be your default choice.
28435643,2,0,0,java.math.BigDecimal,Oracle NUMBER and BigDecimal do both use decadic base.
28382180,2,0,1,java.math.BigDecimal,There are also other alternatives such as using BigDecimal.
28395268,2,1,2,java.math.BigDecimal,"result: 0.100000000000000005551115123125782702118158340454101562500000 In Java, in order to emulate the above behavior, you need to convert the float or double to BigDecimal (this conversion is exact) and then print the BigDecimal with enough digits."
28405516,2,1,3,java.math.BigDecimal,You are passing integer as second argument to constructor and your constructor expects a BigDecimal object.
28405521,2,0,0,java.math.BigDecimal,Change 1 to new BigDecimal(1) while instantiation or BigDecimal numberOfValues to int numberOfValues in your constructor
28405529,2,0,0,java.math.BigDecimal,1 (the second argument in the constructor) is not a BigDecimal.
28405533,2,0,0,java.math.BigDecimal,Second argument of the constructor is object of class BigDecimal.
28405533,2,0,0,java.math.BigDecimal,"If you want to go this way, you should/could call constructor for BigDecimal(1) as the argument."
28405539,2,0,1,java.math.BigDecimal,The second argument should be a BigDecimal object.
28406959,1,0,0,java.math.BigDecimal,"If I cast a BigDecimal to a String for replacing a point with a comma, the Result will be displayed correctly in my JTable - but then my Sorting-Sequence is not correct because the values will be sorted as a String instead of a BigDecimal..."
28413760,2,0,0,java.math.BigDecimal,but then my Sorting-Sequence is not correct because the values will be sorted as a String instead of a BigDecimal...  Don't store a String in the TableModel.
28413760,2,0,0,java.math.BigDecimal,Store the BigDecimal.
28413760,2,0,0,java.math.BigDecimal,"If I cast a BigDecimal to a String for replacing a point with a comma,  Formatting the data is the job of the renderer."
28413760,2,0,0,java.math.BigDecimal,You will also need to override the getColumnClass(...) method to return BigDecimal so the appropriate sort can be done.
28431393,2,1,2,java.math.BigDecimal,"You should use BigDecimal to specify what precision you want, but for your case you could do something simpler: just divide by 100 at the end."
28435245,2,0,0,java.math.BigDecimal,"Therefore after ceil it'll be rounded up to 0.94 If you want exact decimal output you must use decimal arithmetics, like BigDecimal."
28439815,1,0,0,java.math.BigDecimal,Why is the BigDecimal (or any non-int from my testing) being printed with quotes around it?
28439815,1,0,0,java.math.BigDecimal,I thought it might be a primitive/object issue and tried getting the double value from the BigDecimal but that did not help.
28458671,2,0,0,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html Although i don't think this is what you're looking for.
28461297,2,0,0,java.math.BigDecimal,"Also, in order to create a very large number you should use BigDecimal."
28461403,1,0,0,java.math.BigDecimal,Scala BigDecimal fails to translate a decimal String representation created by itself.
28461403,1,0,0,java.math.BigDecimal,Why wouldn't BigDecimal be able to translate a decimal String representation created by itself?
28462107,2,0,0,java.math.BigDecimal,But I'm not an expert on BigDecimal and I don't know the background of this comment at the throw site: code.
28461644,2,1,2,java.math.BigDecimal,From BigDecimal's javadoc: The exponent consists of the character 'e' ('\u0065') or 'E' ('\u0045') followed by one or more decimal digits.
28463752,1,0,1,java.math.BigDecimal,"BigDecimal division, rounding and sums."
28463752,1,0,1,java.math.BigDecimal,I am working with a BigDecimal value that represents a currency amount.
28464356,2,0,1,java.math.BigDecimal,"This, of course, doesn't apply to floating-point or BigDecimal values, but the same (analogous, using method calls) works for arbitrarily large bignums using BigInteger."
28474696,2,0,0,java.math.BigDecimal,"Yes, if you check out BigDecimal's equals() implementation you would see the following code."
28474696,2,0,0,java.math.BigDecimal,The same is reflected in the Java docs for BigDecimal#equals() as well.
28474699,2,0,1,java.math.BigDecimal,From BigDecimal.equals:  Returns true if and only if the specified Object is a BigDecimal whose value and scale are equal to this BigDecimal's.
28474713,2,0,1,java.math.BigDecimal,The equals overrides for BigDecimal and Long check that the reference type is respectively BigDecimal and Long as an early check.
28474713,2,0,1,java.math.BigDecimal,In BigDecimal: code.
28474714,2,0,0,java.math.BigDecimal,Yes it is checking for the second argument to be of BigDecimal.
28474714,2,0,0,java.math.BigDecimal,Code  in BigDecimal class : code.
28491553,2,0,1,java.math.BigDecimal,We can do it via a BigDecimal: code.
28491553,2,0,1,java.math.BigDecimal,Note however that a BigDecimal may not be able to be represented precisely using a double.
28491784,2,1,2,java.math.BigDecimal,"If you need to preserve the exact value, use a type like BigDecimal."
28491875,2,0,1,java.math.BigDecimal,If you use BigDecimal it will preserve the correct value.
28492407,2,0,0,java.math.BigDecimal,If you need to store the fractional values in decimal exactly then you must use BigDecimal.
28493206,1,0,0,java.math.BigDecimal,What is the equivalent of the Java BigDecimal class in IOS.
28493206,1,0,0,java.math.BigDecimal,I have a request model class in server with BigDecimal Properties.
28505237,1,0,4,java.math.BigDecimal,"I was looking into Using BigDecimal in JAXB marshalling What is happening by default, is that Exception gets thrown, but no handler is listening to it."
28528386,1,0,3,java.math.BigDecimal,"I know the BigDecimal class, but I don't quite understand this primitive numbers inconsistency."
28528449,2,0,0,java.math.BigDecimal,If you use a BigDecimal the difference can be seen: code.
28550273,2,1,6,java.math.BigDecimal,"BigDecimal to truncate to 15 decimal digits, then convert to double."
28550273,2,1,6,java.math.BigDecimal,"Note that I am using BigDecimal only to obtain exact printouts of doubles, and to calculate the mid point between two consecutive doubles."
28537748,2,0,2,java.math.BigDecimal,You need to use BigDecimal for this (for not losing any precision).
28537748,2,0,2,java.math.BigDecimal,"read the value as a String, then construct a BigDecimal from it."
28538011,2,0,1,java.math.BigDecimal,As suggested by peter.petrov I would use BigDecimal for this.
28542982,2,0,0,java.math.BigDecimal,Rather use BigDecimal for precision
28542958,2,0,2,java.math.BigDecimal,You can do exact floating point arithmetic in Java using BigDecimal.
28542958,2,0,2,java.math.BigDecimal,Also note that BigDecimal and BigInteger (the same for integers) are immutable.
28558786,1,0,0,java.math.BigDecimal,To understand BigDecimal class Arithmetic and Object Behaviour.
28578207,1,0,0,java.math.BigDecimal,Java-Returning BigDecimal as String: Returns int.
28578207,1,0,0,java.math.BigDecimal,I'm using a fraction to add to the current BigDecimal.
28578843,1,0,0,java.math.BigDecimal,"It displays the table perfectly , in footer I want to display the sum of salary so I created a variable SalSum here is the properties of it,class: java.math.BigDecimal calculation: sum ResetType:Report Variable Exp: $F{salary}The problem is , The sum of salary is not displaying and getting the discription as Variable not found:SalSum and The table also displays 3 times in report how to solve this please help me anyone."
28582793,2,0,1,java.math.BigDecimal,"If the input contains any non-numeric characters, BigDecimal will throw an exception."
28611494,2,1,2,java.math.BigDecimal,"There exists however a class - BigDecimal to that is able to calculate the score with an arbitrary precision, although I think calculating the average for 20 students will only differ on the 7th digit or so."
28630400,2,0,1,java.math.BigDecimal,BigInteger and BigDecimal have no sqrt() function.
28627153,2,0,1,java.math.BigDecimal,Rather use BigDecimal.
28669851,1,0,0,java.math.BigDecimal,How and which one better approach for Java BigDecimal intialization?
28670134,2,1,0,java.math.BigDecimal,You can store the exact value if you change the array type to BigDecimal: code.
28688211,2,0,1,java.math.BigDecimal,For that we use BigDecimal For more info Java Types Java Float Types
28699889,1,0,0,java.math.BigDecimal,Strange BigDecimal value using DecimalFormat.
28699931,2,0,3,java.math.BigDecimal,"If you want a specific scale, you need to tell it in the BigDecimal constructor."
28700119,2,0,1,java.math.BigDecimal,It's look like BigDecimal as a constructor with a string for parameter.
28716881,2,1,1,java.math.BigDecimal,"On the other hand, new BigDecimal(""1.49"") is exactly 1.49."
28716881,2,1,1,java.math.BigDecimal,"In some situations, especially if you need to truncate rather than round to nearest, the tiny differences introduced by double can matter, so BigDecimal is safer for currency calculations."
28723426,1,0,0,java.math.BigDecimal,Format BigDecimal or Number without Decimal Separator.
28726012,1,0,7,java.math.BigDecimal,BigDecimal 1.0E+8 / 100000000 with ROUND_HALF_UP is 0.
28726388,2,1,13,java.math.BigDecimal,"As an aside, you can use divide(BigDecimal, RoundingMode) to divide specifying a RoundingMode enum instead of the older int constants."
28741466,1,0,1,java.math.BigDecimal,Exception on transfering BigDecimal over Google Cloud Endpoints.
28741466,1,0,1,java.math.BigDecimal,I'm trying to transfer Articles data over cloud endpoints and the legacy application ( Android ) uses data structure that requires all the prices be in BigDecimal.
28741466,1,0,1,java.math.BigDecimal,When checking the generated endpoint client libraries there is a BigDecimal  model class auto-generated for me that seems not recognizable to the android JSON de-serializer: code.
28799861,2,1,0,java.math.BigDecimal,BigDecimal is not a supported return type.
28746170,1,0,6,java.math.BigDecimal,"If you use BigInteger (or BigDecimal) and want to perform arithmetic on them, you have to use the methods add or subtract, for example."
28748242,1,0,0,java.math.BigDecimal,"Now my problem is that I have to format it a way that allows my to create a BigDecimal, them my correct value should be 1086.12."
28776216,1,0,0,java.math.BigDecimal,"The input Java bean has 200 fields, which are all standard Java objects (e.g., Integer, BigDecimal, XMLGregorianCalendar, etc.)."
28783918,1,0,0,java.math.BigDecimal,Convert string to BigDecimal in java.
28783918,1,0,0,java.math.BigDecimal,When I convert this to BigDecimal I get: code.
28784180,2,0,7,java.math.BigDecimal,"The BigDecimal(double) constructor have some problems, is preferrable that you uses BigDecimal(String) or BigDecimal.valueOf(double)."
28784180,2,0,7,java.math.BigDecimal,The BigDecimal(double) documentation explain about this behavior:   The results of this constructor can be somewhat unpredictable.
28784180,2,0,7,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
28784180,2,0,7,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which is exactly equal to 0.1, as one would expect."
28784180,2,0,7,java.math.BigDecimal,"When a double must be used as a source for a BigDecimal, note that this constructor provides an exact conversion; it does not give the same result as converting the double to a String using the Double.toString(double) method and then using the BigDecimal(String) constructor."
28785015,2,0,0,java.math.BigDecimal,I also found http://www.opentaps.org/docs/index.php/How_to_Use_Java_BigDecimal:_A_Tutorial which throws light on BigDecimal
28800601,2,1,0,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal   class instead."
28800601,2,1,0,java.math.BigDecimal,"BigDecimal might be overkill for the example you gave, but for large currency values, double will break down fast and float will break down faster."
28818518,1,0,0,java.math.BigDecimal,What is the easiest way to add to a BigDecimal contained in a HashMap in Java 8?
28818519,2,1,8,java.math.BigDecimal,Advantages to the Java 8 approach:  No need to initialize the original value (BigDecimal.ZERO) No need to refer to the old value (HashMap::get) and add it It's clean
28859312,2,1,0,java.math.BigDecimal,"After playing around a little, it seems the best way is to just use the nextString and use the BigDecimal as was suggested by a comment: code."
28841253,1,0,1,java.math.BigDecimal,Why am I getting null when I divide two BigDecimal variables in Jaspersoft Studio?
28841253,1,0,1,java.math.BigDecimal,The first two set the integer value of one field to BigDecimal:  code.
28841609,2,0,1,java.math.BigDecimal,"UPDATE If the desired value is BigDecimal but the value is some other numeric type (i.e. Integer), you would have to convert the value to BigDecimal before invoking the divide() method: code."
28853144,2,1,1,java.math.BigDecimal,"1.1234568  Is you want to compute something, look at BigDecimal code."
28860484,1,0,0,java.math.BigDecimal,java.lang.NullPointerException BigDecimal.
28860484,1,0,0,java.math.BigDecimal,"Can someone help me, i think the error comes when i try to put data from jframe to sql, especially cmimi(BigDecimal)."
28878857,1,0,1,java.math.BigDecimal,** This is a corrected post ** I'm doing some very intricate math calculations using BigDecimal and ran into an error in ONE of several thousand tests.
28995422,2,0,0,java.math.BigDecimal,"It did not work in the real program.I realize this is quite involved, but I did find a fix that corrected the mysterious inconsistent outputs, and this should prove convincing:I added the following line before using toBigDecimal() [for that wrong data]:            x = new BigDecimal( x.toString() ); I would suspect that some attribute of the BigDecimal has gotten corrupted."
28890404,2,0,0,java.math.BigDecimal,"If you catch one, check how wide you need your buffer datatype to be by trying to retrieve it as increasingly ""wide"" (short -> int -> long -> BigInteger/BigDecimal) types."
28890404,2,0,0,java.math.BigDecimal,"If you can afford the memory, you'd be better off just using long or BigInteger/BigDecimal instead."
28890194,2,1,0,java.math.BigDecimal,BigDecimal puts you on the safe side.
28892643,1,0,0,java.math.BigDecimal,Java BigDecimal - rounding down to the user-provided multiple.
28892643,1,0,0,java.math.BigDecimal,What is the best way to do this in Java using BigDecimal?
28892643,1,0,0,java.math.BigDecimal,"Using BigDecimal.setScale(1, ROUND_DOWN) I was able to restrict the number of decimal points though."
28905738,2,0,0,java.math.BigDecimal,"Using a BigDecimal works because (and it doesn't matter if the input is ""random"") because it doesn't have this range limit."
28905667,2,0,0,java.math.BigDecimal,"Output :  2,102,331,119,338,414,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000  Hence, switching to a BigDecimal should help."
28905667,2,0,0,java.math.BigDecimal,"If you're generating the a and b values randomly, take a look at Generating random BigDecimal value from given range."
28917551,1,0,0,java.math.BigDecimal,Java BigDecimal Infinite or Nan.
28917551,1,0,0,java.math.BigDecimal,"I am using procedural generation with the fibonacci sequence and I need to input numbers ranging into the thousands, except when I do so, I keep getting the error Infinite or Nan on this line : ""BigDecimal placeholder = new BigDecimal((Math.pow( 1+Math.sqrt(5), n ) - Math.pow(  1-Math.sqrt(5), n)));"" code."
28919426,2,0,1,java.math.BigDecimal,use BigDecimal.
28929549,2,0,0,java.math.BigDecimal,"Even when you format it using String.format and change it back to decimal or use BigDecimal's setScale method to set precision, you can't get a double value ending with 0 after decimal."
28929389,2,0,0,java.math.BigDecimal,If you need to define the precision of a decimal number you can use the class BigDecimal.
28929389,2,0,0,java.math.BigDecimal,As javadoc explains BigDecimal is used for an arbitrary-precision signed decimal numbers.
28929389,2,0,0,java.math.BigDecimal,Here is the reference http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
28969049,2,0,1,java.math.BigDecimal,"You should use BigDecimal to represent currency values, or store the number of cents in a long or int."
28969492,1,0,15,java.math.BigDecimal,Creating a custom BigDecimal type.
28969492,1,0,15,java.math.BigDecimal,"In my application, all BigDecimal numbers are scaled to have two decimal places.."
28969492,1,0,15,java.math.BigDecimal,"In other words, everytime I create a new BigDecimal in my code, I need to use the method scale too:  code."
28969492,1,0,15,java.math.BigDecimal,"So, to minimize the work, I wanted to create my custom BigDecimal type, something like: code."
28969581,2,0,15,java.math.BigDecimal,You could simply create a method for yourself that creates a BigDecimal with zero.
28969581,2,0,15,java.math.BigDecimal,":) EDIT: Changed it slightly to return the results of setScale, since BigDecimal is immutable."
28969914,2,0,8,java.math.BigDecimal,"You can store a singleton instance of a MathContext, for instance, and use them as argument to BigDecimal Constructor."
28970475,2,1,6,java.math.BigDecimal,You could create a CustomBigDecimal that extends from BigDecimal.
28970475,2,1,6,java.math.BigDecimal,"However, as BigDecimal is immutable, you would never inherit state (such as the scale and rounding mode) from the parent class."
28970475,2,1,6,java.math.BigDecimal,"I'd go for the utility class suggested in another answer, or maybe a wrapper that delegates every operation to an actual BigDecimal instance."
28970475,2,1,6,java.math.BigDecimal,"The downside of this approach is that your brand new CustomBigDecimal wouldn't be a BigDecimal, so they wouldn't be interchangeable."
28970475,2,1,6,java.math.BigDecimal,"If, after all, you still want to make CustomBigDecimal inherit from BigDecimal, you'd need to use a decorator approach: code."
29011122,2,0,2,java.math.BigDecimal,beware to null check beware to loss of precision (ex:  BigDecimal)
29019170,2,0,2,java.math.BigDecimal,"Set the scale of the first BigDecimal to 2, which be retained through the division."
29019267,2,0,1,java.math.BigDecimal,"Try to add scale to BigDecimal, like this: code."
29031016,1,0,1,java.math.BigDecimal,My controller passes to my view an object that contains a BigDecimal field called quantite.
29031016,1,0,1,java.math.BigDecimal,"Even though it is a BigDecimal I am required to render it as an Integer for It can never have a fractional component, so my goal is to render a BigDecimal like 50.00 into 50 I render it in the view with Thymeleaf using the following syntax."
29042979,2,1,0,java.math.BigDecimal,"If you really need it to be exact, use BigDecimal."
29055105,2,0,1,java.math.BigDecimal,You should use BigDecimal and BigInteger instead.
29055105,2,0,1,java.math.BigDecimal,"I've roughly modified your example so that it works with them, but I haven't taken care of details, i.e. parsing the String shouldn't be necessary since scale can be retrieved from a BigDecimal with a getter, you can configure different rounding modes, etc: code."
29065144,2,0,1,java.math.BigDecimal,I would suggest that if you are using float point numbers then use java.math.BigDecimal.
29078463,1,0,0,java.math.BigDecimal,Is it possible to parse BigDecimal from a textfield ?
29078541,2,1,1,java.math.BigDecimal,"No, that's not how you should do it - you're currently parsing from a string to float, then converting that float to a BigDecimal."
29078541,2,1,1,java.math.BigDecimal,"You clearly know how to get a string from a text field, because you're already doing it in the first line - you can just do that with BigDecimal instead: code."
29081157,2,0,1,java.math.BigDecimal,Use BigDecimal.
29081067,2,1,2,java.math.BigDecimal,You can use BigDecimal or else use an int or a long and keep track of the decimal point yourself.
29081071,2,0,1,java.math.BigDecimal,It is better to use a BigDecimal.
29081071,2,0,1,java.math.BigDecimal,A BigDecimal give you the precision that you need.
29083154,2,0,0,java.math.BigDecimal,"Personally, I would be using BigDecimal as it's more accurate."
29083010,2,0,0,java.math.BigDecimal,Use BigDecimal insteads.
29095192,1,0,0,java.math.BigDecimal,The second part of my question is Why doesn't Number implement Comparable but something like BigDecimal does?
29095192,1,0,0,java.math.BigDecimal,I was thinking of going BigDecimal but i know Floats have floating point precision problems.
29104038,1,0,2,java.math.BigDecimal,Conversion of BigDecimal to double.
29104038,1,0,2,java.math.BigDecimal,"While converting BigDecimal to double, extra precisions are getting added."
29104038,1,0,2,java.math.BigDecimal,Is there is any way I can get the same input which I am passing to BigDecimal after converting to double?
29115611,1,0,0,java.math.BigDecimal,"We have mentioned @ApiModel on Pojo, problem here is if you have any wrapper classes like Integer, BigDecimal etc it is documenting those classes as well."
29120225,1,0,0,java.math.BigDecimal,"The column type is DECIMAL, which equates to Java's BigDecimal type."
29120225,1,0,0,java.math.BigDecimal,"Even if I format the BigDecimal value in java to a two decimal place BigDecimal before doing the insert, it still shows up with lots of trailing zeroes in the column."
29122081,2,0,0,java.math.BigDecimal,"If you want totally precise real numbers, use BigDecimal instead!"
29122116,2,0,1,java.math.BigDecimal,To resolve this problem use Math.round() or either BigDecimal class.
29122186,2,0,0,java.math.BigDecimal,"Consider using BigDecimal class, if you need precision."
29122187,2,0,0,java.math.BigDecimal,See this reply from 2011 Java:Why should we use BigDecimal instead of Double in the real world?
29122220,2,0,0,java.math.BigDecimal,For such calculations I would recommend http://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html
29122234,2,0,2,java.math.BigDecimal,Use BigDecimal if you want the system to keep track of the decimal   point and you don’t mind the inconvenience and cost of not using a primitive type.
29131531,2,0,0,java.math.BigDecimal,Try BigDecimal instead as shown below example.
29158458,2,0,1,java.math.BigDecimal,"Since you are dealing with values in a shopping cart and double's are only precise up to a point, I would recommend that you use BigDecimal's instead because they provide an exact representation of a number."
29171933,2,0,1,java.math.BigDecimal,"PS : In a real life application, I would recommend the use of the BigDecimal class to handle money, as float (and double) have precision problems."
29195757,2,0,0,java.math.BigDecimal,"So, we need to use BigDecimal instead of Long to avoid -ve values."
29195757,2,0,0,java.math.BigDecimal,"for example: Fib[92]=7540113804746346429 Fib[91]=4660046610375530309 (BigDecimal)Fib[93]=Fib[91]+Fib[92]=12200160415121876738 which is greater than Long.MAX_VALUE (Long)Fib[93]= -6246583658587674878 Long.MAX_VALUE = 9223372036854775807 Long.MIN_VALUE = -9223372036854775808 So, (BigDecimal)Fib[93] = Long.MAX_VALUE - (Long.MIN_VALUE - (Long)Fib[93]) + 1;"
29207869,1,0,1,java.math.BigDecimal,represent BigDecimal without decimal part as integer.
29207869,1,0,1,java.math.BigDecimal,I have to show BigDecimal value as integer if it doesnt'n have decimal part.
29207869,1,0,1,java.math.BigDecimal,"How can I receive 0 in case of bigDecResult = new BigDecimal(""0.0000"")?"
29214166,1,0,0,java.math.BigDecimal,Getting NaN / Infinity Error when converting Double to BigDecimal.
29214166,1,0,0,java.math.BigDecimal,"Well I get this crazy long number sometimes, so I convert it to BigDecimal like so: code."
29214166,1,0,0,java.math.BigDecimal,"My first hunch, is that I should be using BigDecimal to multiply at the first line, but if that is the issue, why am I getting the error when I convert it to BigDecimal?"
29218136,2,0,0,java.math.BigDecimal,"Most importantly, I no longer do heavy division with double but now BigDecimal."
29218136,2,0,0,java.math.BigDecimal,"Like mentioned above, I also found passing in 0 crashed the BigDecimal division."
29222373,2,0,0,java.math.BigDecimal,I prefer to use BigDecimal when dealing with floating point numbers code.
29222735,2,0,0,java.math.BigDecimal,In Java always use java.math.BigDecimal for monetary amounts.
29230121,1,0,0,java.math.BigDecimal,RoundingMode.HALF_UP does not round up correctly when I pass Integer in BigDecimal constructor.
29230121,1,0,0,java.math.BigDecimal,I am using RoundingMode.HALF_UP to round up BigDecimal numbers in my applictaion.
29231894,2,0,1,java.math.BigDecimal,There is no way to represent infinity per se using BigDecimal.
29237918,1,0,1,java.math.BigDecimal,What can I do so Formatter can accept BigDecimal?
29239934,1,0,0,java.math.BigDecimal,"However, because it is Hebrew, it has extra control characters around each string, and when I use BigDecimal to parse that value, it will throw an exception."
29243932,2,1,3,java.math.BigDecimal,"Other thoughts:  Don't use String to represent price, but rather consider a numeric field, perhaps BigDecimal if you want to be accurate for money."
29264324,2,1,2,java.math.BigDecimal,You can also convert your value to a BigDecimal.
29264324,2,1,2,java.math.BigDecimal,Then you can use BigDecimal's round method.
29268467,2,0,0,java.math.BigDecimal,I believe in your case only BigInteger or BigDecimal will be solution.
29269957,2,0,0,java.math.BigDecimal,"Also, to round values to certain decimal places and keep them as 'doubles', the BigDecimal class is a good idea if ever you find the need."
29282558,2,0,3,java.math.BigDecimal,"So we can do transaction between ""123"" and ""456"" and at same time we can do transaction between ""abc"" and ""xyz"" but if at same time some other thread will try to create object of account ""123"" than system will say please wait  for reference you can see below code  Please note :  dont forgote to remove your account id from locks map by call to  freeAccount(BigDecimal accId) from LockHolder class I have used HasMap instand of list because list will not be a good choice when you are randomly removing element from it(or when frequently you are updating it)  code."
29283840,2,0,1,java.math.BigDecimal,"Be aware that the precision also depends on the system memory (32or64) http://en.wikipedia.org/wiki/Single-precision_floating-point_format Java speaking, for more precision you can use BigDecimal : code."
29283840,2,0,1,java.math.BigDecimal,"https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html If it's just a question about how to display it and the precision dosen't matter, you can use the DecimalFormat."
29289871,2,1,1,java.math.BigDecimal,"so it's expected to pass x as Number, Integer, Double, BigDecimal, etc."
29289871,2,1,1,java.math.BigDecimal,"Assuming that che_monto field is defined as BigDecimal, an example solution may look as follows: code."
29305234,2,1,4,java.math.BigDecimal,"This works because new BigDecimal(s) produces a BigDecimal exactly equal to the value represented by the String, whereas new BigDecimal(Double.parseDouble(s)) is the exact value of the closest double to that value."
29305234,2,1,4,java.math.BigDecimal,I will explain at the end why number.compareTo(new BigDecimal(Double.toString(d))) == 0 does not work.
29305234,2,1,4,java.math.BigDecimal,"Finally, number.compareTo(new BigDecimal(Double.toString(d))) == 0 does not work because even though number.doubleValue() is not exactly 0.1, Double.toString() still converts it to the String ""0.1"" because there are no double values closer the ""real"" 0.1."
29324373,2,0,1,java.math.BigDecimal,"Or as others have suggested, use the BigDecimal class."
29324233,2,0,3,java.math.BigDecimal,Or you could use Java's BigDecimal class: code.
29328785,1,0,41,java.math.BigDecimal,Why does toString fail to produce the correct value on an immutable BigDecimal?
29330741,2,1,28,java.math.BigDecimal,Note that the intVal (which is a BigInteger that is stored in the BigDecimal) is passed directly to this method as the first argument: code.
29330741,2,1,28,java.math.BigDecimal,"Finally, the path to the second divideAndRound is taken here, again passing the dividend on (which was the intVal of the original BigDecimal), ending up with this code: code."
29330741,2,1,28,java.math.BigDecimal,"And this is where the error is introduced: The mdivididend is a mutable BigInteger, that was created as a mutable view on the mag array of the BigInteger that is stored in the BigDecimal x from the original call."
29330741,2,1,28,java.math.BigDecimal,"The division modifies the mag field, and thus, the state of the (now not-so-immutable) BigDecimal."
29330244,2,1,6,java.math.BigDecimal,"Other example are ORBUtilSystemException which is 9063 lines long, Character is 7231 lines, BigDecimal is 5224 lines."
29333470,2,1,0,java.math.BigDecimal,"Avoid BigDecimal While BigDecimal is very useful, it has a lot of overhead, both in speed and space requirements."
29362528,2,0,2,java.math.BigDecimal,"If this is not feasible, please have a look at the type BigDecimal that is preferred when you need to deal with money amounts."
29396730,2,0,0,java.math.BigDecimal,"BigDecimal, which does draw that distinction), but there is no difference in the double value 0.6 and the double value 0.60."
29406751,2,0,3,java.math.BigDecimal,You should use the BigDecimal class because it has built-in handling for floating point precision: code.
29406751,2,0,3,java.math.BigDecimal,"One of the advantages of using BigDecimal to handle the formatting is that it allows you to separate your code from your business logic, i.e. rounding down to 2 decimal places, from the view code which outputs the result to the user."
29413579,2,0,1,java.math.BigDecimal,You need to use a BigDecimal.
29413579,2,0,1,java.math.BigDecimal,Please have a look to this SO answer about the reason Why should we use BigDecimal instead of Double in the real world?
29417435,1,0,0,java.math.BigDecimal,JScience Amount with BigDecimal instead of double.
29417435,1,0,0,java.math.BigDecimal,"There is Measure, which allows me to chose between BigDecimal, double etc."
29435596,2,0,0,java.math.BigDecimal,"The solution, if you wish to use incredibly large numbers, is to use the BigInteger and BigDecimal class."
29437408,2,0,0,java.math.BigDecimal,Result: java.math.BigDecimal
29441783,2,0,0,java.math.BigDecimal,"Because 100.26 must never be stored on a double (or you'll risk losing the decimal precision), you will read the user input as a string, or BigDecimal type and ""multiply"" by 1000 before passing the number to double."
29462838,2,0,2,java.math.BigDecimal,"* 100 and then / 100.0 for two decimal points) you could use BigDecimal, then you can invoke setScale(int, int) like code."
29462753,2,1,4,java.math.BigDecimal,Other alternatives include using BigDecimal.
29513172,1,0,1,java.math.BigDecimal,Java BigDecimal validation.
29546774,2,1,3,java.math.BigDecimal,"This program is based on the BigDecimal-and-scale idea, as in assylias's answer, but modified to unconditionally use the maximum possible required scale."
29539113,2,0,0,java.math.BigDecimal,You are parsing the result from a BigDecimal back into a double.
29539113,2,0,0,java.math.BigDecimal,"If the BigDecimal is too big, the value is just Infinite because the double can' hold that much data."
29539113,2,0,0,java.math.BigDecimal,Just check for unwanted cast from BigDecimal to Double.
29573384,2,0,0,java.math.BigDecimal,You can just use BigDecimal for that
29551288,2,0,2,java.math.BigDecimal,"If you want decimal places you have to use a decimal radix, i.e. BigDecimal."
29556427,2,0,2,java.math.BigDecimal,Use BigDecimal instead.
29556427,2,0,2,java.math.BigDecimal,See http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
29557715,1,0,3,java.math.BigDecimal,I also tried BigDecimal for this but it gave me a ArithmeticException: “Non-terminating decimal expansion; no exact representable decimal result” when I changed the values of my % variables to something else than 100.
29557715,1,0,3,java.math.BigDecimal,result is 0 BigDecimal solution: code.
29562988,1,0,1,java.math.BigDecimal,"Do I really need to use BigDecimal, or epsilon, or whatever for that?"
29563094,2,0,1,java.math.BigDecimal,If you need decimal numbers with arbitrary precision use BigDecimal.
29575363,1,0,0,java.math.BigDecimal,"Date, Integer, BigDecimal and so forth."
29590746,1,0,0,java.math.BigDecimal,"BigDecimal calc without usage of if, switch, for, while."
29590746,1,0,0,java.math.BigDecimal,"I have to write a BigDecimal calc, which calculate simple expressions such as 2+2, 2*2, 2/2, 2-2 given as String."
29605300,2,0,0,java.math.BigDecimal,You can use java.math.BigDecimal to store the data exactly.
29613007,1,0,1,java.math.BigDecimal,Java - Math Calculations - BigDecimal.
29613007,1,0,1,java.math.BigDecimal,"Providing a decimal value for 1∕3, means representing the division as a floating   point number.”  In order to make things simpler for development my question is the following: 1- Given that I know what my calculations should expect with regards to ""scale"" and ""precision""✝ are there any drawbacks from making all calculations within my app with BigDecimal type?"
29613007,1,0,1,java.math.BigDecimal,Would this library allow me to calculate financial equations without having to cast outside BigDecimal type except at the result toString()?
29616718,2,0,0,java.math.BigDecimal,Have a look at BigDecimal.
29619958,1,0,2,java.math.BigDecimal,"Then I started creating my own 'Money'(fields as BigDecimal amount and java.util.Currency for currency), I wanted to use 'Currency' of java.util ."
29625460,1,0,0,java.math.BigDecimal,Is there a workaround for this using float and double numbers or should I necessarily use BigDecimal to solve it.
29625460,1,0,0,java.math.BigDecimal,"If I have to use BigDecimals, is there a certain limit to BigDecimal representation as well?"
29625486,2,1,1,java.math.BigDecimal,If you need to represents decimal numbers with arbitrary precision you have to use BigDecimal.
29625486,2,1,1,java.math.BigDecimal,Here is a link http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html The internal binary representation of float and double can introduce errors.
29632454,1,0,3,java.math.BigDecimal,new BigDecimal(double) vs new BigDecimal(String).
29632454,1,0,3,java.math.BigDecimal,When BigDecimal is used with an input of double and BigDecimal with an input of String different results seem to appear.
29632454,1,0,3,java.math.BigDecimal,"But since this is a BigDecimal, shouldn't it be the same?"
29632517,2,0,5,java.math.BigDecimal,"The problem is that the literals 0.333333333 and 0.666666666 are represented as doubles before being passed as an argument to BigDecimal --- notably, BigDecimal's constructor takes a double as an argument."
29632521,2,1,9,java.math.BigDecimal,"But since this is a BigDecimal, shouldn't it be the same?"
29632521,2,1,9,java.math.BigDecimal,"The error is introduced the moment you create new BigDecimal(0.333333333), because 0.333333333 constant already has an error embedded in it."
29632568,2,0,2,java.math.BigDecimal,According to Java docs of BigDecimal(double val)  The results of this constructor can be somewhat unpredictable.
29632568,2,0,2,java.math.BigDecimal,"One   might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
29649983,1,0,2,java.math.BigDecimal,Java BigDecimal error?
29687659,1,0,3,java.math.BigDecimal,I figured the processing time for BigDecimal is large.
29690633,2,0,1,java.math.BigDecimal,"If you really want to see the exact value, not just enough digits to uniquely identify the double, your current BigDecimal approach works well."
29687893,2,0,0,java.math.BigDecimal,"Should you want to represent the value, I would advise using the code you have used in your question: new BigDecimal( value ), where value is actually a String representation."
29687757,2,0,2,java.math.BigDecimal,"double doesn't have infinite precision, and you can't gain more precision than a double has by converting a double to a BigDecimal (like you can't gain more precision with an int when you do double r = 1/3; which is 0.0 because it widens an int to a double)."
29704025,2,0,2,java.math.BigDecimal,"BigInteger for integral types, BigDecimal for unbounded precision decimal types."
29720141,1,0,0,java.math.BigDecimal,For every record I doing some processing and I want save result which is BigDecimal value.
29721368,1,0,2,java.math.BigDecimal,BigDecimal in Java: How to round to 10?
29721368,1,0,2,java.math.BigDecimal,I want to round BigDecimal numbers to 10 up or down: 112 --> 110 117 --> 120 150 --> 150 115 --> 120 114.9 --> 110 67 --> 70 64 --> 60 etc.
29721506,2,1,2,java.math.BigDecimal,"More generally, BigDecimal.round() is all about managing the precision of your numbers, which is not what you're after."
29721506,2,1,2,java.math.BigDecimal,You can round a BigDecimal to the nearest multiple of any given power of 10 by setting its scale.
29721507,2,0,2,java.math.BigDecimal,toPlainString() Returns a string   representation of this BigDecimal without an exponent field.
29740577,1,0,0,java.math.BigDecimal,"Calling Stats.toArray.head returns:       res100: List[BigDecimal] = List(1429505205000, 68400001, 210800640) However, when I call initList.head, to access the first element of the List, I get an error."
29740577,1,0,0,java.math.BigDecimal,I've tried creating List[BigDecimal] from scratch and can do all standard operations on it.
29749496,1,0,5,java.math.BigDecimal,Can a double initialized with a small whole number value be used with accuracy in a BigDecimal context?
29749496,1,0,5,java.math.BigDecimal,It is well documented that using a double can lead to inaccuracies and that BigDecimal guarantees accuracy so long as there are no doubles in the mix.
29749496,1,0,5,java.math.BigDecimal,"I can immediately convert the double to a BigDecimal on my side of the interface and make all internal calculations using BigDecimal calls, but I want to be sure that is as safe as creating a new BigDecimal/String interface."
29749496,1,0,5,java.math.BigDecimal,"Given that in my original example using 0.1d does not accurately result in 0.1, as shown by the fact that the actual BigDecimal is 0.1000000000000000055511151231257827021181583404541015625, it appears that some fractions will introduce an inaccuracy."
29749659,2,0,7,java.math.BigDecimal,"The BigDecimal aspect isn't as relevant to this question as ""what is the range of integers that can be exactly represented in double?"""
29749659,2,0,7,java.math.BigDecimal,"- in that every finite double value can be represented exactly by BigDecimal, and that's the value you'll get if you call the BigDecimal(double) constructor."
29749659,2,0,7,java.math.BigDecimal,"So you can be confident that if the value you wish to represent is an integer which is exactly representable by a double, if you pass that double to the BigDecimal constructor, you'll get a BigDecimal which exactly represents the same integer."
29751948,1,0,1,java.math.BigDecimal,BigDecimal as a parameter of REST API.
29751948,1,0,1,java.math.BigDecimal,"such a simple question, Can a BigDecimal field used as a parameter for a REST API in my WebObject?"
29751948,1,0,1,java.math.BigDecimal,"As BigDecimal should be instantiated using constructor, will that happen if I send the parameter code."
29751948,1,0,1,java.math.BigDecimal,Will this parameter instantiated to BigDecimal automatically?
29786316,1,0,0,java.math.BigDecimal,Is there a way to convert these so that they all have the format 0.00 with at least one digit to the left of the decimal point and exactly two to the right without having to convert to a number object like BigDecimal and then back?
29788441,1,0,0,java.math.BigDecimal,Unable to add BigDecimal value in Groovy.
29788493,2,1,1,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#add%28java.math.BigDecimal%29  code.
29788493,2,1,1,java.math.BigDecimal,"Returns a BigDecimal whose value is (this + augend), and whose scale is max(this.scale(), augend.scale())."
29788493,2,1,1,java.math.BigDecimal,Parameters: augend - value to be added to this BigDecimal.
29798262,2,1,0,java.math.BigDecimal,"For that, you will need to use the java.math.BigDecimal class instead."
29816844,1,0,3,java.math.BigDecimal,Why can't we add BigDecimal to TreeSet ?
29816844,1,0,3,java.math.BigDecimal,"I read somewhere that we can't add BigDecimal to TreeSet because it incorrectly implements compareTo method , e.g."
29823396,2,0,5,java.math.BigDecimal,If you need to store larger amount accurately you will need to use BigDecimal & BigInteger.
29823396,2,0,5,java.math.BigDecimal,One of the advantages of using BigDecimal is that it will remind you when you should use rounding (not always but it is less error prone if you are unsure)  The downside is that the code is far more cumbersome.
29823396,2,0,5,java.math.BigDecimal,if you use BigDecimal you can do this code.
29823396,2,0,5,java.math.BigDecimal,"Adding a simple example of why BigDecimal doesn't solve all problems, but it does hid them."
29823396,2,0,5,java.math.BigDecimal,"The problem I have with BigDecimal is the black&white assessment that double is flawed and BigDecimal will fix all you problems when actually, you get all the same problems but with BigDecimal they can be harder to spot, so you might never know you have a problem."
29823396,2,0,5,java.math.BigDecimal,"With double, if you see 1.0999999999999998 you think, that doesn't look right, but with BigDecimal, you might see 1.00 and think that looks ok."
29824180,1,0,1,java.math.BigDecimal,"I run the following test to understand if it was slower using the BigDecimal pow method and then converting, or converting  to double and using the Math.pow."
29825685,2,0,0,java.math.BigDecimal,"I am not sure how accurate my answer will be , I saw the question tried it and now i have some view  BigDecimal  BigDecimal.pow method source code code."
29825685,2,0,0,java.math.BigDecimal,"Observations :  Each call to pow method creates a BigDecimal object main calculation is done via intVal.pow(n) => BigInteger.pow (check return statement of BigDecimal pow code above) Every BigInteger.pow creates a new object of BigInteger.pow (internal working of BigInteger.pow have been skipped)  now summary for BigDecimal  EACH call to BigDecimal.pow creates the following major objects (other calculation seemed to be minor) [in Java source code implementation of BigDecimal]  two new temporary BigInteger  one new temporary BigDecimal   for each call to pow we have 3 new temporary objects of subclasses of java.lang.Number(BigDecimal,BigInteger extent Number) created , this looks like a good point to compare in terms of time taken to run the code   Math.pow  Math.pow method source code code."
29825685,2,0,0,java.math.BigDecimal,"Observations :  static methods of Double class is used (i doubt that will lead to a major increase in execution time) lot of operations on primitive types are used (that also should take less time to run)   my personal view/conclusion would be   BigDecimal creates a lot of objects when it executes the .pow method , which might be the reason of excessive time taken to execute  Accuracy of calculation of both methods is something beyond my knowledge and experience , so ill try explore on accuracy soon and update this answer"
29825486,1,0,5,java.math.BigDecimal,"Are there other gotchas similar to BigDecimal(""1.0"").equals(new BigDecimal(""1"") returning false?"
29825486,1,0,5,java.math.BigDecimal,I've just recently come across a behavior inside BigDecimal that I wasn't previously aware of.
29825486,1,0,5,java.math.BigDecimal,Checking the BigDecimal documentation I can see that says that compareTo() == 0 should be used to check for equality ignoring scale while that equals() compares both the value and the scale.
29825618,2,0,1,java.math.BigDecimal,"According to JavaDoc of the equals():  Unlike compareTo, this method considers two BigDecimal objects equal only if they are equal in value and scale (thus 2.0 is not equal to 2.00 when compared by this method)."
29825629,2,0,3,java.math.BigDecimal,There is a value and a scale of the BigDecimal.
29825629,2,0,3,java.math.BigDecimal,"Unlike compareTo, this method considers two BigDecimal objects equal   only if they are equal in value and scale (thus 2.0 is not equal to   2.00 when compared by this method)."
29825629,2,0,3,java.math.BigDecimal,https://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#equals(java.lang.Object)
29825635,2,0,2,java.math.BigDecimal,BigDecimal equals checks that the contents of the two BigDecimal object are the same.
29825635,2,0,2,java.math.BigDecimal,"Just as ""1.0"" and ""1"" are not equal, nor is new BigDecimal(""1.0"").equals(new BigDecimal(""1"")) as the unscaledValue() and getScale() are both different."
29825635,2,0,2,java.math.BigDecimal,"The catch is that while you knew that == wouldn't compare the contents and you might have been told .equals is the solution for String, it may not do what you intended for BigDecimal."
29831443,1,0,1,java.math.BigDecimal,Exception saving Java BigDecimal 0.0000001 to oracle using JPA/Hibernate.
29831443,1,0,1,java.math.BigDecimal,"I see an exception when i try to save the the value an entity with a propert having the value new BigDecimal(""0.0000001"") in to a Oracle table column which has the data type Number (10,7) ."
29831443,1,0,1,java.math.BigDecimal,"Other values with the same scale, for example new BigDecimal (""0.0000012"") gets saved."
29832487,1,0,0,java.math.BigDecimal,"Within this method, one possible outcome from the display logic is that a BigDecimal property can be displayed as a currency, e.g."
29879348,2,0,2,java.math.BigDecimal,"However, you can use BigDecimal or BigInteger for big numbers."
29899323,1,0,3,java.math.BigDecimal,BigDecimal Multiplication.
29899323,1,0,3,java.math.BigDecimal,"I try to multiply two BigDecimal Values with multiply methods as follows, code."
29899355,2,0,5,java.math.BigDecimal,BigDecimal does not support numbers that cannot be written as a fixed length decimals.
29899355,2,0,5,java.math.BigDecimal,"From BigDecimal Javadoc:  In the case of divide, the exact quotient could have an infinitely long decimal expansion; for example, 1 divided by 3."
29899676,2,1,3,java.math.BigDecimal,The problem is you have a value which can't be represented in double but nor can it be represented in BigDecimal so you have to apply reasonable rounding to get the expected solution.
29900012,2,0,7,java.math.BigDecimal,"If you're working with sensitive floating points values, I recommend using BigDecimal instead of Double and use BigDecimal#compareTo rather than equals because BigDecimal#equals does not take into account the scale, while BigDecimal#compareTo does."
29904514,1,0,4,java.math.BigDecimal,Java BigDecimal.doubleValue between Java 6 and Java 8.
29904514,1,0,4,java.math.BigDecimal,"Case 1: In Java6 BigDecimal(""0.0050000"").doubleValue() returns 0.0050, and in Java 8 return value is 0.005 Case 2: In Java6 BigDecimal(""0.0250000"").doubleValue() returns 0.025, and in Java 8 return value is 0.025  In case 1: Java 6 returns with extra trailing zero.. Any idea??"
29920186,2,1,4,java.math.BigDecimal,"Also we talk about doubles, BigDecimal is not a problem here."
29940510,1,0,1,java.math.BigDecimal,BigInteger and BigDecimal.
29943413,2,1,4,java.math.BigDecimal,BigDecimal does it without any problem.
29943270,2,0,1,java.math.BigDecimal,"A ""number with unlimited size and precision for some really freaky experimental math programs"" is actually supported with the BigDecimal class, which shows that (and how) you can indeed have your own Number implementation."
29971247,2,1,5,java.math.BigDecimal,There is an option for the code generator to use BigDecimal instead of double for fields like price and quantity.
29968205,1,0,2,java.math.BigDecimal,BigDecimal Underflow.
29971474,1,0,1,java.math.BigDecimal,Using Java BigDecimal for a 15 precision digit (scale of 2).
29971474,1,0,1,java.math.BigDecimal,I am trying to convert a HTTP request parameter string to a 15 precision Java BigDecimal number (with scaling of 2).
29971474,1,0,1,java.math.BigDecimal,BigDecimal.
29987005,2,0,0,java.math.BigDecimal,You should use BigDecimal here otherwise you can always lose precision.
29999882,2,0,2,java.math.BigDecimal,"changeUserRole(long userId, Role newRole) or makePayment(long accountId, BigDecimal amount) rather than the CRUD approach of updateUser(User user) etc."
30001117,1,0,1,java.math.BigDecimal,Using BigDecimal didn't help.
30001293,2,0,0,java.math.BigDecimal,Why not simply using BigDecimal numbers and wrap them into a custom class : code.
30001293,2,0,0,java.math.BigDecimal,"However, you would have to implement all the maths, which would not be so easy even if BigDecimal would do most of the job."
30001877,2,0,0,java.math.BigDecimal,"IMO, BigDecimal should have been useful."
30009371,1,0,0,java.math.BigDecimal,I have a Java class with a locale and a BigDecimal.
30009371,1,0,0,java.math.BigDecimal,I'm currently serializing the BigDecimal with the @Seralize annotation: code.
30010967,2,0,0,java.math.BigDecimal,"The mechanism strips the prefixes find…By,   read…By, query…By, count…By, and get…  so when the get is stripped from your List<Material> getMaterials(BigDecimal material_number); it attempts on searching the property named materials against the Material entity."
30010967,2,0,0,java.math.BigDecimal,List<Material> retrieveMaterials(BigDecimal material_number);
30015275,1,0,2,java.math.BigDecimal,"What about other types like BigDecimal, Long, char etc?"
30019211,1,0,1,java.math.BigDecimal,Say for example the object is a BigDecimal: code.
30019798,2,0,0,java.math.BigDecimal,You can use BigDecimal: i.e.: code.
30025756,1,0,0,java.math.BigDecimal,There is an option for the code generator to use BigDecimal instead of double for fields like price and quantity.
30057275,2,0,2,java.math.BigDecimal,I suggest using double or BigDecimal instead as these have more precision.
30068131,1,0,3,java.math.BigDecimal,Set BigDecimal precision only if decimals repeating.
30068131,1,0,3,java.math.BigDecimal,I know that I can use BigDecimal.divide() method to set a fixed precision: code.
30068168,2,1,6,java.math.BigDecimal,"You get an ArithmeticException as described in BigDecimal.divide(BigDecimal) - ""if the exact quotient does not have a terminating decimal expansion"" because to properly represent the result of 1/3 would take infinite memory."
30068168,2,1,6,java.math.BigDecimal,"By using BigDecimal.divide(BigDecimal,int,RoundingMode) you explicitly set what precision you'll tolerate, meaning any division can be approximated in-memory."
30072239,2,0,0,java.math.BigDecimal,")%"") and invoke either Double.parseDouble or new BigDecimal(...) on your back-reference:  Double.parseDouble(m.group(1)) new BigDecimal(m.group(1))"
30083383,1,0,0,java.math.BigDecimal,"System.out.println(""Result=""+new BigDecimal(((63.19* 15) + (63.37* 5))).divide(new BigDecimal(15 + 5), MathContext.DECIMAL64).doubleValue()); Result=63.23499999999999 But with MathContext.DECIMAL32 we are getting correct result, see below: System.out.println(""Result=""+new BigDecimal(((63.19* 15) + (63.37* 5))).divide(new BigDecimal(15 + 5), MathContext.DECIMAL32).doubleValue()); Result=63.235"
30083649,2,0,1,java.math.BigDecimal,"The problem here not BigDecimal, but the fact that (63.19* 15) + (63.37* 5) is not 1264.7 but 1264.6999999999998, because the former cannot be represented as a double."
30104137,2,1,3,java.math.BigDecimal,"As for the second part : there's not a lot of cases, when you deal with real problems, where your epsilon isn't related to some context or physical dimension (or you probably shouldn't be using Float but BigDecimal)."
30106523,1,0,0,java.math.BigDecimal,"Most of the  elements  datatypes are BigDecimal, BigInteger, xmlGregorianCalender, String, int etc not collections."
30106636,2,0,0,java.math.BigDecimal,I am not sure how to correct the output with direct access to Integer/BigDecimal.
30152202,1,0,33,java.math.BigDecimal,"I know just one: new BigDecimal(""1.0"") is equal to new BigDecimal(""1"") using compareTo() but not equal using equals()."
30152667,2,1,25,java.math.BigDecimal,"This blog post by Stephen Colebourne gives the details, but in summary the following classes are inconsistent with equals:  java.math.BigDecimal java.io.ObjectStreamField javax.management.ObjectName (have not been able to reproduce an example though) java.util.Calendar java.util.GregorianCalendar  For example: code."
30155535,1,0,0,java.math.BigDecimal,Java: Why won't this BigDecimal loop work?
30155535,1,0,0,java.math.BigDecimal,"I've never worked with the BigDecimal class before, so I don't know what I am missing here."
30167406,2,0,0,java.math.BigDecimal,"You can try BigDecimal, or you can simply create your own object that implements the Comparable interface for sorting and has a toString() method that outputs the value formatted to two decimal places."
30167940,2,0,0,java.math.BigDecimal,"Doubles are imprecise, BigDecimal has an extra attribute: its precision."
30167940,2,0,0,java.math.BigDecimal,"So new BigDecimal(""5.20"") would have a precision of 2, whereas double 5.20 * 10000 probably sufficiently deviates from 52000.0."
30167940,2,0,0,java.math.BigDecimal,"Mind the avoidable new BigDecimal(5.20) neither knows a precision, neither is precise."
30167940,2,0,0,java.math.BigDecimal,BigDecimal unfortunately has a COBOListic usage.
30174878,2,0,0,java.math.BigDecimal,This answer expands on the suggestion to use java.math.BigDecimal rather than double.
30174878,2,0,0,java.math.BigDecimal,It is better for this application than double because every two decimal place number is exactly representable in BigDecimal.
30166943,2,0,1,java.math.BigDecimal,"But this will give to you a String that you can convert again to a double, if you don't want to have this String-conversion check this question to see how it can be achieved using BigDecimal."
30177787,1,0,1,java.math.BigDecimal,How to Round a BigDecimal Value to its nearest hundreths.
30177830,2,0,3,java.math.BigDecimal,"To round a given BigDecimal to the nearest hundred, use monthlyAmt = monthlyAmt.setScale(-2, RoundingMode.HALF_EVEN) (or substitute the appropriate rounding mode)."
30183246,2,0,0,java.math.BigDecimal,"Checking the source of org.json.simple.parser.JSONParser, etc, neither BigInteger nor BigDecimal are mentioned, so it looks like you'll need an alternative parser."
30220798,1,0,0,java.math.BigDecimal,"I need a group two columns, one is BigDecimal and the other Date, Thank you very much who can help me"
30249759,2,0,2,java.math.BigDecimal,"The reason for this is that Number is the parent class to all of the numeric wrapper classes, as well as BigDecimal and BigInteger."
30279946,1,0,0,java.math.BigDecimal,"@Service @Transactional(readOnly = true) @Validated public class BankServiceImpl implements BankService { public Map sumResolvedCardOperationsByAccountIdAndYearMonth(Integer accountId, YearMonth yearMonth) {...} @Transactional(readOnly = false) public void performTransfer(Integer debitedAccountId, Integer creditedAccountId, @Min(10) BigDecimal amount) throws UnsufficientBalanceException {...} } // and there are spring-mvc controllers."
30281629,2,0,1,java.math.BigDecimal,Read this You can use BigDecimal instead of double when calculating the change.
30315504,2,0,0,java.math.BigDecimal,You could use BigDecimal to back your Vec2 and then you could use create addX and addY method(s) for long and double fairly easily.
30319449,2,1,3,java.math.BigDecimal,In case of Oracle/PostgreSQL the corresponding type to NUMBER/NUMERIC is Java's BigDecimal.
30319449,2,1,3,java.math.BigDecimal,Also up to some size BigDecimal is smaller that Long.
30321209,1,0,1,java.math.BigDecimal,How should I assign the fractional part to a BigDecimal that comes from a tFileInputPositional in Talend?
30321209,1,0,1,java.math.BigDecimal,"I need to save those fields into a BigDecimal(20,2) so that the last two digits would be the fractional part but, when typing it in the component's schema, it simply adds "",00"" at the end of the number."
30321275,2,0,1,java.math.BigDecimal,what about using  BigDecimal.movePointLeft(2) ?
30321298,2,0,1,java.math.BigDecimal,I suspect you just want BigDecimal.movePointLeft.
30321298,2,0,1,java.math.BigDecimal,Returns a BigDecimal which is equivalent to this one with the decimal point moved n places to the left.
30321298,2,0,1,java.math.BigDecimal,"The BigDecimal returned by this call has value (this × 10^-n) and scale max(this.scale()+n, 0)."
30336628,1,0,1,java.math.BigDecimal,"I can't use BigDecimal class, because there is only pow(int) - I need pow(double) method."
30336628,1,0,1,java.math.BigDecimal,"There are maybe better classes than BigDecimal for Android, where we can do pow(double)?"
30386572,2,1,1,java.math.BigDecimal,"So if you wanna too have good function/method pow(BigDecimal x, BigDecimal y) you must download this class: BigFunctions.java (I get this code from this book: Java Number Cruncher: The Java ...) there is good method ln, and exp - we need them to our pow."
30350176,2,0,15,java.math.BigDecimal,"Immutability is particularly useful for ""simple"" types such as strings, dates, numbers (BigDecimal, BigInteger etc)."
30350385,2,1,2,java.math.BigDecimal,"If you need precise numeric computation, you have to use BigDecimal."
30352846,2,1,4,java.math.BigDecimal,"If you look at the toString() function of BigDecimal, it explains how the output is created:  Next, an adjusted exponent is calculated; this is the negated scale,   plus the number of characters in the converted unscaled value, less   one."
30355741,2,0,0,java.math.BigDecimal,You could use: BigInteger and BigDecimal classes for this kind of computations; But the power algorithm for such a big power numbers you need to implement.
30357757,2,0,3,java.math.BigDecimal,"For more options, try BigDecimal"
30372769,1,0,0,java.math.BigDecimal,"I need to change the returned value of a sequence stored into a H2DB, when i call nextVal through a direct SQL query H2 return a BigInt and i need a BigDecimal."
30372769,1,0,0,java.math.BigDecimal,"I can't cast or convert this value, I need H2 returning a BigDecimal."
30391357,2,0,0,java.math.BigDecimal,Try this totalbalance = (BigDecimal)query.uniqueResult();
30398552,2,1,0,java.math.BigDecimal,The new BigDecimal(100) can be created once and safely shared as an immutable.
30405094,2,0,2,java.math.BigDecimal,"For higher and better precision, you can use BigDecimal class found in the java.math package."
30405094,2,0,2,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html
30410639,2,0,2,java.math.BigDecimal,A BigDecimal consists of an arbitrary precision integer unscaled value and a 32-bit integer scale  code.
30412219,2,0,1,java.math.BigDecimal,Although then you can't use Integer and could use BigDecimal for carNo (because there is no pstmt.setInteger() only a pstmt.setBigDecimal()).
30423937,2,0,1,java.math.BigDecimal,"The reason for the unusual behavior is that even though the PX_CDUSAGE defines the column as SMALLINT, it is indeed mapped as a NUMBER(38) in an Oracle database, which, in turn, is represented as a BigDecimal Java object, which explains why vecColumn.elementAt(1) contains a BigDecimal instead of the expected Integer."
30423937,2,0,1,java.math.BigDecimal,"further details can be found here: Error description  Now, as a solution, a simple cast to BigDecimal instead of Integer to avoid the ClassCastException, as mpkorstanje correctly pointed out, but since this seems like code you cannot alter, I'd advise to check the indicated fix in the link of disabling the check."
30423458,2,0,2,java.math.BigDecimal,The element you're pulling from the array has the type BigDecimal.
30423458,2,0,2,java.math.BigDecimal,You can't cast a BigDecimal to an Integer.
30423458,2,0,2,java.math.BigDecimal,Replace the cast to Integer with a cast to BigDecimal and it should work.
30459495,1,0,0,java.math.BigDecimal,ps: should i consider using float or BigDecimal?
30459658,2,0,0,java.math.BigDecimal,"The closest you will get to your current requirements is either: using RoundingMode.HALF_UP or RoundingMode.UNNECESSARY For that you will have to use BigDecimal anyways, since Double and Float do not expose rounding."
30459681,2,0,0,java.math.BigDecimal,"As in your post, using BigDecimal is the way to go, if you want to use decimal rounding."
30461614,2,1,3,java.math.BigDecimal,"If you want more precision, use double, which provides about fifteen decimal digits, or switch to BigDecimal for arbitrary precision."
30465542,2,1,3,java.math.BigDecimal,"So make it an Integer or a BigDecimal, or whatever the appropriate type is."
30474381,1,0,3,java.math.BigDecimal,Java BigDecimal strange performance behaviour.
30474381,1,0,3,java.math.BigDecimal,Today I came cross a strange performance behaviour with BigDecimal.
30500150,1,0,1,java.math.BigDecimal,"I'm not so good into the BigDecimal, I simply want to use it to not lose any information like when using doubles."
30503954,2,0,1,java.math.BigDecimal,Use ApacheCommons MathUtil.round() combined with BigDecimal rounding constants  Round the given value to the specified number of decimal places.
30503954,2,0,1,java.math.BigDecimal,The value is rounded using the given method which is any method defined in BigDecimal.
30520208,1,0,3,java.math.BigDecimal,Conversion to String or BigDecimal will be too slow - this is an analytic app where the x10 cost of these methods will be very measurable.
30538939,1,0,2,java.math.BigDecimal,BigDecimal addition gives 0 in a function.
30539053,2,1,3,java.math.BigDecimal,BigDecimal is immutable.
30539110,2,0,2,java.math.BigDecimal,There are a few things happening here:  BigDecimal is immutable.
30539110,2,0,2,java.math.BigDecimal,"When you perform an operation on it, it returns a new BigDecimal instance."
30539110,2,0,2,java.math.BigDecimal,"When you reassign rightPF by doing rightPF = rightPF.add(new BigDecimal(10));, you're changing the value of the local rightPF and not the one in autoPlaceUser; that one still points to the original rightPF."
30539110,2,0,2,java.math.BigDecimal,Use an array (BigDecimal[]) for leftPF an rightPF and assign the new instances to the appropriate subscripts.
30539122,2,0,1,java.math.BigDecimal,"Java is pass-by-value: when the BigDecimal variable rightPF is re-assigned in the method that adds the numbers, the original variable passed by the caller method remains the same."
30540690,1,0,0,java.math.BigDecimal,"(By zero I mean, anything that parses to BigDecimal.ZERO.)"
30575123,1,0,1,java.math.BigDecimal,"Also I do not need to use BigDecimal or BigIntegers, I need primitive values."
30576068,2,1,3,java.math.BigDecimal,"BigDecimal If double precision isn't good enough, you will have to use BigDecimal objects for your calculations."
30577686,2,0,0,java.math.BigDecimal,"To get behavior you are expecting, create new BigDecimal variable each time you are calling rounding methods."
30578696,2,0,0,java.math.BigDecimal,"Or, you can try  java.math.BigInteger or java.math.BigDecimal."
30625467,1,0,2,java.math.BigDecimal,Java BigDecimal: Rounding off to client preferred digits and increment.
30628902,1,0,2,java.math.BigDecimal,Possible to find out if a BigDecimal only has zeros recurring after a certain point?
30635736,2,0,1,java.math.BigDecimal,I would recommend you to use BigDecimal instead of double when you are dealing with money.
30666921,2,1,0,java.math.BigDecimal,"Combine both, and you have an easy way to transform a String into a BigDecimal."
30651913,2,1,4,java.math.BigDecimal,Use java.math.BigDecimal (arbitrary precision decimals) that allows you to store those decimal without loss of precision.
30652838,2,0,0,java.math.BigDecimal,"If your goal requires precise calculation with full control over the precision, then I would suggest using BigDecimal class."
30652838,2,0,0,java.math.BigDecimal,"BigDecimal allows one to set very precise rules with which the calculations are done by setting the number of digits after the division point, rounding mode and by accepting a MathContext as an argument."
30682572,2,0,0,java.math.BigDecimal,Use BigDecimal to get exact calculation results.
30716787,2,0,0,java.math.BigDecimal,"Its seems small but it will affect the final result  If you want arbitrary precision floating-point value I recomend you to use BigDecimal, a class found in java.math."
30726877,1,0,1,java.math.BigDecimal,i've tried setting the celltype as string and use cell.getStringCellValue() and also this new BigDecimal(cell.getNumericCellValue()).toPlainString() but im still not getting the same value as with the excel here's my code code.
30736498,1,0,0,java.math.BigDecimal,NOTE: Of course if we remove scope it will improperly stop in BigDecimal.
30784883,2,1,0,java.math.BigDecimal,"After debugging Eclipse I understood that ""scope"" filters should match throwing location (in this case java.math.BigDecimal) and not the catch location."
30737814,2,1,3,java.math.BigDecimal,"An example of this in the JDK may be found in BigDecimal#compareTo, which explicitly states in javadoc that this method is not consistent with BigDecimal#equals."
30751726,2,0,1,java.math.BigDecimal,Use BigDecimal.
30751726,2,0,1,java.math.BigDecimal,When/why should we use BigDecimal?
30779980,2,1,7,java.math.BigDecimal,"If you want to restore the old behavior, you can first convert your number to BigDecimal using BigDecimal.valueOf constructor, which ""translates a double into a BigDecimal, using the double's canonical string representation"": code."
30782839,2,0,1,java.math.BigDecimal,You must define the sums using double values instead of the Double and BigDecimal objects like: code.
30818499,1,0,0,java.math.BigDecimal,BigDecimal Converter code.
30824532,2,0,0,java.math.BigDecimal,"In Java, you'll want to use BigDecimal to accurately represent these types of values."
30825743,2,0,7,java.math.BigDecimal,You might use BigDecimal.
30832143,2,0,1,java.math.BigDecimal,So BigDecimal java type is not very optimal for such computations.
30834887,1,0,1,java.math.BigDecimal,"I keep getting the   The method add(BigDecimal) in the type BigDecimal is not applicable for the arguments (pay)""  error with the code below."
30834887,1,0,1,java.math.BigDecimal,"For reference I have saved the pay class in a separate file, where I import BigDecimal as well."
30835231,2,1,0,java.math.BigDecimal,"Like the error message tells you, the add method of BigDecimal with one argument expects a BigDecimal instance: [javaDoc]  public BigDecimal add(BigDecimal augend) Returns a BigDecimal whose value is (this + augend), and whose scale   is max(this.scale(), augend.scale())."
30835231,2,1,0,java.math.BigDecimal,Parameters: augend - value to be added to this BigDecimal.
30835231,2,1,0,java.math.BigDecimal,Returns: this + augend  You've passed a variable of type Pay to this method and since Pay is not a subtype of BigDecimal it is not related to it.
30835231,2,1,0,java.math.BigDecimal,"You can do the following fix, to bypass that problem: Your basePay method creates a BigDecimal and I guess this is the one you like to add to salesCom, so change that method a bit: code."
30835231,2,1,0,java.math.BigDecimal,This method now creates a BigDecimal and returns it to the calling method.
30835231,2,1,0,java.math.BigDecimal,"As you can see in the JavaDoc posted above, add returns a new BigDecimal instance, but you're assigning the returned value to the variable finalCalc, which is of type int."
30835231,2,1,0,java.math.BigDecimal,So we need to change it to BigDecimal: code.
30835181,2,0,0,java.math.BigDecimal,And maybe you also want to be able to set the value directly as a BigDecimal although it's stored as an int?
30851417,1,0,2,java.math.BigDecimal,I wrote this to test BigDecimal in action but found that RoundingMode.UNNECESSARY threw an exception.
30883725,2,0,0,java.math.BigDecimal,"If you find any problem, just open a new issue in the project's github page Edit: another example demonstrating how you can convert your input rows to BigDecimal, using multiple formatters: code."
30883725,2,0,0,java.math.BigDecimal,"And here's the output: 2 arrays with BigDecimal objects, and the correct values: code."
30882963,1,0,1,java.math.BigDecimal,I'm developing a time critical algorithm in Java and therefore am not using BigDecimal.
30884877,1,0,0,java.math.BigDecimal,"Since the probability values can go outside the double range, I am using BigDecimal."
30887115,2,1,0,java.math.BigDecimal,Before creating a BigDecimal you are doing a double-division.
30893770,1,0,1,java.math.BigDecimal,How to retain trailing zeroes when converting BigDecimal to String.
30893770,1,0,1,java.math.BigDecimal,"I have to convert a BigDecimal value, e.g."
30893770,1,0,1,java.math.BigDecimal,"When I use the toString() or toPlainString() of BigDecimal, it just prints the value 2.12 but not the trailing zeroes."
30893770,1,0,1,java.math.BigDecimal,How do I convert the BigDecimal to string without losing the trailing zeroes?
30893928,2,0,0,java.math.BigDecimal,To convert a BigDecimal to a String with a particular pattern you need to use a DecimalFormat.
30910503,2,0,2,java.math.BigDecimal,BigDecimal never rounds automatically or loses precision it is highly preferred in calculations.
30910503,2,0,2,java.math.BigDecimal,You can Use BigDecimal code.
30910452,2,0,6,java.math.BigDecimal,"For greater precision than that, look at BigDecimal."
30923649,1,0,1,java.math.BigDecimal,issue while converting BigDecimal to Integer.
30923649,1,0,1,java.math.BigDecimal,In the DataBase PY column is a BigDecimal one.
30923649,1,0,1,java.math.BigDecimal,While execution of the query i'm getting BigDecimal values for FinalPayments list.
30923649,1,0,1,java.math.BigDecimal,The BigDecimal value is returned properly.
30923649,1,0,1,java.math.BigDecimal,The error is: cannot cast java.math.BigDecimal to java.lang.Integer  Between 1st and 2nd method i tried to convert BigDecimal to Integer.
30924039,2,0,0,java.math.BigDecimal,I'm not sure I understand your question but if you have a BigDecimal and you want a Integer you can use either intValue of intValueExact.
30948572,2,0,0,java.math.BigDecimal,For example I manipulated the bytecode of the BigDecimal class.
30948572,2,0,0,java.math.BigDecimal,"Last, in the HelloWorld class I created a BigDecimal just to check the manipulation behavior."
30940166,2,0,1,java.math.BigDecimal,"BTW better use BigDecimal instead of double in java, and in SQL DECIMAL is a safe bet to have a correct precision."
30948904,2,0,0,java.math.BigDecimal,You're setting the out parameter to an sql integer but then getting it as a BigDecimal.
30948904,2,0,0,java.math.BigDecimal,"If the sql function returns an integer then use: callableStatement.getInt(1) If the sql function returns a floating point number, then use callableStatement.registerOutParameter(1, java.sql.Types.DOUBLE) and callableStatement.getDouble(1) The mapping for java and oracle types can be found here: https://docs.oracle.com/javase/1.5.0/docs/guide/jdbc/getstart/mapping.html If you really do need BigDecimal because of rounding problems or something, then your sql function should return DECIMAL or NUMERIC."
30958788,1,0,1,java.math.BigDecimal,How to sort a list of BigDecimal objects.
30958788,1,0,1,java.math.BigDecimal,I have added each value as a BigDecimal to a list.
30958788,1,0,1,java.math.BigDecimal,How can I correctly sort a BigDecimal list from highest to lowest taking into account decimal and non decimal values?
30959109,1,0,0,java.math.BigDecimal,And yes I am working with BigDecimal.
30959176,2,0,1,java.math.BigDecimal,if you are trying to format BigDecimal having value 0.324 to .324.
30967373,1,0,0,java.math.BigDecimal,BigDecimal setScale method returning strange results.
30967373,1,0,0,java.math.BigDecimal,The above is a BigDecimal with scale set to 4; But If I do the following: code.
30967373,1,0,0,java.math.BigDecimal,Is this expected or is it a certain behaviour recorded for BigDecimal Classes?
30967443,2,1,2,java.math.BigDecimal,"The Javadocs for BigDecimal define ROUND_HALF_UP to do the following:   Rounding mode to round towards ""nearest neighbor"" unless both neighbors are equidistant, in which case round up."
31015642,2,0,0,java.math.BigDecimal,Use BigDecimal instead.
31021455,1,0,0,java.math.BigDecimal,Do I get wrong output with BigDecimal ROUND_HALF_EVEN rounding?
31021455,1,0,0,java.math.BigDecimal,I have a problem with rounding of BigDecimal numbers using ROUND_HALF_EVEN as described here.
31022708,2,0,1,java.math.BigDecimal,"Usually, a solution is to use BigDecimal instead."
31022708,2,0,1,java.math.BigDecimal,"See also the documentation of BigDecimal: http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html It's not as easy to use as double, but much safer."
31022754,2,0,1,java.math.BigDecimal,Rather than using BigDecimal you should probably just format your double when you're printing it out.
31022754,2,0,1,java.math.BigDecimal,BigDecimal is needed when you absolutely need to have precise accuracy during complex calculations (such as when money is involved).
31022520,2,1,4,java.math.BigDecimal,You should use BigDecimal in these cases.
31022520,2,1,4,java.math.BigDecimal,"For more information, Double vs. BigDecimal?"
31022500,1,0,0,java.math.BigDecimal,": instance = 1.04 Indeed, if I change ChildObjectValue.java, and change ChildObjectValue.bigDecimal declaration from BigDecimal to BigDecimalChildClass, GWT will refuse to compile."
31022500,1,0,0,java.math.BigDecimal,I guess the issue comes from the method setBigDecimal(BigDecimal bigDecimal) allowing child classes of BigDecimal as an argument.
31022500,1,0,0,java.math.BigDecimal,"I suppose I could change the setBigDecimal method to create a new BigDecimal object from the possibly subclassed argument, but what would be a proper, general solution to this issue ?"
31022500,1,0,0,java.math.BigDecimal,"Last but not least, it appears that using BigDecimal does not please GWT."
31022500,1,0,0,java.math.BigDecimal,Saving / loading values does work but I end up with that in Eclipse console: java.lang.InstantiationException: java.math.BigDecimal Continuing ... java.lang.RuntimeException: failed to evaluate: =Class.new(); Continuing ...
31022500,1,0,0,java.math.BigDecimal,I suppose it is due to BigDecimal not having a parameterless constructor...what I am to do with that ?
31046377,2,1,4,java.math.BigDecimal,Replace MyClass with Number and MySubClass with BigDecimal.
31046377,2,1,4,java.math.BigDecimal,Long has nothing to do with BigDecimal (even though both extend Number).
31064025,2,0,0,java.math.BigDecimal,(It's easy to tell that 1 +0.3 is equivalent to +1.0 .30 if you use something like BigDecimal to store the actual values; but to try to express that using a regex would be pure folly.)
31050023,2,1,9,java.math.BigDecimal,"Java provides a way to work around this by letting BigDecimal parse the scientific notation for you, and then converting the value to BigInteger using toBigInteger method: code."
31050023,2,1,9,java.math.BigDecimal,Conversion to scientific notation can be done by constructing BigDecimal using a constructor that takes BigInteger: code.
31071017,1,0,0,java.math.BigDecimal,Transform a BigDecimal with a negative scale to a positive scale.
31071017,1,0,0,java.math.BigDecimal,"I am getting BigDecimal values in the scientific notation, i.e., 1E+3 and has a scale of -3."
31071439,2,1,2,java.math.BigDecimal,"Note that BigDecimal is immutable, thus you have to reassign it."
31076724,2,0,0,java.math.BigDecimal,"First use Object[] for a record, and BigDecimal for an amount."
31081751,1,0,2,java.math.BigDecimal,"The method convertStringValueToType() returns either a String, BigDecimal, or Boolean."
31201062,2,1,0,java.math.BigDecimal,"String can only compare to Strings, whereas BigDecimal can only compare to BigDecimals, so all you can say is that the object can compare to ""something"" (i.e. Comparable<?>), which is completely useless for compile-time type checking purposes."
31107291,1,0,1,java.math.BigDecimal,I cannot use BigDecimal or anything other than double.
31144862,2,0,0,java.math.BigDecimal,Try a long or BigDecimal instead =)
31164621,1,0,1,java.math.BigDecimal,"To solve, simply use BigDecimal or DecimalFormat, using DecimalFormat you can no longer edit the amount because it's now a string, but using BigDecimal is going to slow down you program."
31164952,2,1,3,java.math.BigDecimal,Example of using BigDecimal code.
31164792,2,0,2,java.math.BigDecimal,"That said, if you're using numbers of this magnitude, you may have a precision problem, and probably want to use BigDecimal."
31170459,1,0,78,java.math.BigDecimal,Java BigDecimal Possible Overflow Bug.
31170459,1,0,78,java.math.BigDecimal,"I was testing boundary conditions on some code involving a BigDecimal, and I noticed that when a BigDecimal is initialized with the String ""1e2147483647"" it behaves unexpectedly."
31170459,1,0,78,java.math.BigDecimal,"Am I doing something wrong, or is this a problem with BigDecimal?"
31170506,2,1,86,java.math.BigDecimal,"Tracing through the source code of BigDecimal, on line 2585, this.precision() is 1, and this.scale is -2147483647.  this.precision() - this.scale therefore overflows, and the following overflow is not handled correctly."
31181216,1,0,1,java.math.BigDecimal,BigDecimal rounding not working properly in Jasper iReport.
31181514,2,0,0,java.math.BigDecimal,Try these steps instead: Set the Initial Value Expressions for $F{TotalVerified} and $V{total_ver} to: new java.math.BigDecimal(0.0) Use this expression instead of the one you originally had: code.
31193706,1,0,1,java.math.BigDecimal,BigDecimal to values monetary.
31193706,1,0,1,java.math.BigDecimal,"I want to multiply them and get an exact result, so I use BigDecimal and expect 38 as result: code."
31195176,2,0,0,java.math.BigDecimal,Or you can override these functions for BigDecimal class.
31195283,2,1,2,java.math.BigDecimal,This is explained in the javadoc for the BigDecimal(double) constructor:  The results of this constructor can be somewhat unpredictable.
31195283,2,1,2,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
31195337,2,0,1,java.math.BigDecimal,So you should use BigDecimal from the start.
31201829,2,0,5,java.math.BigDecimal,"It sounds like you should be using BigDecimal - create a BigDecimal from the long, and then scale it by 3 places: code."
31201829,2,0,5,java.math.BigDecimal,"By using BigDecimal instead of double, you know that you'll still have exactly the value you're really considering, rather than simply ""the nearest approximation that double can hold""."
31214152,1,0,0,java.math.BigDecimal,In most cases using BigDecimal would solve the issue but what about when using BigDecimals in complex calculations.
31214152,1,0,0,java.math.BigDecimal,"For example, the formula for present value being: PV = P / (1 + r)^n now if each of these components are BigDecimal values, BigDecimal does not provide a mechanism to raise a BigDecimal to a fraction power."
31214306,2,0,0,java.math.BigDecimal,Here is an implementation of common mathematical functions for BigDecimal http://arxiv.org/abs/0908.3030v2.
31225685,2,0,0,java.math.BigDecimal,"When you deal with currency in java, use BigDecimal."
31232227,1,0,0,java.math.BigDecimal,BigDecimal constructor performance - string vs numeric.
31232294,2,0,2,java.math.BigDecimal,Passing a String to the constructor of BigDecimal requires a parsing of the String and a check char by char.
31232294,2,0,2,java.math.BigDecimal,Here the code of BigDecimal with an int parameter: code.
31232294,2,0,2,java.math.BigDecimal,"The code of BigDecimal constructor with a String calls BigDecimal(char[], int, int) that has around 140 rows of code."
31232343,2,0,1,java.math.BigDecimal,The Constructor new BigDecimal(10000) should be faster because it does not have to convert a string into a number.
31232403,2,0,1,java.math.BigDecimal,Another reason for using the String constructor is to keep the value as-is when the BigDecimal is created.
31232403,2,0,1,java.math.BigDecimal,"If you don't really care about precision, you should stick to using double instead of BigDecimal."
31232403,2,0,1,java.math.BigDecimal,"That being said, you should prefer using the valueOf method instead of creating a new BigDecimal since valueOf will return cached values."
31238666,2,1,5,java.math.BigDecimal,"Assuming getContributionPercentage() returns a BigDecimal, you can use the following : code."
31258753,1,0,8,java.math.BigDecimal,"The Java Number class is the base class for the classes that wrap primitive types (Byte, Short, Integer, Long, Float, Double) and also other classes like BigInteger and BigDecimal and has 6 accessor (aka getter) methods: code."
31265765,2,0,0,java.math.BigDecimal,You can use BigDecimal to handle large number.
31265765,2,0,0,java.math.BigDecimal,"The BigDecimal class provides operations for arithmetic, scale manipulation, rounding, comparison, hashing, and format conversion."
31265765,2,0,0,java.math.BigDecimal,The toString() method provides a canonical representation of a BigDecimal.
31266123,1,0,2,java.math.BigDecimal,"I would like to parse decimal numbers in Java with plus sign, minus sign or no sign and get an instance of BigDecimal."
31266123,1,0,2,java.math.BigDecimal,This can be achieved simply by calling constructor new BigDecimal(string).
31274695,2,0,4,java.math.BigDecimal,You could use BigInteger or BigDecimal if you really need big numbers.
31296388,1,0,1,java.math.BigDecimal,Why BigDecimal constructor instance with differents values?
31296447,2,1,1,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a   BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with   a scale of 1), but it is actually equal to   0.1000000000000000055511151231257827021181583404541015625."
31296447,2,1,1,java.math.BigDecimal,"The String constructor, on the other hand, is perfectly predictable: writing new BigDecimal(""0.1"") creates a BigDecimal which   is exactly equal to 0.1, as one would expect."
31297716,1,0,3,java.math.BigDecimal,How accurate is BigDecimal.doubleValue() if no operation is applied on the amount.
31297716,1,0,3,java.math.BigDecimal,"I NEED to be sending a value as 'double', however I am:  Taking a value as a long Converting it to BigDecimal Calling method scaleByPowerOfTen on the BigDecimal (using '-2' to make cents a whole amount value)."
31297716,1,0,3,java.math.BigDecimal,Calling doubleValue() on the BigDecimal to get the needed value as double.
31297716,1,0,3,java.math.BigDecimal,"Now I know that double values lose precision when you apply arithmetic operations on them, however what could I possibly get if I try to send a double value as-is based on BigDecimal, such as (I believe) the above scenario is."
31297716,1,0,3,java.math.BigDecimal,"I also have the scenario where the BigDecimal is created using as a String, then doubleValue() is called on it."
31298048,2,0,0,java.math.BigDecimal,BigDecimal does work by exactly representing a floating point value.
31298048,2,0,0,java.math.BigDecimal,"But that means that for any valid value of BigDecimal, there is no guarantee that there exists a value of double that represents it."
31298048,2,0,0,java.math.BigDecimal,This is true no matter how you created the BigDecimal.
31298048,2,0,0,java.math.BigDecimal,"You will need to keep using BigDecimal during all calculations, or find an integer representation that matches your needs."
31298197,2,0,0,java.math.BigDecimal,The OpenJDK implementation of BigDecimal seems to achieve the natural accuracy of a double.
31298197,2,0,0,java.math.BigDecimal,creates a BigDecimal with a value of (effectively) 1852 and a scale of -2. code.
31301943,2,1,1,java.math.BigDecimal,You can use BigDecimal class to convert scientific notation to a usable number: code.
31324228,2,0,1,java.math.BigDecimal,"However, since you're using BigDecimal, these comparators (<, <=, etc.)"
31324683,2,1,1,java.math.BigDecimal,"A comprehensive solution: (as per discussion going around) Primitive data types has range limitation, so there are BigInteger, BigDecimal which provides arbitrarily long values and precision."
31337855,2,0,0,java.math.BigDecimal,See this [http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html] then use BigDecimal instead of Double.
31352098,1,0,0,java.math.BigDecimal,How can BigDecimal make no floating point inaccuracy?
31352187,2,0,2,java.math.BigDecimal,How can BigDecimal make no floating point inaccuracy?
31352187,2,0,2,java.math.BigDecimal,The counter example for the proposition for BigDecimal is that the value of 1 / 3 cannot be represented precisely using a single BigDecimal (or a float or double for that matter).
31352187,2,0,2,java.math.BigDecimal,"Since it is irrational, it does not have a finite numeric representation (except in an impractical sense that involves circular logic ...)  On the other hand, if you confine yourself to numbers that you can represent precisely as finite decimal floating-point strings (like ""1.6"" and ""0.1""), then BigDecimal can represent all of those numbers ... precisely."
31352187,2,0,2,java.math.BigDecimal,The conversion of a decimal number in String form to a BigDecimal does not involve any calculation that has risk of loss of accuracy.
31355978,2,0,2,java.math.BigDecimal,The class BigInteger (or the equivalent BigDecimal for decimal values) borns to handle such kind of problems.
31367330,2,0,0,java.math.BigDecimal,You should use the BigDecimal class to do monetary calculations.
31367330,2,0,0,java.math.BigDecimal,"Simply sanitise the input from your clients then call new BigDecimal passing in the amounts i.e BigDecimal depositAmt = new BigDecimal(""22.50""); To ensure you are receiving valid amount to process log the amounts passed in to the screen i.e Logger.getLogger(name.of.your.class).log(Level.info,""Amount passed in was {0}"",amountPassedIn); That was you can be certain only numeric values are provided."
31375051,1,0,2,java.math.BigDecimal,Java : BigDecimal - Print the number has input.
31375051,1,0,2,java.math.BigDecimal,"I am trying to print the BigDecimal in the given input format,but its pre-pending a zero before decimal point."
31375338,1,0,0,java.math.BigDecimal,can we remove floating zero before decimal point in BigDecimal.
31375401,2,1,0,java.math.BigDecimal,"You can convert the BigDecimal to a String, and then use a regex to conditionally remove the leading zero, if it exists: code."
31386169,2,1,2,java.math.BigDecimal,The BigDecimal class allows arbritary precision math.
31394011,2,0,2,java.math.BigDecimal,Take a look at the BigDecimal class.
31394011,2,0,2,java.math.BigDecimal,and:  The BigDecimal class gives its user complete control over rounding behavior.
31396842,1,0,0,java.math.BigDecimal,can not use any utility library such as java.math.BigDecimal javautil.LinkedList etc.
31409503,2,0,0,java.math.BigDecimal,If you want to handle both positive and negative numbers I would recommend using BigDecimal since Double technically doesn't have any decimal values to truncate.
31412103,1,0,1,java.math.BigDecimal,I'm working with BigDecimal calculations and read it's better to check for null than to surround with try catch.
31417035,2,1,5,java.math.BigDecimal,"To solve this, you must use something that supports larger numbers, like BigInteger or BigDecimal."
31477233,1,0,0,java.math.BigDecimal,How to bind a number string with 1000 separator to BigDecimal with Spring WebFlow.
31477233,1,0,0,java.math.BigDecimal,I want to bind the string 10'000 from an HTML form field to a BigDecimal field in the form-backing bean.
31477970,1,0,2,java.math.BigDecimal,ognl.noconversionpossible when using TreeMap and BigDecimal (Struts2).
31477970,1,0,2,java.math.BigDecimal,"The problem is, it feels like OGNL is treating the values as Integer, not BigDecimal."
31477970,1,0,2,java.math.BigDecimal,"Indeed, if I do not use a TreeMap, but just a single BigDecimal in the form, then struts manages to populate correctly my Java Object."
31477970,1,0,2,java.math.BigDecimal,"Do I need to create a custom converter for BigDecimal or TreeMap, or something else?"
31479605,1,0,1,java.math.BigDecimal,Engineering representation of a BigDecimal instance.
31479605,1,0,1,java.math.BigDecimal,"How can I configure a BigDecimal value so that if it has less that 32 characters, it should be displayed as a plain String, and otherwise it should be represented in an engeneering format?"
31479605,1,0,1,java.math.BigDecimal,"So, how can I gain engineering representation of a BigDecimal instance?"
31486405,1,0,0,java.math.BigDecimal,BigDecimal initialized with integer literal with leading zeros.
31486405,1,0,0,java.math.BigDecimal,Shouldn't we use BigDecimal to process int or long value in any scenario?
31486405,1,0,0,java.math.BigDecimal,"(I mean leave about performance and stuff, I know its not advisable to use BigDecimal to process only int or long)."
31486405,1,0,0,java.math.BigDecimal,"My data has mix of both long and decimal values, so am trying to know about BigDecimal."
31486441,2,1,0,java.math.BigDecimal,The problem is not with BigDecimal but with the literal numbers you're passing in.
31491607,2,0,0,java.math.BigDecimal,You can use BigDecimal and BigInteger as shown below: code.
31491650,2,0,0,java.math.BigDecimal,You can make use of BigDecimal intValue() for Scientific Notation of integer like :- code.
31622105,2,0,1,java.math.BigDecimal,"Double is usually enough in terms of precision, because precision after double such as BigDecimal, which is an exact way of representing numbers is extremely expensive in terms of speed and memory, two things you want to reduce in computation."
31524467,1,0,0,java.math.BigDecimal,Calculate Euro Prices Using BigDecimal.
31524467,1,0,0,java.math.BigDecimal,"I have a string with the price of 70,00 and another string with the price of 25,00 I want to add them (find the sum), and I have concluded r=that I have to use BigDecimal to accomplish it."
31531887,2,0,2,java.math.BigDecimal,You can probably use BigDecimal for this: code.
31536198,1,0,0,java.math.BigDecimal,DecimalFormat pattern for BigDecimal.
31545143,1,0,1,java.math.BigDecimal,I'm trying to sort BigDecimal numbers.
31547255,1,0,0,java.math.BigDecimal,Java Map String BigDecimal get function.
31547255,1,0,0,java.math.BigDecimal,"I want to compare product price with ""low"" price from Map but I get error  java.util.LinkedList cannot be cast to java.math.BigDecimal   Is filterParams.get(""low"") a linkedlist of one value?"
31551864,1,0,0,java.math.BigDecimal,How Does One Find the Binary Equivalent of a BigDecimal in Java?
31551864,1,0,0,java.math.BigDecimal,"Anyways, I'm programming an application in Java that converts a BigDecimal value into its binary value."
31551864,1,0,0,java.math.BigDecimal,"However, the toString() method for a BigDecimal does not accept a radix parameter."
31551864,1,0,0,java.math.BigDecimal,I have considered parsing the BigDecimal into a double and using one of the Stock Exchange answers on getting a double's binary form.
31551880,2,0,0,java.math.BigDecimal,"If you just want to turn it into bits somehow, and you don't care the actual details of the representation, then call BigDecimal.unscaledValue().toByteArray() and combine that with BigDecimal.scale()."
31558253,2,0,1,java.math.BigDecimal,"For bigger string, you may need to use BigDecimal code."
31557401,1,0,0,java.math.BigDecimal,Issue with scale and rounding of BigDecimal.
31557401,1,0,0,java.math.BigDecimal,Basically I wrote a method for reciprocal value of a BigDecimal instance: code.
31561559,2,0,1,java.math.BigDecimal,Use a BigDecimal.
31562474,2,0,1,java.math.BigDecimal,Information on how to use a Comparator is here and information on BigDecimal is here.
31564317,2,0,2,java.math.BigDecimal,"BigDecimal is a PITA for writing calculations, but keeps its precision."
31563363,1,0,4,java.math.BigDecimal,BigDecimal Class in Java - Reason behind Constant values.
31563363,1,0,4,java.math.BigDecimal,"But  while I am curiously debugging BigDecimal class,  I found there are many constant values substituted in most of the places."
31563363,1,0,4,java.math.BigDecimal,"BigDecimal.java line number 394, code."
31563363,1,0,4,java.math.BigDecimal,BigDecimal.java line number 732 code.
31578513,1,0,1,java.math.BigDecimal,BigDecimal division breaks down when dividing by factorials.
31578513,1,0,1,java.math.BigDecimal,"I turned to BigInteger and BigDecimal to handle these, but I've come upon an error when the factorial gets big enough that I haven't been able to pin down."
31621901,1,0,1,java.math.BigDecimal,ResultSet metadata identifies object type as BigDecimal.
31633661,2,0,1,java.math.BigDecimal,"Otherwise, strip the trailing zeros from BigDecimal Code edited :  code."
31627379,1,0,0,java.math.BigDecimal,"Spring XML configuration - how to define Instant, BigDecimal, ... parameters?"
31630932,2,0,1,java.math.BigDecimal,Use BigDecimal instead of double and long.
31630932,2,0,1,java.math.BigDecimal,"When you want precise calculations of floating point numbers, always use BigDecimal."
31632011,2,0,0,java.math.BigDecimal,"Decimal Number Calculation If you are just asking about the decimal numbers, then the answer by Samrat Dutta is correct: Use BigDecimal if you care about accuracy."
31632011,2,0,0,java.math.BigDecimal,"As a general rule, if in doubt about which to use for business problems, go with BigDecimal rather than floating-point."
31805656,2,1,1,java.math.BigDecimal,"For this case, mapping the FK as a simple column is needed to avoid joining to Compania: @Column(name = ""compania"",updatable=false,insertable=false)     private BigDecimal compania_id; and change the query to: l.id.compania = c.compania_id"
31652477,2,0,1,java.math.BigDecimal,You're passing in a double to the constructor of BigDecimal causing precision to be lost.
31662487,1,0,0,java.math.BigDecimal,"If this is not possible, would it be best to convert the incoming numbers to BigDecimal (without losing precision) and then doing the calculations and somehow doing the conversion back to type E?"
31673875,1,0,0,java.math.BigDecimal,Issue with rounding aftrer division of BigDecimal values.
31673875,1,0,0,java.math.BigDecimal,I've got a problem with the result of division of BigDecimal instances.
31673875,1,0,0,java.math.BigDecimal,But in my taste there's something wrong with parsing the result to a String and then create new properly rounded BigDecimal.
31683046,1,0,1,java.math.BigDecimal,Removing unnecessary zeros from a BigDecimal instance.
31683046,1,0,1,java.math.BigDecimal,I've a simple program that adds two instances of BigDecimal: code.
31688290,1,0,0,java.math.BigDecimal,Why is my BigDecimal 0.0000 not equal to BigDecimal.ZERO?
31688290,1,0,0,java.math.BigDecimal,Why does 0.0000 as a BigDecimal not equal BigDecimal.ZERO?
31688355,2,1,4,java.math.BigDecimal,From the documentation:  Returns true if x is a BigDecimal instance and if this instance is equal to this big decimal.
31693865,2,0,1,java.math.BigDecimal,You have to convert both values to BigDecimal and then you can compare it: code.
31696550,2,0,0,java.math.BigDecimal,"This answer is an expansion on an existing answer, illustrating why BigDecimal, not double, is the right common type to use for comparing BigInteger and double."
31696550,2,0,0,java.math.BigDecimal,"On the other hand, using BigDecimal to do the comparison correctly shows biPower as equal to dPower, but biPowerPlusOne as greater than dPower."
31696550,2,0,0,java.math.BigDecimal,"The reason is that 2**100+1 is exactly representable in BigInteger and BigDecimal, but rounds to 2**100 in double arithmetic (using ** to represent exponentiation) code."
31700570,1,0,0,java.math.BigDecimal,ClassCastException: java.lang.Double incompatible with java.math.BigDecimal.
31700570,1,0,0,java.math.BigDecimal,"And at java end I was type casting this value to BigDecimal, and it was working perfectly fine."
31700570,1,0,0,java.math.BigDecimal,Now I started getting this exception :java.lang.ClassCastException: java.lang.Double incompatible with java.math.BigDecimal and to resolve this I am casting this variable type to Double  and then casting it back to BigDecimal using  New : code.
31700570,1,0,0,java.math.BigDecimal,UPDATE : I checked both drivers and below are the versions : Old : DriverVersion: 3.6.60 NEW : DriverVersion: 3.64.106 The instances which I am getting created after reading the values are of type: Old : BigDecimal NEW : Double So now the problem is clear that why are we getting this exception because we are getting Double object now as default object.
31700761,2,0,0,java.math.BigDecimal,BigDecimal and Double are sub classes of Number and you can cast Double or BigDecimal to  Number but you can not case Double to BigDecimal.
31700761,2,0,0,java.math.BigDecimal,"For PL/SQL type DEC, DECIMAL, NUMBER, NUMERIC you will have java.math.BigDecimal and that's why you are getting this Exception."
31700761,2,0,0,java.math.BigDecimal,The recommended Java mapping for the DECIMAL and NUMERIC types is   java.math.BigDecimal.
31700761,2,0,0,java.math.BigDecimal,"The java.math.BigDecimaltype provides math   operations to allow BigDecimal types to be added, subtracted,   multiplied, and divided with other BigDecimal types, with integer   types, and with floating point types."
31700761,2,0,0,java.math.BigDecimal,One quick solution is to get value as String  and than convert it to specific value as it's important to note the recommended type is BigDecimal as your DECIMAL type can generate which can only be stored in BigDecimal and Double may not work.
31700761,2,0,0,java.math.BigDecimal,Now your question is it converted to BigDecimal.
31700874,2,0,0,java.math.BigDecimal,In Java and JDBC all DECIMAL values are mapped with BigDecimal and there's the getBigDecimel() method of ResultSet which allows you to directly get it a s a BigDecimal.
31700874,2,0,0,java.math.BigDecimal,"You can see from Mapping SQL and Java Types that:  The recommended Java mapping for the DECIMAL and NUMERIC types is java.math.BigDecimal, a Java type that also expresses fixed-point numbers with absolute precision."
31700874,2,0,0,java.math.BigDecimal,"The java.math.BigDecimal type provides math operations to allow BigDecimal types to be added, subtracted, multiplied, and divided with other BigDecimal types, with integer types, and with floating point types."
31717181,2,1,1,java.math.BigDecimal,Or very simply with BigDecimal and toPlainString: code.
31721592,2,0,0,java.math.BigDecimal,More about BigDecimal here.
31723811,1,0,0,java.math.BigDecimal,Can not persist an object with Id equals new BigDecimal(0).
31724405,1,0,2,java.math.BigDecimal,"I do a couple of calculations with BigDecimal, before I return the final result."
31724679,2,0,1,java.math.BigDecimal,"I found a helpful website with examples, explanations, and results of providing precision using BigDecimal."
31728070,1,0,0,java.math.BigDecimal,* or java.math.BigInteger and java.math.BigDecimal?
31745309,2,0,0,java.math.BigDecimal,"Every long and float value can be represented by a BigDecimal, so you can also use the BigDecimal class to compare a long an a float: code."
31745112,2,0,1,java.math.BigDecimal,"However, using BigDecimal may be clearer in this case, see @kocko's answer."
31744984,2,1,3,java.math.BigDecimal,You can wrap both of them in BigDecimal and them compare them: code.
31756276,2,0,0,java.math.BigDecimal,You should consider using a Json parsing library to parse the string into a java List<List<BigDecimal>> (as dognose points out the input as given is not actually json).
31762241,2,1,1,java.math.BigDecimal,"UPDATE If you want a BigDecimal, you can't just add it with +."
31762917,1,0,2,java.math.BigDecimal,"The recommended approach is to use BigDecimal and then scale it, in particular to avoid expensive converting to string and back."
31762917,1,0,2,java.math.BigDecimal,Doesn't it defeat the whole purpose of having BigDecimal?
31763040,2,0,1,java.math.BigDecimal,"This question only really makes sense using BigDecimal and giving the answer as a BigDecimal or a String, not a double."
31790538,2,1,1,java.math.BigDecimal,"If you change the scale of a BigDecimal, it will return a new BigDecimal with the specified scale but with the same numerical value."
31790538,2,1,1,java.math.BigDecimal,You should give the scale at the initialization of the BigDecimal in order for it to interpret correctly your unscaled number : code.
31809621,2,0,2,java.math.BigDecimal,"And if you want infinite precission, to BigDecimal."
31853423,1,0,1,java.math.BigDecimal,Stange values after BigDecimal initialization.
31853602,2,0,3,java.math.BigDecimal,Use BigDecimal.valueOf(double) static method: this will initialize the BigDecimal from string representation of the double number which is what you need.
31853636,2,0,2,java.math.BigDecimal,"One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625."
31853501,2,0,2,java.math.BigDecimal,Its closest approximation to 1.7 is being passed to the BigDecimal constructor.
31853501,2,0,2,java.math.BigDecimal,And BigDecimal is capable of representing that imprecision so giving the observed effect.
31853501,2,0,2,java.math.BigDecimal,One remedy is to use the BigDecimal constructor that takes a double along with a MathContext object: this allows you to control the rounding behaviour.
31853501,2,0,2,java.math.BigDecimal,Another remedy is to use BigDecimal.valueOf(1.7).
31853771,2,0,0,java.math.BigDecimal,You can use below code to initialize a HashMap using BigDecimal.
31853988,1,0,0,java.math.BigDecimal,But it is not working and throw exception   org.springframework.dao.InvalidDataAccessApiUsageException: Parameter value [12%] did not match expected type [java.math.BigDecimal (n/a)]; nested exception is java.lang.IllegalArgumentException: Parameter value [12%] did not match expected type [java.math.BigDecimal (n/a)]  How can I search using derived query or jpa Query ?
31879978,2,0,1,java.math.BigDecimal,"int x = (int) Double.parseDouble(s); ran in 3 nano seconds, int y = new BigDecimal(s).intValue(); ran in 8 nano seconds"
31880055,2,0,2,java.math.BigDecimal,The new BigDecimal(str).intValue(); is surely the worst choiche because can lead to unespected results as stated in the Oracle documentation (see the bold):  public int intValue() Converts this BigDecimal to an int.
31880055,2,0,2,java.math.BigDecimal,"This conversion is analogous to the narrowing primitive conversion from double to short as defined in section 5.1.3 of The Java™ Language Specification: any fractional part of this BigDecimal will be discarded, and if the resulting ""BigInteger"" is too big to fit in an int, only the low-order 32 bits are returned."
31880055,2,0,2,java.math.BigDecimal,Note that this conversion can lose information about the overall magnitude and precision of this BigDecimal value as well as return a result with the opposite sign.
31882656,2,1,4,java.math.BigDecimal,The stream of BigDecimals is mapped to as stream of two element arrays of BigDecimal  where the first element is the element from the original stream and the second is the place holder with value one.
31882656,2,1,4,java.math.BigDecimal,The first element of the b element contains each of the BigDecimal values to add to the sum.
31882656,2,1,4,java.math.BigDecimal,"If the Optional is not empty, Optional.get() function will return a two element array of BigDecimal where the sum of the BigDecimals is in the first element and the count of the BigDecimals is in the second."
31888235,2,0,0,java.math.BigDecimal,"Mutable Objects (StringBuilder, BigInteger, BigDecimal, etc.)"
31890175,1,0,4,java.math.BigDecimal,My second question is in regards to using BigDecimal.
31890175,1,0,4,java.math.BigDecimal,I know that I should be using BigDecimal for precision important calculations.
31890175,1,0,4,java.math.BigDecimal,Therefore I should be using BigDecimal's methods for arithmetic and comparing.
31890175,1,0,4,java.math.BigDecimal,"However, BigDecimal also includes a doubleValue() method which will convert the BigDecimal to a double."
31895844,2,0,0,java.math.BigDecimal,http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#remainder(java.math.BigDecimal)
31895926,2,1,2,java.math.BigDecimal,"If you are asking for the actual operation to get a remainder of a BigDecimal, you want this: code."
31899093,1,0,0,java.math.BigDecimal,Java - Odd error message when converting double to BigDecimal.
31899093,1,0,0,java.math.BigDecimal,"In a program, a double is being converted to BigDecimal."
31899093,1,0,0,java.math.BigDecimal,Does BigDecimal.valueOf(double) not work correctly since this is referenced through another method?
31899517,2,0,1,java.math.BigDecimal,Would I have to change all of my double calculations to BigDecimal calculations in order to fix this?
31899517,2,0,1,java.math.BigDecimal,"In this case, you are only using BigDecimal for formatting in ""engineering"" syntax."
31899324,2,0,1,java.math.BigDecimal,"This error occurs with you because BigDecimal.valueOf(value) does not accept ""NaN"" ""Not a Number"" as parameter and the following expression will return NaN code."
31901899,2,0,1,java.math.BigDecimal,"There's no point in using BigDecimal if you are initializing it with a double, which has a limited precision."
31904699,1,0,0,java.math.BigDecimal,"I tried with BigDecimal but i get 11162061.000002314 ,i need a long number after the dot and only 1 decimal before the dot."
31910336,1,0,1,java.math.BigDecimal,I would like to be able to do something similar to BigDecimal's compareTo() method.
31912072,2,0,0,java.math.BigDecimal,"generic summator for numbers (Long, BigDecimal, ...): code."
31918364,1,0,4,java.math.BigDecimal,How to round BigDecimal smaller than 1.
31918364,1,0,4,java.math.BigDecimal,The problem is that number 0.5 is rounded to 0.5 instead of 1 How to Round BigDecimal smaller than 1
31918628,2,0,1,java.math.BigDecimal,You can use below code to round BigDecimal smaller than 1. code.
31946295,2,0,0,java.math.BigDecimal,"The only foolproof way to maintain accuracy on decimal values is to use NUMERIC(precision, scale) in PostgreSQL, and BigDecimal in Java."
31983728,2,0,1,java.math.BigDecimal,"So I've investigated, that the RowID is built via a BigDecimal and voilà: code."
31971957,1,0,0,java.math.BigDecimal,"When I am writing out skeleton classes or just creating new classes in large quantities, I find it tedious to run Organize Imports or Ctrl-space Enter to import extremely common classes like List, ArrayList, BigDecimal."
31972079,1,0,1,java.math.BigDecimal,I want to obtain only one myVO obj that is the SUM of BigDecimal values of the records with the same date (the lowest one).
31974837,1,0,5,java.math.BigDecimal,Can doubles or BigDecimal overflow?
31974837,1,0,5,java.math.BigDecimal,Is it possible for double and BigDecimal to overflow?
31974837,1,0,5,java.math.BigDecimal,Judging by Double.MAX_VALUE and How to get biggest BigDecimal value I'd say the answer is yes.
31974947,2,0,3,java.math.BigDecimal,BigDecimal on the other hand will indeed overflow and throw a corresponding exception in that case as well - this is very unlikely to ever happen in practice though.
31974955,2,0,3,java.math.BigDecimal,BigDecimal has the addExact() protection already built in.
31974955,2,0,3,java.math.BigDecimal,multiply) of BigDecimal contain a check on the scale of the result: code.
31974902,2,0,5,java.math.BigDecimal,"BigDecimal doesn't overflow, period, it is only limited by the amount of memory in your computer."
31974902,2,0,5,java.math.BigDecimal,See: How to get biggest BigDecimal value The only difference between + and .addExact is that it attempts to detect if overflow has occurred and throws an Exception instead of wraps.
32022617,1,0,0,java.math.BigDecimal,"Controller not accepting comma separated number value into BigDecimal, formatter bean declaretion for XML Bean configuration."
32022617,1,0,0,java.math.BigDecimal,"I have a problem with dynamic Number format for showing into text boxes but while submitting the form value into the controller, controller can not parse/cust the comma separated number value into BigDecimal."
